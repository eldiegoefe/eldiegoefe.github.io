{"pages":[{"tags":"blog","text":"Asistimos al desarrollo exponencial del movimiento de mujeres, que impulsa la igualdad de género en los derechos y en los hechos, el fin de la violencia especialmente dirigida hacia ellas y el aborto legal. Es el movimiento político contemporáneo de mayor magnitud, sucesor del movimiento piquetero como protagonista de décadas pasadas, y mucho más interesante que el vaivén partidario de la Argentina. Las izquierdas, pequeñas pero crecientes, participan activamente del movimiento de mujeres y ojalá ocurra la cadena lógica de hechos que nos lleve de la mecha antipatriarcal a la explosión en un anticapitalismo de masas. Más que sumar muy poco a la difusión de los feminismos y sus discusiones (sobre todo por mi ignorancia) quiero traer la atención a un aspecto del empoderamiento de la mujer que quizás critiquen como una observación demasiado lineal: la fuerza en el ambiente deportivo ya no es un capital exclusivo de la masculinidad, debido a la participación creciente de las mujeres en deportes caracterizados por el desarrollo muscular (fuera del dominio de la fuerza, pasa lo mismo en el resto de los deportes, como en el futbol y el ajedrez). Mujeres jóvenes y no tan jóvenes están rompiendo los límites de la femineidad enfermiza que les asignaba a sus músculos el adjetivo de \"tonificados\" como máxima expresión de desarrollo admisible. Las masculinidades atrofiadas por el patriarcado perciben a las mujeres fuertes como machonas (también varoneras en el viejo diccionario de mi niñez). La fortaleza de una mujer entrenada pone en alerta a muchos hombres que probablemente se lamentan por encontrar cuestionada su dominación. Quienes nos queremos sacar de encima los mandatos de la sociedad desigualitaria admiramos a las mujeres que levantan pesos y desafían sus límites. Tenemos ejemplos cercanos, nuestra vecina de Santo Tomé, Malvina Soledad Verón (en la imagen de arriba) es una pesista extraordinaria que siendo juvenil y amateur resucitó las medallas en la halterofilia para nuestro país (las anteriores las trajo Humberto Salvetti en la década del 50). Siguen sus pasos Johana Palacios, Sasha Nievas (en la imagen de abajo, ayudando a una compañera), Soledad Santillán, Abril De Candido, entre muchas otras. Por carriles paralelos a la disciplina olímpica transcurren otras mujeres entrenando en levantamiento de potencia (powerlifting) y crossfit (donde las pesas no son la actividad exclusiva, pero sí forman parte del currículum). Alejándonos de este dominio podemos ver un fenómeno semejante en otros deportes, tradicionalmente de hombres, como las disciplinas de contacto (artes marciales, boxeo, lucha, etc). El desarrollo de la fuerza física permite a la deportista y a su entorno advertir que están preparadas para superar desafíos de magnitud. Quien no entrena desconoce las posibilidades de su cuerpo. Experimentar la posibilidad de levantar repetidamente dos o tres veces su propio peso, sin sufrir lesiones, se traduce en una transfusión de confianza, y probablemente se experimente como un sólido argumento para creer que se pueden lograr objetivos impresionantes invirtiendo suficiente disciplina. Interludio . Hace poco me crucé una especie de meme que sólo contenía este texto: \"Empresa comprometida con la igualdad de género busca cuatro mujeres para descargar ocho camiones de cemento\" (extraña afición por los múltiplos de 4). Supongo que su autor y difusores desprecian el igualitarismo señalando la diferencia física entre hombres y mujeres. Aquellos que visten de rosado a sus hijas y las preparan para una vida de cocineras sometidas se entusiasman demostrando matemáticamente la desigualdad de género. Sin embargo, aún multiplicando por cuatro la capacidad física del sujeto en cuyo perfil encontré el meme , resulta insuficiente para que tal alfeñique con su déficit de masa muscular pueda descargar la cuarta parte del camión más pequeño. Por otra parte, desprecian el efecto que tiene \"hombrear\", sin ergonomía alguna, bolsas de 50 kg sobre la columna vertebral, actividad que lesiona la salud de los laburantes, sean mujeres u hombres (el punto de vista machista coincide con el de explotador). Y si no me creen que levantar ese peso le hace mal a cualquiera, existe nueva reglamentación que limita las bolsas a un máximo de 25 kg, para que nadie sea sometidos a tal insalubridad. Maddy Forberg nació en 1997, cerca de Chicago en USA . Cuenta una dificil historia familiar. Su hermana sufrió un accidente que tuvo como consecuencia una lesión cerebral traumática y reconoce que pudo haber sido mucho peor para su familia si no hubiesen recibido el prolongado cuidado y apoyo de les enfermeres(*). Ella misma padeció de depresión y trastornos alimentarios. Actualmente estudia enfermería (inpirada a devolver aquello que recibió), ya trabaja con pacientes y en simultaneo desarrolla su carrera deportiva. El entrenamiento le permitió lidiar con esa historia, además de acondicionar su cuerpo de 58 kilogramos de peso para levantar barras cargadas de acero por un total de 170 (casi el triple de su ser). Y su carrera lleva apenas tres años. Maddy, entre otras cultoras de la fuerza, y su popularidad en las redes sociales, nos ayuda a los testigos de sus logros a imaginarnos más posibilidades sobre nosotros mismos. El empoderamiento feminista nos abarca a los hombres. Además devela lo que la cultura machista oculta en los cuerpos femeninos que modela para la debilidad: que sus cuerpos además de abdómenes planos, brazos enclenques y gluteos globulares disponen de poderosos cuadriceps, latissimus dorsis, deltoides y gastrocnemios. Modifican así la cultura popular, y resquebrajan la estética vigente al generar criterios de belleza alternativos a las figuras escuálidas cómo únicos modelos a seguir (y a las técnicas quirúrgicas como modo de conseguirlos). Que la Fuerza les acompañe. (*) qué dificil es traducir \"nurse\" sin implicar que se trata de enfermeras mujeres, presunción que pretendo desterrar, como pensar en astronautas, choferes y plomeros hombres. Tendríamos que adoptar el quechua para hablar sin género.","url":"https://eldiegoefe.github.io/el-lado-femenino-de-la-fuerza.html","title":"El lado femenino de la Fuerza"},{"tags":"salud","text":"En estas lineas quiero dejar algunos comentarios y enlaces sobre la práctica de yoga, nada demasiado estructurado ni profundo. Quizás un conjunto de items para ampliar en el futuro. Predomina una confusión acerca de lo que es el yoga. Con frecuencia la mente occidental estándar lo asocia con la India, la flexibilidad, quizás lo femenino, la vejez y con frases de autoayuda que se multiplican a través de Pinterest y de revistas dominicales, y además supone que en el Oriente es muy popular su práctica. La definición mental que ya viene bastante floja de criterio, puede volverse más enmarañada para incluir chicas en pantalones ajustados (en inglés es casi una categoría del porno: \"yoga pants\"), una industria que mueve millones —en ropa, clases, retiros paradisíacos, monetización de Instagram, etc—, olor a incienso, dietas sin carne de vaca, espiritualidad, ascetismo, ropa blanca, gurúes en la postura del loto denunciados por acoso sexual. Todo esto es parte de sus características, pero no alcanza para explicarlo y entenderlo. El yoga proviene de la India, más precisamente de la religión más antigua que es el hinduismo (¡tengan en cuenta que no todos los indios son hindúes!). Así que tiene un componente religioso, y mucho de filosofía, porque los indios antes de ser programadores de computadora extraordinarios fueron grandes filósofos, pensadores y místicos. Pero el yoga se puede entender también sin el componente religioso e incluso se le podría amputar la cuestión espiritual y aún así, limitada a la disciplina corporal, seguiría siendo yoga (al menos para muchos de nosotros). Podemos pensar que el yoga tiene la amplitud del hinduismo, que no es una religión restrictiva (aclaro que están leyendo la sección del blog \"hablemos sin saber\") sino que con sus multiples deidades y tradiciones no hegemónicas permite al sujeto elegir su deidad preferida y el modo de adorarla. Con el yoga es igual, hay muchas maneras diferentes de encarar su práctica, y no hay un modo que se declare \"verdadero\" y que anule al resto, y si lo hay, al resto le chupa un reverendo oooooooom. Un yogui puede dedicarse a las prácticas de las ásanas (posturas) y nada más (y nada menos). Hay quienes dicen que eso no es hacer yoga sino deporte. Yo no coincido. Desde mi punto de vista es semejante a la meditación, que puede practicarse sin creer en deidades ni en centros energéticos imposibles de registrar objetivamente, y aún así tener efectos positivos sobre nosotros, en un sentido más amplio que en lo exclusivamente físico. Sería bastante miope afirmar que la práctica física carece de efectos metafísicos, espirituales, psicológicos. El hecho de pasarse un largo rato concentrado en el propio cuerpo, escuchando la respiración, atendiendo al equilibrio, percibiendo el estado de nuestra osteo-artro-muscularidad, domando la mirada, trabajando con nuestras limitaciones y quien sabe cuántas cosas más… todo esto debe tener algún efecto, excepto para quienes sólo se ven a sí mismos como un artefacto articulado por rulemanes y palancas. La mente, los sentimientos, lo físico, lo que desconocemos de nosotros mismos, lo espiritual, todo en nosotros es interdependiente. Secretamos una hormona y nos sentimos felices, y nos sentimos felices y se nos estimula el lóbulo de un órgano o la cisura de una glándula, se nos dispara la percepción de nuestra interconexión con el medio ambiente y todo eso casi sin fumar faso. Lo que hagamos con una parte de nosotros repercute sobre el resto (y sobre los demás). No hace falta creer en los chakras, el fuego interno, la \"energía\" u otras formas de nombrar lo que desconocemos, para tener cierto grado de confianza en la idea de que prestarnos atención a nosotros mismos mejora nuestro bienestar, aunque no sepamos bien cómo sucede. La cuestión es que el yoga se disfruta, tiene efectos positivos, y a pesar de ello no me resulta fácil mantener una frecuencia sostenida de prácticas. De hecho, estas lineas están orientadas a reanimar y sostener la disciplina, apelando por un lado a la reflexión racional, y por otro a socializar para obtener alguna retroalimentación que me estimule a continuar haciendo y pensando sobre todo esto. Bueno, pero no se queden ahí mirando. Súmense a este camino.","url":"https://eldiegoefe.github.io/divagaciones-de-un-yogui.html","title":"Divagaciones de un yogui"},{"tags":"politica","text":"En diez días el Senado votará el Proyecto de Ley de Interrupción Voluntaria del Embarazo, que ya fue aprobado por la Cámara de Diputados. Las numerosísimas exposiciones y el debate captaron la atención de miles de ciudadanos y eso lo vemos reflejado en la masiva discusión pública que tiene lugar en las redes sociales. Pocas veces en mi vida recuerdo haber estado tan pendiente de un debate televisivo: el del Beagle, cuando yo tenía 8 o 9 años, del que recuerdo los hipnóticos anteojos y mostacho de Dante Caputo, y la frase \"es pura cháchara\" del viejo Saadi, y ahora éste, en el que miro la sucesión de exposiciones y bastante seguido me sorprendo con discursos que oxigenan mi decaido entusiasmo por la política. No solo eso, también la exposición indiscriminada a variados discursos me regalaron la oportunidad de festejar por anticipado los memes que vendrán, tras declaraciones que se inscriben en la fecunda tradición de reverenciados autores como Pipo Cipolatti, Roberto Gomez Bolaño, Moria Casán, Ricardo Fort y Vicky Xipolitakis. (Cuando escuchaba el discurso de Regidor Belledone pensaba en los memes por venir. ¡Defendamos siempre al meme no nacido! Nunca renunciemos a él. Está científicamente comprobado que un meme en potencia tiene la misma carga genética que un meme. Después de todo un meme es un gen. ¡Luchemos por la vida de los memes por nacer y por Regidor del Zapucay!) El rechazo al proyecto de ley está exclusivamente sostenido por razones religiosas: los partidarios de Dios aducen que existe una persona desde que un óvulo fecundado se fija en el útero (al menos hablan de la concepción y no de la fecundación, con lo cual parecen adjudicar la condición de persona al momento del establecimiento de un vínculo mecánico del óvulo fecundado con el organo materno, privando de serhumanidad al embrión sin implantar). Este argumento es el nucleo racional de su discurso y es simultaneamente una mera opinión . Hay muchos otros argumentos de igual o mejor validez para definir el inicio de la existencia de una persona y por ende, su derecho a la vida, de modo tal que sería absurdo elegir este dogma particular para fundamentar una ley que regula las decisiones de todos los que no profesamos esa fe. El debate resulta también de interés para pensar dificultades técnicas asociadas a este modo de tomar decisiones colectivas. Por ejemplo: ¿cuántos argumentos puede haber a favor y en contra de este proyecto de ley? Se mencionaron estadísticas, hechos científicos, creencias religiosas, experiencias personales, eventos históricos, mitos, reflexiones filosóficas, expresiones del sentido común, etc. Se necesitaron muchos discursos para darle lugar a tanta información. El tema es que la repetición fue imposible de evitar, y si hubiésemos estado obligados a escuchar todo de todos (como los legisladores que cuentan con una paciencia de acero inoxidable o un salario que justifica tal enfermiza conducta), quizás terminábamos por desear viajar al pasado para suicidarnos antes de ser personas, quizás durante nuestra existencia como persona trifásica por nacer, en aquel momento en que eramos simultaneamente espermatozoide y óvulo y espiritu santurrón de 380V de salvaje voltaje y pura potencia PMPO . Mi interés no está en promover la eficiencia y evitar la repetición infinita. De hecho la repetición puede ser que sirva para permitir el ingreso de algún argumento que somos reacios a considerar sólo por la falta de familiaridad que tenemos con el mismo. Lo que sí estaría bueno sería un sistema de valoración de la fundamentación propuesta. Por ejemplo, una vez avanzado el debate, si alguien insiste con que las muertes por aborto son escasas, una luz roja intermitente acompañada de una sirena interrumpiría al expositor. Simultaneamente un locutor enunciaría: \"como el aborto es actualmente clandestino, las cifras oficiales de mortalidad materna por esta causa adolecen de un error sistemático que puede llegar a ser elevado. La cantidad real de muertes maternas por abortos clandestinos es desconocida, por lo cual el argumento carece de fortaleza como para continuar repitiéndolo. Solicitamos al expositor que reconsidere sus afirmaciones, e instamos a los legisladores a desestimarlo\". Otro argumento para la tarjeta roja es el del sufrimiento que el aborto ocasiona a la mujer que se lo practica, y el arrepentimiento que causa. Es una razón tan endeble que queda anulado por el testimonio de una sola mujer que reconozca haberse practido un aborto sin haber sufrido secuelas psicológicas negativas, testimonio que efectivamente hemos escuchado. Por otro lado, el modo en que vivimos nuestras experiencias siempre están mediadas por nuestros valores, cultura, constitución psicológica, entorno… De modo tal que no hay una única manera de atravesar la experiencia del aborto y hay herramientas para minimizar sus efectos negativos. Si alguien intenta repetir que el aborto es el asesinato de una persona, la voz en off recordaría al recinto que la definición de persona es justamente parte de lo que está en discusión, y que no se puede otorgarle validez absoluta a una opinión personal, por lo que sugeriría que todas las afimaciones en este sentido vayan precedidas de fórmulas del lenguaje tales como: \"desde mi punto de vista…\", \"yo entiendo que no hay certeza pero igual quiero contar que de acuerdo a mi sagrado ser interior…\", \"según la santa inquisición y una serie de libros con ficciones que me encantan…\", etc. Finalmente dejo un tema para discutir proximamente. Sabemos que la democracia requiere ciertas condiciones para su buen funcionamiento, principalmente que los ciudadanos sean educados, que puedan utilizar la razón para fundamentar sus ideas, que no estén sometidos por su propia ignorancia a actuar en contra de su bienestar o condicionados por el poder que otros tienen sobre sus vidas. ¿Tendríamos que dejar que las cosas sigan como hasta ahora y sólo modificar el nombre de nuestro sistema de gobierno actual? ¿La crítica a la democracia actual me convierte en partidario del voto calificado? Eso lo veremos en un próximo capítulo. Continuará… Pero mientras tanto, a dúo con el fetito de gafas clamamos desde la piscina del Persona Resort: ¡que sea ley!","url":"https://eldiegoefe.github.io/aborto-y-reglas-para-un-debate.html","title":"Aborto y reglas para un debate"},{"tags":"blog","text":"Esta es la continuación de La única verdad es la incertidumbre (I) . Para calificar de científico al conocimiento debe adecuarse el proceso de su producción a normas metodológicas y reglas de razonamiento mediante los cuales se tratan de eliminar errores, imprecisiones, opiniones infundadas, fantasías y charlatanería en general. Establecer conocimientos sólidos y coherentes dentro de cada disciplinas se traduce en una comprensión más ajustada a la realidad del universo. A pesar de la justificada racionalidad de estos procesos, la tarea es complicada y presenta muchas dificultades. La excesiva confianza en los métodos y técnicas nos podría encerrar en islas de parcialidad que podríamos confundir con puntos de vista objetivos. Puede dar la erronea impresión de que el quehacer científico permite evadir las contradicciones, o que éstas son facilmente eliminables en base a la experimentación (cuando se trata de ciencias experimentales) y a la contrastación entre los puntos de vista diversos de la comunidad de pares e impares. Sin embargo los resultados de poner a prueba una idea no siempre son fáciles de analizar. A veces la información dice una cosa en un conjunto de experimentos y otra al repetir los experimentos, incluso habiendo replicado con detallismo las instrucciones provenientes de sus autores originales. Cuando los resultados se pueden reproducir la confianza en los resultados crece, pero a veces por más que se aseguren las mismas condiciones (dentro de ciertos parámetros de igualdad) se obtienen resultados distintos, sin que se sepa a ciencia cierta de dónde provienen las divergencias. ¿Hubo algún error en la concentración de una solución? ¿Eran los reactivos de buena calidad? ¿Hubo problemas con el instrumental de registro? ¿Estuvo la persona encargada del experimento realmente atenta a todo lo ocurrido y pudo registrarlo todo en el cuaderno de anotaciones? ¿El tejido donde se realizó el registro se preparó sin causarle daños? Muchas cosas pueden salir mal y por la conciencia de ello, suele destinarse mucho tiempo a evitar errores, a ajustar los instrumentos para que su funcionamiento sea sólido, consistente, inmune a las perturbaciones. Cuando se obtienen resultados dispares, al utilizar las mismas herramientas o al usar diferentes metodologías para analizar el mismo proceso, el motivo de la disparidad puede estar en que efectivamente se estén produciendo errores sistemáticos (que se podrán solucionar respondiendo a preguntas como las que formulé recién) o puede ser que la evidencia sea efectivamente caótica porque el sistema que se analiza tiene una complejidad tal que pequeñas variaciones en un parámetro producen grandes efectos, o quizás la presencia de una variable desconocida tiene una influencia inadvertida, o incluso puede ser que la teoría que subyace a nuestras observaciones no nos permite valorar adecuadamente lo que observamos. Tengamos en cuenta que lo que observamos a través de nuestras sensaciones e instrumentos está sometido a la interpretación que hacemos de los datos, para lo cual siempre estamos utilizando teorías, nos demos cuenta de esto o no. Y estos no son los únicos problemas que pueden aparecer. Un ejemplo que sepamos todos Uno de los ejemplos más paradigmáticos respecto de la oposición entre ciencia y religión tiene que ver con la discusión entre la centralidad de la Tierra y del Sol dentro de nuestro sistema planetario. Desde el siglo IV ( AEC ) hasta el XVI se mantuvo mayoritariamente aceptado el modelo geocéntrico propuesto por Ptolomeo y Aristóteles, el cual contaba con la bendición de la Iglesia Católica y su máquina propagandística, que incluyó la eficaz técnica persuasiva denominada Inquisición . Durante el Renacimiento, Galileo construye varios de los primeros telescopios (aunque no es su inventor) y realiza observaciones (como por ejemplo de las lunas de Jupiter) que permiten cuestionar el modelo geocéntrico. A pesar de que conocemos el desenlace, y sabemos que la teoría geocéntrica es incorrecta, se puede utilizar este ejemplo para mostrar que las observaciones de Galileo y de sus oponentes no eran necesariamente evidentes, obvias y fáciles de aceptar. La idea es mostrar cómo el relato simplificado de los hechos que lleva a colocar en el lugar del absurdo las posiciones geocéntricas le otorgan al empirismo una fortaleza inmerecida. Hay al menos dos aspectos del problema que requieren discusión: Punto 1 Los conocimientos de óptica de Galileo no eran suficientes para que resultaran incuestionables las observaciones hechas con el telescopio. Una cosa es que se haya podido comprobar que este nuevo instrumento ampliaba una imagen conocida dentro de la Tierra, y otra es que pudiese funcionar de manera confiable para observar objetos celestes. Por ejemplo: ¿era posible entender qué significaban las distorsiones de los sistemas primitivos de lentes o sospechar el efecto de la refracción en la atmósfera terrestre? ¿Acaso pensamos que los telescopios de Galileo ofrecían una calidad de imagen comparable a los disponibles en la Asociación Entrerriana de Astronomía? Gran parte de la física óptica necesaria para comprender el telescopio no estaba al alcance de Galileo y fue desarrollada después. Además las observaciones eran inconexas también con las predicciones de la teoría copernicana, por ejemplo el hecho de que las dimensiones de los planetas a lo largo de su órbita no coincidían con las diferencias que anticipaba esta teoría. Para plantear una analogía podríamos sustituir el instrumento \"telescopio\" por el instrumento \"Wikipedia\". Si no supiésemos cómo funciona quizás empezamos a usarla para buscar ciertas definiciones y vemos que los resultados que nos ofrece coinciden con información que ya conocíamos o que previamente buscamos en otra enciclopedia. ¿Alcanza con eso para confiar en que toda la información que en adelante busquemos en Wikipedia será veraz? Por supuesto que no, y esto no quiere decir que la información de la Wikipedia no sirva para nada. Podemos resumir todo esto afirmando que la observación no es independiente de la teoría, que lo que observamos está condicionado por lo que sabemos. Otro ejemplo: imágenes obtenidas del cuerpo humano mediante rayos X, tomografía computada, resonancia magnética, tomografía de emisión de positrones y demás, nos brindan información que no todos estamos en condiciones de interpretar y además, aquellos que sí lo están, no siempre pueden efectuar lecturas carentes de errores a partir de ellas o lecturas coincidentes entre sí. Siempre hay una interrelación entre observación y teoría, con lo cual parece razonable decir que las observaciones que fortalecen o debilitan los puntos de vista en conflicto nunca son completamente puras. En el lenguaje de la epistemología se suele decir que las observaciones están imbuidas de teoría. Punto 2 Volviendo al ejemplo de Galileo se puede afirmar que había elementos empíricos también en el campo de los aristotélicos. Para sostener que la Tierra no se movía planteaban el siguiente experimento: si se deja caer una piedra desde una torre muy alta y la Tierra se mueve, sería razonable que no cayese sobre la base de la torre, sino a una distancia relacionada con el movimiente de la Tierra durante su \"tiempo de vuelo\". Otro argumento en el mismo sentido: si dos proyectiles se lanzan con la misma fuerza en la dirección de giro del planeta, pero en sentidos opuestos, deberían recorrer distinta distancia (la que vuela contrariamente al giro de la Tierra debería recorrer una trayectoria más larga). En ambos casos, los resultados obtenidos experimentalmente sostienen la tesis geocéntrica. Pero claro, para analizar correctamente estos resultados experimentales faltaba la noción de inercia, que explica por qué las piedras caen cerca de la base de la plataforma desde la cual se dejan caer, y por qué los proyectiles vuelan la misma distancia independientemente de la dirección hacia la cual son disparados. Lo que muestran estos ejemplos es que la obviedad de una hipótesis recién se logra mucho tiempo después de que teorías rivales disputan cuál es aquella con mayor contenido de verdad. Con esto podemos apreciar que cuando el conocimiento trata de expandirse sobre terreno desconocido se enfrenta con desafíos que no son tan triviales de resolver con experimentos cruciales, con el mecanismo de la falsación u otras respetables herramientas. Quizás estas reflexiones nos permitan esquivar el peligro de convertirnos en dogmáticos defensores de un empirismo simplón. Para un estudio detallado de cómo se dio la conversión del geocentrismo al heliocentrismo se puede leer \"Tratado contra el método\" de Paul Feyerabend. En conclusión, la contrastación empírica parece cobrar más fuerza cuando ya se ha desarrollado la teoría, y cuando no se trata solamente de un solo tipo de observación sino que ya existe un entramado de argumentos que fortalecen un modelo explicativo por sobre otro. Sistemas complejos La ciencia logra una comprensión relativamente profunda de algunos aspectos de la realidad. En algunos casos nos resulta evidente la correspondencia entre las consecuencias que podemos experimentar respecto de una teoría y la propia realidad. ¿Es entonces aceptable cuestionar la ciencia teniendo en cuenta sus magníficos logros? ¿Nos convierte eso en apóstatas que, en aras de la coherencia, deberían renunciar a los tratamientos médicos modernos y al uso de la mensajería instantánea? Para mi no se trata de rechazar esta forma de conocer sino de advertir que hay distintos niveles de verdad en el conocimiento científico. Cuando se trabaja sobre un sistema complejo, se pueden hacer afirmaciones verdaderas, pero cuyo alcance descriptivo o explicativo tiene límites. Abordemos este problema desde un ejemplo sobre el que tengo algo de experiencia, el del fenómeno de excitación-contracción de las células musculares del corazón. Para su estudio se utilizan muy diversas técnicas. Se pueden realizar mediciones eléctricas u ópticas, con preparados de células aisladas o sobre porciones de tejido o incluso en corazones enteros. Los experimentos se pueden implementra sobre diversos animales: ratón, conejo, rata, cerdo, etc. Algunos métodos se utilizan mucho porque son relativamente económicos o fáciles de implementar, o porque el éxito de alguna investigación les dio impulso y se popularizaron. Pero justamente ocurre lo siguiente: los resultados obtenidos son contradictorios. Lo que sucede en la célula aislada es diferente a lo que sucede en el corazón completo, y por lo tanto, lo que se descubre sobre los mecanismos en un nivel de organización celular no es tan fácil de extrapolar para comprender lo que sucede en el órgano completo. No quiere decir que lo que averiguamos tras fraccionar el sistema es inútil, sino que es limitado lo que podemos aprender si sólo hacemos estudios analíticos. La medicina y la materialidad ingenua Esto que sucede a nivel celular y tisular se amplifica cuando tratamos de comprender los macrosistemas. Al considerar el cuerpo completo de una persona es indeterminada la cantidad de variables interrelacionadas que tienen efecto sobre la porción del cuerpo que pretendemos investigar. Es necesario un estudio de las partes, pero el funcionamiento de la totalidad no es solamente la suma del funcionamiento de las fracciones. En el sistema completo (algo también aplicable a los sistemas sociales) se dan interacciones múltiples y complejas que modulan el comportamiento de los componentes individuales. Pensemos el caso del cuerpo humano, el cual en la medicina científica tradicional tiende a explicarse desde una perspectiva mecanicista. Tras una corta búsqueda en PubMed se pueden encontrar títulos como estos: Asociación entre los genes del receptor de dopamina con la infidelidad y la promiscuidad sexual , Correlaciones neurales del perdón a las transgresiones morales que implican engaño (estudios realizados con PET ), La genética de las adicciones , etc. Indudablemente hay correlaciones entre la base física y nuestras emociones y comportamientos, pero hay acá un detalle sobre el que quisiera ahondar. El descubrimiento en el mundo occidental, por parte de William Harvey en el siglo XVII , de que la sangre es impulsada a través de arterias y venas por el corazón recién se logró cuando se desarrollaron los conceptos físicos que permitían concebir el esquema de la bomba hidráulica. Tomar un modelo de un sistema que comprendemos para explicar otro aún bajo investigación puede abrirnos la posibilidad de grandes descubrimientos. Sin embargo, si nos entusiasman los excelentes resultados de esta estrategia y nos quedamos prisioneros de una concepción mecanicista del Hombre, podríamos llegar a creer que todo puede ser explicado en términos materiales simples; es decir que el funcionamiento de nuestro cuerpo, nuestro comportamiento, emociones y decisiones pretendería ser explicado en función de enlaces químicos, información genética y masas en movimiento. La vinculación es innegable, pero es insuficiente como explicación, como instrumento de comprensión. Materialistas analizan una computadora Imaginemos esta situación: un grupo de materialistas ingenuos se encuentran una computadora moderna que en su mundo no existe. ¿Van a ser capaces de explicar el funcionamiento de la misma a través de mediciones sobre sus componentes físicos? Tras una enorme cantidad de experimentos muy sofisticados de expertos en la química del silicio, en física eléctrica, en termodinámica y transferencia de calor, es evidente que sabrán mucho de las distintas partes de la computadora, pero desconocerán lo esencial de ella, la existencia de lo que llamamos software , es decir el conjunto de instrucciones que organizan el funcionamiento de la máquina. Este software carece prácticamente de correlato en el mundo físico, y de hecho puede funcionar igual en distintos soportes (distintos microprocesadores), así que es casi imposible de ver aún cuando se examine el hardware con microscopios electrónicos y osciloscopios. En otras palabras, la realidad puede ser reconocida limitadamente de acuerdo a la utilización de un tipo de prácticas de investigación. ¿Calificarían de pseudo-científicos a los que planteasen que el comportamiento de la computadora tiene que ver con un aparato psíquico inmedible o con un espíritu ? ¿Será razonable limitar las teorizaciones sobre el funcionamiento de la computadora a lo experimentable mediante la interacción con la pantalla y el teclado (es decir mediante una forma de psicología del comportamiento)? Lo que quiero mostrar es que hay criterios de demarcación del conocimiento científico que reducen lo susceptible de conocerse a aquello medible y de materialidad más ingenua. Concebir la ciencia de esta manera puede llevarnos a rechazar modos de conocer la realidad más sujetos a la especulación, y a calificar a aquello que cae fuera de pura charlatanería. Lenguaje Un proyecto importante del positivismo fue el de desarrollar un lenguaje único para la ciencia. Si bien las matemáticas se usan como herramienta y pueden ser comprensibles para especialistas de diversos campos, es absurdo pensar que un físico teórico habla el mismo idioma que un biólogo molecular. Hoy en día, en congresos y encuentros, da la sensación de que científicos que investigan incluso dentro de una misma disciplina apenas pueden entenderse, debido al grado de especialización y las particularidades de cada problema. Lo más cercano al proyecto unificador podría ser la idea de conformar equipos de investigación que integren a especialistas de diversas disciplinas, así se vuelve posible que un mismo fenómeno se estudie simultaneamente desde distintas perspectivas. Por ejemplo, en el estudio del fenómeno de excitación-contracción se pueden encontrar biólogos, bioquímicos, físicos, informáticos, médicos, ingenieros, veterinarios, etc. Hay herramientas que son comunes y comprensibles para todos, pero el lenguaje en común está en permanente construcción, y los significados de ciertos experimentos, o técnicas o resultados pueden ser difíciles de explicar y compartir. Todo lenguaje usado para describir o explicar un fenómeno tiene limitaciones. En informática se han desarrollado enorme cantidad de lenguajes y dialectos con el propósito de dar mejor respuesta a diferentes problemas. Por ejemplo para escribir programas de inteligencia artificial suele usarse Lisp o Prolog u otros semejantes. No cualquier lenguaje tiene la misma potencia para resolver todos los problemas informáticos. Del mismo modo, podemos pensar que la utilización de un lenguaje en particular, sea el castellano, o el lenguaje de la química, o las matemáticas, limitan la manera en como pensamos, describimos y explicamos la realidad. La matemática incluso, como lenguaje aparentemente objetivo, no garantiza la comprensión: por ejemplo, algunas instituciones relacionadas con la educación, como la propia facultad de ingeniería, utilizan ciertos indicadores matemáticos para dar cuenta de lo que entienden como calidad de la enseñanza . Cuantifican la relación del número de docentes al número de alumnos, la cantidad de alumnos aprobados y reprobados en cada cuatrimestre, y el promedio de las notas. Creen que de esta manera tienen información sobre el sistema educativo. Por supuesto que logran construir a partir de estas observaciones una descripción, pero dudo mucho de que puedan comprender realmente lo que sucede en las aulas. Otro ejemplo de manipulación de la realidad con herramientas matemáticas puede ser la descripción de la economía mediante la selección (arbitraria) de parámetros. Por este motivo, es frecuente encontrar expertos que fundamentan con estadísticas el apoyo al plan económico del gobierno de turno, y otros expertos que sostenidos también en datos estadísticos de la realidad pintan un panorama completamente desolador (suelo coincidir con estos últimos). Un entramado autocoherente Hay una imagen que se me presenta cuando imagino la forma de nuestras concepciones sobre el mundo: la de una tela de araña. Quizás en algunos casos cuando los sistemas que estudiamos son menos complejos, efectivamente podamos pensar que nuestras teorías describen a la realidad tal cual es. Pero en los sistemas más complejos e interesantes este ajuste es dificultoso de lograr. Es más razonable pensar que las verdades que podemos producir sólo tienen algunos puntos de contacto con la realidad mientras que gran parte de nuestras afirmaciones sólo son verdad en tanto mejoran la coherencia de nuestros modelos explicativos (esto sería como una postura instrumentalista) sin que estén tan ajustadas a la realidad. Verdades, entonces, serían aquellas afirmaciones que tiendan a que el modelo explicativo sea cada vez más autocoherente, como si estuviésemos construyendo una tela de araña donde sus puntos de apoyo fuesen las comprobaciones empíricas y las teorías fuesen hilos que deben fortalecer la estructura de la tela, aún cuando no necesariamente brinden muestras inequívocas de estar vinculadas con la realidad (puntos de contacto). Conclusiones intermedias Pretendo señalar que la ciencia puede no abarcar al objeto de estudio en su totalidad. Debemos ser concientes de las limitaciones que impone la investigación científica basada en la especialización. No es tampoco fácil pensar en un modo de producción de conocimientos más holístico e interdisciplinario que no caiga en la improductividad o el cualquierismo. De todos modos está claro el peligro de negar todo aquello que no se comprende. La investigación científica debería mantener apertura y flexibilidad, aún cuando se corra el riesgo de elaborar conocimientos y teorías espúreas. Lo fundamental en ciencias no me parece que deban ser los métodos de investigación y el empirismo, sino el apego a la crítica, la admisión de una pluralidad de ideas en conflicto, y la evasión de cualquier forma de dogmatismo. Esto quizás le quita certeza, nos sumerge en un mundo de incertidumbres, pero le agrega potencia a nuestra capacidad de conocer. Tener esto presente también nos habilita a reconocer el valor de las disciplinas que no necesitan ser científicas para producir conocimiento (la filosofía en general, la metafísica en particular, la política, psicología, etc). Por supuesto que toda esta propuesta choca contra el modo en que está organizado el sistema científico y tecnológico, y los propósitos que persigue. To be continued…","url":"https://eldiegoefe.github.io/la-unica-verdad-es-la-incertidumbre-ii.html","title":"La única verdad es la incertidumbre ( II )"},{"tags":"politica","text":"La discusión legislativa actual, a través de la cual espero que se legalice el aborto, ha logrado algo casi inédito: me resultó interesante y entretenido escuchar un montón de discursos. Algunos muy retrógrados y graciosos, que sirven de fundamento al deseo de completa extinción de la humanidad, y otros muy ilustrados, emocionantes, técnicamente interesantes. Dado que no me han invitado a ningún púlpito pero como tengo ganas de contribuir de algún modo a la discusión y cuento con este blog desierto, aprovecho el espacio (que me agradezco a mi mismo por darme), para compartir este texto de 2010, que fue un mail escrito a una lista de correos cuyos miembros eran principalmente docentes de la Universidad Nacional de Entre Ríos. Siempre me preocupó la tarea de volver explícita la noción de que el inicio y el fin de la vida humana son conceptos que se definen en base a un consenso social (mutante en el tiempo), un momento o un período de transición de duración desconocida, definidos arbitrariamente en base al mejor conocimiento disponible (en el mejor de los casos) y siempre asociados a un margen de duda y error. Al tratar de definir el inicio de la vida de una persona es indispensable nutrirnos del conocimiento científico, pero lo que se obtiene es una definición política, filosófica o meta-científica, y no es un concepto científico en sí mismo, por lo cual afirmaciones como \"está comprobado que el ser humano existe desde la concepción\" es puro bolazo. Me gustó escuchar en las exposiciones de los invitados a las sesiones del Congreso toda esta cuestión explicada en profundidad. Aca los saluda algo que los cristianos definen como persona. ¿Será momento ya de inscribirlo como monotributista en AFIP ? — Date: Wed, 22 Dec 2010 01:11:31 -0300 Subject: Ser o no ser: el caso de los embriones y las personas From: Diego Fainstein < correodeldiego@gmail.com > To: UNER Debate < unerdebate@googlegroups.com > Escribo para discutir un argumento que leo repetidamente y que me parece erroneo (ya lo expuse antes, sólo lo repito). Los que se oponen al aborto dicen que el feto es un \"niño por nacer\" y que tiene derechos y que la madre no puede tomar la decisión sobre su cuerpo porque atenta contra la vida de otra persona al hacerlo. Para mi eso es una creencia igual de arbitraria que la creencia que yo profeso, que es exactamente la opuesta, dado que no considero que un feto sea una persona, y por ende no necesariamente tiene los derechos que tienen las personas. En definitiva, el punto central de la discusión es la definición de \"persona\", porque creo que en esto estaremos todos de acuerdo: una persona tiene que tener los mismos derechos que cualquier otra. Definir al feto como no-persona podría leerse como una negación del otro, del mismo modo en que judíos, negros, bolivianos y gays son considerados por los militantes de las razas superiores como especímenes degradados o degenerados del género humano. Yo que soy judío, negro, boliviano y gay trato de evitar el ejercicio de lo que sufro, por eso me preocupa discutir el tema, para no equivocarme y cometer los mismos errores que condeno. Pero entonces, voy a tratar de fundamentar lo más científicamente que pueda mi posición, aunque ya sabemos que los alemanes —hace varias décadas— y el premio nobel James Watson —en este mismo siglo— apelan también a la ciencia para fundamentar sus creencias deshumanizantes del otro. Debe haber entre el momento de la fabricación de óvulos y espermatozoides y el momento en que un adolescente le pide dinero a los padres para comprar cerveza, algún instante en que se pasa de no ser persona a sí serlo. También podría no ser un instante, sino un proceso que abarca tiempo, con lo cual deja de funcionar el principio del tercero excluido y aparecen tres estadíos: (1) no-persona, (3) persona, (2) ni lo uno ni lo otro. ¿Pero qué es lo que define a una persona? ¿Que tenga inteligencia, intestinos, emociones, alma, dedo pulgar, lenguaje, diferenciación respecto de la madre, sensibilidad, cultura, dominio del microsoft office…? Hay quienes carecen de alguna o varias de estas características y sin embargo he de admitir que parecen personas. Otras preguntas: ¿es racional pensar que existen personas unicelulares? ¿cuál es el mínimo número de células necesario para constituir a una persona? ¿tiene aparato psíquico el espermatozoide? ¿es persona el óvulo? ¿existe el alma? ¿qué significa estar vivos? A mi me parece que esta caracterización de lo que nos define como personas será siempre arbitraria, y no se me ocurre modo de evitarlo. Una posibilidad interesante es conocer las concepciones que proponen distintas culturas para tratar de desarrollar una definición que nos resulte aceptable y convincente de acuerdo a los conocimientos que tenemos actualmente. En definitiva, la discusión es filosófica, tenemos que elaborar nuestros valores, y no alcanza con la ciencia ni con la religión. Los judíos me caen simpáticos así que quise saber qué piensan al respecto. Como dejé de tener la cuota al día hace mucho, debí recurrir al Gran Rabino Googlestein quien me orientó un poco: la religión judía es pluralista en interpretaciones, hay distintas corrientes que dicen diferentes cosas (de allí el dicho \"donde hay dos judíos hay tres opiniones\"). Según una interpretación rabínica la persona tiene identidad como tal, diferenciada de la madre, no en el momento de la concepción sino en el alumbramiento. Hasta ese momento el feto es parte de la madre, carece de identidad propia. El embrión está subordinado a la madre, por lo cual si se constituye en un peligro potencial para ella es aceptada la interrupción del embarazo. La dependencia entre ambos desaparece luego del alumbramiento, cuando la criatura se transforma de vida potencial en un ser independiente con derechos y obligaciones. En definitiva, el embrión no es considerado persona. Igualmente el aborto no se acepta de modo general, sino de acuerdo a las circunstancias. Sólo quería ilustrar que la creencia de que el embrión es una persona obedece a una concepción cristiana actual que no tenemos por qué compartir todos. Me gustaría saber qué piensan los y las feministas, si es que argumentan de este modo el reclamo por el derecho a decidir sobre el propio cuerpo. O qué otros modos de pensar el problema se plantean (más allá de la necesidad de actuar frente a la desesperante situación de la práctica clandestina del aborto). Me despido más que nada porque ya se hizo muy largo. Un abrazo, Diego","url":"https://eldiegoefe.github.io/vieja-intervencion-sobre-el-aborto.html","title":"Vieja intervención sobre el aborto"},{"tags":"tecnicismos","text":"Este es un post-ayudamemoria para la instalación de PyQt en un entorno virtual. Tengo la impresión de que lo escribí ya en el blog pero no lo encuentro ni con los buscadores más buscados (ag, ack, pt): Activar el virtualenv, asumiendo que están instalados pyenv y pyenv-virtualenvs (también tendría que agregar el tutorial para usarlos, pero es demasiado para el propósito del día de hoy, aunque \"hoy\" no tiene sentido para un texto perdido en la web). Supongamos que el entorno se llama \"lab\": $ pyenv activate lab Crear un directorio para descargar las fuentes de PyQt y SIP , por ejemplo dentro del /home/$user: $ mkdir build $ cd build Bajar las últimas versiones de PyQt y SIP de Sourceforge (luego de hacer la búsqueda de PyQt ver en la pestaña \"files\", ahí aparecen tanto PyQt como SIP ). Estos son los enlaces para ir directamente (bajar los archivos .tar.gz para X11): PyQt4 y SIP . Descomprimir los tar (el nombre del archivo depende de la versión vigente): $ tar zxvf PyQt-x11-gpl-4.11.3.tar.gz $ tar zxvf sip-4.16.6.tar.gz Puede ser necesario instalar algunas dependencias. Para Python 2.7: $ sudo apt-get install python2.7-dev libxext-dev python-qt4 qt4-dev-tools libqt4-dev build-essential Para Python3: $ sudo apt-get install python3-dev libxext-dev python-qt4 qt4-dev-tools libqt4-dev build-essential Compilar SIP y verificar que no haya errores (sobre todo en el make install, si aparecen errores puede ser que requiera ejecutar como administrador: sudo make install): $ cd sip-4.16.6 $ python configure.py $ make $ [sudo] make install Si aparecen errores porque no se tienen permisos de escritura, ejecutar la última orden incluyendo el sudo porque parece que la instalación si bien se realiza desde el entorno virtual, termina escribiendo en /usr/include/python2.7 (que en mi instalación pertenece a root ). Ir al directorio donde se descomprimió PyQt y ejecutar las mismas órdenes: $ python configure.py $ make $ [sudo] make install Podría haber un error en el primer comando, relacionado con la falta de una instalación de Qt (o con una instalación fallida). Por eso no hay que saltearse el paso 5. Listo, correr Python y verificar que el módulo se importa sin errores: import PyQt4 9. Old comment : \"Pffff, no funciona ahora… Después de tanto detalle la cosa no anda, que garrón (anduvo y después dejó de andar, tiene demasiados problemas esto).\" New comment : Anduvo todo bien, lo que pasa es que probaba con \"import pyqt4\" todo en minúscula y entonces daba error. ¡Cuidado entonces con las instrucciones porque son case-sensitive! Nota a mi mismo: instalar también pyqtgraph, pyusb (con PIP ).","url":"https://eldiegoefe.github.io/instalacion-de-pyqt.html","title":"Instalacion de PyQt"},{"tags":"salud","text":"YouTube Asana Kitchen with David Garrigues Brenda Medina Cosmin Yogi Ekhart Yoga YouTube Fightmaster Yoga Kino Yoga Neil Keleher Purple Valley Ashtanga Yoga Yoga with Adriene Yoga with Tim Argentina: Ashtanga Baires Ashtanga Santa Fe Ashtanga Yoga Córdoba Germán Garro Sambara Escuela de Yoga Blogs, Journals, Zines Antranik Yoga Argentina Ashtanga Project Claudia Yoga Elephant Journal Grimmly Mercedes Laynez Practicing Ashtanga Yogis & Yoginis David Swenson David Garrigues (¡ GENIO !) Mark Darby Sitios gratuitos DoYogaWithMe Sitios pagos Tienen trials baratos, vale la pena verlos. CodyApp Ekhart Yoga Gaia OmStars oneOeight The Yoga Collective Udaya Yoga 30 Yoga Anytime YogaGlo Yoga International Yoga Vibes Yogis Anonymous Yoga Apps Down Dog Yoga Studio","url":"https://eldiegoefe.github.io/enlaces-sobre-yoga.html","title":"Enlaces sobre Yoga"},{"tags":"tecnicismos","text":"Estos son los pasos que sigo cuando instalo Emacs y Spacemacs, junto con el archivo de configuración que guardo en un repositorio privado. Paso 1: Modos de instalación Opción A: repositorio con la última versión de Emacs Esta es la manera más facil de instalación, para un un sistema descendiente de Debian (Ubuntu, Mint, etc). $ sudo add-apt-repository ppa:ubuntu-elisp/ppa $ sudo apt-get update $ sudo apt-get install emacs-snapshot emacs-snapshot-el Opción B: compilación desde un terminal Bajar la versión a instalar desde http://ftp.gnu.org/gnu/emacs/ son dos archivos .tar.gz y .tar.gz.sig (o sino .tar.xz y .tar.xz.sig). Tiene la ventaja de optimizar el programa de acuerdo a la máquina específica en la que va a correr. $ tar -xf emacs-??.?.tar.gz ; descomprimir el archivo $ cd emacs-??.? ; entrar al directorio $ sudo apt-get install build-essential ; instalar dependencias $ sudo apt-get build-dep emacs24 ; instalar dependencias $ ./configure ; preparar para compilar $ make ; compilar $ sudo make install ; instalar Paso 2: Instalar Spacemacs Las instrucciones son muy fáciles y están en el github de spacemacs . Hay que borrar (o guardar en otro lado) el directorio ~/.emacs.d/ y luego clonar spacemacs allí con la siguiente orden: $ git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d Spacemacs se instalará recién la próxima vez que se inicie Emacs. Paso 3: Clonar archivo de configuración En un repositorio de Bitbucket tengo guardados los archivos de configuración de distintos programas o sistemas. Principalmente las del sistema operativo y de Emacs. Les recomiendo hacer lo mismo, para no tener que reconfigurar el sistema de vuelta tras cada reinstalación. $ git clone https://bitbucket.org/mi-usuario/mis-configs Luego hay que colocar symlinks desde los lugares en los que estos archivos de configuración deberían ser encontrados por el sistema, hacia los archivos en cuestión dentro del directorio ~/mis-configs. La fórmula es: ln -s /path/to/file /path/to/symlink Por ejemplo: $ ln -s ~/.spacemacs ~/.mis-configs/.spacemacs Paso 4: Iniciar Emacs Se va a actualizar spacemacs de acuerdo a las configuraciones que recuperamos del repositorio. Quizás haya que salir y volver a entrar a Emacs varias veces hasta que la instalación se complete exitosamente.","url":"https://eldiegoefe.github.io/instalacion-y-configuracion-de-emacs.html","title":"Instalación y configuración de Emacs"},{"tags":"tecnicismos","text":"Nuevamente un vórtice del espacio-tiempo perturbó el campo magnético terrestre y esta vez no solamente escaparon de prisión los más peligrosos rufianes de Ciudad Gótica, sino que en vez de retomar el estudio de Clojure, el dialecto de Lisp que me cautivó en 2014, viajé hasta otro universo computacional y ahora estoy a toda máquina leyendo sobre Scheme, que es otro dialecto del lenguaje diseñado para simular la inteligencia humana, creado por John McCarthy en la década del 50. Salvo que seas un hongo, o que hayas sido fascinado por la retórica kirchnerista y/o la capacidad de gestión del macrismo con la consiguiente pérdida correlativa de capacidades cognitivas, aprender sobre programación en Lisp te provoca una masiva liberación de norepinefrina y serotonina, un insoportable deseo de visitar Las Toninas y de comer pan dulce con muchas pasas de uva como el que venden en la granjita de al lado de casa. Scheme es un dialecto muy utilizado en ámbitos educativos. Se que es más pequeño y sencillo que Common Lisp, y no se qué diferencias tiene con Clojure y Racket y otros herederos del LISt Processor (de ahí el nombre del lenguaje McCartista). El tema es que los cursos introductorios de \"Computer Science\" en las universidades más prestigiosas del mundo (Berkeley, MIT , La Matanza, Stanford, etc) lo utilizan o lo utilizaban hasta hace muy poco. De hecho, justamente llegué a Scheme buscando bibliografía para estudiar programación y Lisp. Me encontré en la web varios libros y cursos recomendados: el curso CS 61A dictado en Berkeley por Brian Harvey. el libro \" Structure and Interpretation of Computer Programs \" (comunmente llamado SICP ) de Harold Abelson, Gerald Jay Sussman y Julie Sussman. GJ Sussman fue uno de los dos diseñadores originales de Scheme, junto a su discípulo Guy L. Steele Jr (que diseñó y documentó también otros lenguajes). Mientras ellos elaboran nuevos lenguajes uno apenas puede lidiar con el ordenamiento de las estanterías del lavadero. el libro \"Scheme and the Art of Programming\" de George Springer y Daniel Friedman el libro \" Simply Scheme \" de Brian Harvey y Matthew Wright. Debajo pueden ver la tapa de la primera edición. la serie de libros \"The Little Schemer\", \"The Reasoned Schemer\", \"The Seasoned Schemer\" de Daniel Friedman, Matthias Felleisen, William Byrd y Oleg Kiselyov. Las clases del 2008 y 2011 del CS 61A dictadas por Brian Harvey pueden verse online (hagan click en los años 2008 y 2011 para llegar). Sus clases son muy claras y entretenidas. Tanto en estas clases como en la bibliografía el énfasis está puesto en estudiar / encontrar / desarrollar / identificar los conceptos con los cuales generar abstracciones para resolver problemas con la computadora, más que en enseñar la sintaxis de un lenguaje de programación. También está disponible online el curso CS 61A actual (cuyo lenguaje principal es Python 3) con acceso a todo el material con el que cuentan los alumnos (generoso, abrumador, envidiable, es impresionante el interés por enseñar que tienen esos equipos de profesores y auxiliares). Acá pueden ver la primera clase del 2008 (desde YouTube). También está online el curso completo \"Structure and Interpretation of Computer Science\" basado en el libro homónimo, con las clases de 1986 en video (la primera edición del libro es de 1985, y la segunda de 1996, esta última es la que está online y aparece en un link más arriba). Hay que acostumbrarse al hecho de que sean grabaciones viejas de menor calidad a los tutoriales en 1080p de YouTube que se ven actualmente, pero el contenido lo merece. Se me hizo un lío hasta descubrir por dónde empezar, con tanto material extraordinario. El SICP es el libro clásico que todo el mundo recomienda en los foros, pero no es sencillo. Por suerte descubrí que el libro de Harvey-Wright se propone como precuela (lo dicen en el prólogo) y es recomendable leerlo antes, como preparación para el de Abelson-Sussman. También está buenísimo \"The Little Schemer\" que lo tenía guardado desde hace mucho. Apenas voy por la mitad, pero ya mismo puedo recomendarlo porque me parece muy apropiado para entender, por ejemplo, la recursividad y cómo usarla, algo central en LISP . El texto está organizado con la estructura de enseñanza programada . En esta modalidad (que conocí en una serie de libros que tenía mi hermano, \" Curso Programado de Cálculo \" de Editorial Reverté, que usé en la secundaria cuando quise prepararme para la universidad) la información se presenta secuencialmente en pequeños párrafos que contienen problemas o frases para resolver y completar. En la misma hoja están las soluciones a los problemas y las palabras faltantes. El lector trata de responder y completar los espacios en blanco mientras tapa las respuestas, de manera que cuando termina puede comparar sus resultados con las soluciones correctas. Será conductista pero es muy entretenido, la presentación va avanzando en pasos muy pequeños y al menos a mi me genera un estímulo muy agradable ir descubriendo la coincidencia o cercanía de las respuestas propias a las indicadas por el autor. Estaría bueno que haya más libros con esta modalidad. Una página del libro de enseñanza programada Por suerte todos estos libros están disponibles gratuitamente o se consiguen con algún torrent, porque por un lado no están disponibles en Argentina, y sus precios (en BookDepository , que no cobra el costo de envío, Amazon no los envía a nuestro país) son altísimos. SICP cuesta casi 1000 ARS , Simply Scheme más de 1300 ARS , The Little Schemer casi 700 ARS , etc. En un próximo post voy a explicar cómo uso Scheme desde el shell o desde Emacs para probar los pequeños programas que los libros tienen de ejemplo o los que surgen de los problemas que proponen.","url":"https://eldiegoefe.github.io/bienvenidos-a-scheme.html","title":"Bienvenidos a Scheme"},{"tags":"blog","text":"Espero el colapso universal, pero es aburrida la inactividad. Por eso consumo, sobre todo contenidos online. Entre las montañas de basura digital hay pasadizos que cada tanto quedan parcialmente expuestos, y por algún reflejo imprevisto delatan su presencia e invocan mi exploración. El año pasado, en algún momento, mientras las paredes de un departamento céntrico cercaban mi libertad casi tanto como el horario laboral, descubrí el movimiento de las tiny houses (casitas) y temas aledaños. En USA , como en cualquier otro país, hay desafortunados que no se pueden costear una vivienda normal, o que prefieren buscar alternativas para no tener que esclavizarse con un préstamo hipotecario o un alquiler. En vez de asociarse para acelerar la destrucción del capitalismo han optado por experimentar soluciones más limitadas e inmediatas. Una de ellas es despojarse del lastre económico de las viviendas convencionales. Con ese fin prueban suerte en espacios mínimos, del tamaño de los monoambientes opresivos tercermundistas que se popularizaron en todas las urbes con el neoliberalismo y la proliferación de divorciados, estudiantes pobres y obreros explotados. Sin embargo, a diferencia de las cuevas tumberas de los centros urbanos, estos hippies evaden la cultura del consumo excesivo en ambientes iluminados, eficientes en el uso de la energía, agradables a la vista y al tacto, y con costos de funcionamiento muy bajos. Muchas de estas casitas están montadas sobre un remolque con ruedas, por lo cual tienen la posibilidad de instalarse en otro sitio cuando así lo decidan sus ocupantes. En algunos casos las tiny houses están optimizadas para funcionar off the grid , es decir fuera de la red. Para ello cuentan con paneles solares, baños secos, tanques de agua y gas, aislación térmica y otras tecnologías que minimizan o excluyen la necesidad de conexión a la red eléctrica, el sistema cloacal, etc. De esta manera aseguran costos de funcionamiento menores que los de una vivienda convencional, un grado de independencia mayor (no son autónomas porque usan agua y combustibles que tienen que obtener de algún lado), son menos contaminantes y provocan una menor huella de carbono, etc. Sus constructores y habitantes tratan de optimizar los lugares de almacenamiento (en los videos van a escuchar bastante la palabra storage ), pero es obvio que no basta con eso. Se requiere una forma de vida minimalista y despojada, dado que no alcanzan las repisas, cajones, estantes, armarios para alojar los frutos del consumo desmedido. Obviamente no hay espacio para medianas bibliotecas, ni para coleccionar frascos vacíos que algún día podrían servir para algo, y tampoco para guardar cuadernos, almohadones, negativos, compact-discs, juegos de té, fotocopias universitarias, teclados antiguos, recuerdos de Carlos Paz, videocaseteras, cables, pilas, destornilladores parcialmente rotos (al menos no todo en simultaneo). Además de casitas pequeñas construidas principalmente de madera, material predominante en los Estados Unidos, a diferencia del ladrillo habitual en Argentina, también hay otras formas de vivienda alternativa: colectivos escolares reacondicionados, botes, yurts (las carpas de los mongoles), casas de adobe, RVs ( recreational vehicles que nosotros llamaríamos casas rodantes), etc. En otra categoría, porque no son pequeñas, están las earthships diseñadas para funcionar off the grid , para mantener una temperatura agradable, aprovechar la energía y el agua, y construidas con bastante porcentaje de materiales reciclados como cubiertas de auto y botellas. Hay un muy buen documental llamado Garbage Warrior (El Guerrero de la Basura) en el que cuentan la historia y siguen la batalla legal de Michael Reynolds, el arquitecto que las desarrolló. Está completo en YouTube pero en muy baja calidad. Este tema de la vivienda y la forma de vida minimalista tiene por un lado el atractivo por la originalidad de las diferentes opciones, pero lo más interesante sucede en la reflexión sobre las formas de vida que queremos y que no queremos llevar (la relación con el consumo, con el capitalismo, con el medio ambiente), y en definitiva sobre el sentido de lo que hacemos con nuestra existencia. Yo por lo pronto voy a ver qué hago con las montañas de papeles que guardo con fines inciertos. PD : hay canales muy buenos sobre casitas y formas de vivienda alternativas. Por la selección de videos que verán abajo Exploring Alternatives está entre mis predilectos, pero también les recomiendo: Living Big in a Tiny House , Dylan Magaster , The Indie Project , Kirsten Dirksen . Colectivos escolares reacondicionados Botes (en un sistema de canales) Yourts RVs Earthships","url":"https://eldiegoefe.github.io/casitas-y-minimalismo.html","title":"Casitas y minimalismo"},{"tags":"blog","text":"Hace tres años me invitaron a participar de un seminario sobre la verdad en la Facultad de Ciencias de la Educación ( UNER ). ¡Claramente esos profesores no discriminan e invitan a cualquiera! Leandro, Franco, Alexis, Juan, Gustavo: gracias por ser como son. En aquel entonces me entusiasmé. Estuvo buena la experiencia pero no quedé muy conforme con mi presentación oral, que fue enredada y confusa. De todos modos dio como fruto un escrito largo con algunas opiniones sobre ciencia, tecnología y educación, muy util para mi mismo, porque a veces uno cree que tiene ideas fuertes y bien entrelazadas sobre un tema y en esa instancia de escribir descubre las lagunas, huecos y sinsentidos de lo que creía saber. Desde aquel entonces pensé en revisar y reformular aquel texto para publicar en este blog, y acá va la primera entrega. No esperen conclusiones claras, ni un desarrollo del todo lógico, tengan en cuenta que no son más que divagaciones medianamente elaboradas y con excesos de pretensión crítica. No se cuántas partes quedarán. Aclaración Mis reflexiones están construidas desde lo que sería una \"visión del usuario\", a partir de mis experiencias laborales como ingeniero y docente, sumadas a algunas lecturas. Estoy muy lejos de ser un epistemólogo, y ni siquiera he leido autores que son importantes en este campo. Sin embargo, me animo a compartir estos puntos de vista porque coincido con la idea de que los no-expertos también podemos contribuir a la construcción de conocimiento. Mi expectativa es cuestionar algunas perspectivas demasiado idealizadas acerca de estos temas, que se dan justamente en los ámbitos en que he trabajado o que están muy presentes en el imaginario social, y traer a un primer plano problemas de las actividades que realizan científicos, tecnólogos y educadores, para evitar que el conocimiento científico y la tecnología se encumbren como ídolos indiscutibles, sin que esto implique abogar por algun tipo de fundamentalismo religioso o proyecto irracionalista. División y fusión Las tareas de investigación pura y de desarrollo de tecnología están relacionadas y se necesitan mutuamente, pero en los libros y en los discursos suelen aparecer por separado. En general las ideas más difundidas y discutidas sobre el conocimiento se refieren a las ciencias \"puras\", es decir aquellas que se ocupan de descubrir cómo es el universo, cómo funcionan la naturaleza y las sociedades humanas, etc. En ellas se utilizan diferentes formas de construir conocimientos, cuyas reglas y métodos son materia de estudio para los epistemólogos. De analizar la práctica de la investigación surge la formalización del conjunto de acciones y pasos que la integran. Comunmente se habla de \"un método científico\" pero en realidad no hay un solo método universal, sino que hay diferencias de acuerdo -como mínimo- al campo de estudio (no es lo mismo investigar en física que en historia). El desarrollo de tecnologías o las ciencias aplicadas (que son los viejos oficios pero profesionalizados, y que podemos llamar ciencias del diseño ) tienen particularidades, ya que su objetivo no es comprender el mundo sino operar sobre él, mediante la creación o modificación de procesos o instrumentos que tienen un efecto tangible sobre su entorno. Esta diferenciación no implica una independencia total dado que las ciencias básicas requieren de tecnologías más sofisticadas para permitir la realización de experimentos, mientras que el descubrimiento de las leyes naturales y la sofisticación en el conocimiento de los materiales y sus interacciones (mecánicas, eléctricas, magnéticas, etc) retroalimentan el desarrollo de las ciencias del diseño. Realidad Los científicos y docentes que conozco son realistas duros, que asumen la existencia de una realidad objetiva, independiente de la percepción y de los deseos de los seres humanos. Probablemente todos creen que la realidad es tal cual la registramos con nuestros equipos. Los instrumentos muestran lineas que se dibujan en el monitor o números en el panel frontal de un instrumento, y a través de ellos ven proteinas cambiando de forma, iones que se desplazan a través de una membrana, impulsos nerviosos que provocan contracciones musculares. Al entrenarse en la interpretación de estas observaciones, que repiten con modificaciones una y otra vez, solidifican su confianza en las teorías que sustentan su comprensión del objeto de estudio. Tras decenas de experimentos en que se registran formas que en promedio se parecen, la atención se centra en interpretar esos datos y asumen que la forma en que se obtuvieron y el significado que se les otorgó ya no están en duda (es una restricción necesaria para poder avanzar, ya que si permanentemente dudan de sus registros nunca podrían sacar ninguna conclusión). Los resultados de distintos experimentos realzan la comprensión de los fenómenos y permiten entenderlos con mayor detalle, y en muchos casos ensayar predicciones. Lo que inicialmente eran secuencias de números, manchas en una imagen, trazos borrosos, se constituyen en una película con actores que van y vienen siguiendo un libreto cada vez mejor definido . La familiaridad con el entretejido de resultados obtenidos permite solidificar la comprensión adquirida. En lo que Kuhn llama un período de ciencia normal se va desarrollando progresivamente el conocimiento mediante teorías y experimentos que se sostienen unos a otros y son cada vez más explicativos. Lo que se registra es lo que existe en realidad, hay correspondencia entre sus afirmaciones y la estructura del objeto de estudio. No hay solamente una correlación, un paralelismo, una analogía entre las leyes construidas a partir del análisis de los resultados y la realidad, sino que la ley es la realidad y viceversa. De acuerdo a lo que se investiga, la realidad culmina siendo descripta mediante esquemas, ecuaciones, modelos, analogías, fotografías, registros temporales de la evolución de distintas variables, reglas, tablas de probabilidades, etc. ¿Puede un sistema con tantas interrelaciones y una estructura tan compleja ser representado de manera especular (y espectacular) con estas herramientas cognitivas? Técnicas para amasar la realidad En las ciencias experimentales, los experimentos se diseñan para obtener información útil sobre un proceso. Para ello se establecen condiciones de manera que la variación controlada de un solo parámetro sea el que provoca los cambios que se pueden registrar con los instrumentos de medición. Por ejemplo, se registra la diferencia de potencial eléctrico entre el interior y el exterior de una célula, manteniéndola inmersa en una solución que la mantiene con vida, pero siempre con el mismo pH, las mismas concentraciones de glucosa, bicarbonato, etc. De este modo se puede investigar, por ejemplo, cómo responde el potencial a cambios en la temperatura, sabiendo que los cambios no pueden deberse a otras variaciones (por ejemplo diferencias en el contenido del líquido que baña a la célula) ya que todos los otros factores son constantes. Es importante advertir que se supone que no hay factores significativos que hayan sido despreciados; de algún modo, el entendimiento previo del fenómeno que se estudia sería suficiente como para explorar el universo de variables involucradas, aún antes de comprenderlo completamente. La información obtenida se analiza en busca de relaciones entre la variable testeada y distintos parámetros del registro, con el propósito de encontrar correlaciones y causalidades. Al hacerlo, es frecuente encontrar que los resultados experimentales se alejan mucho de lo esperado, por lo cual existen técnicas estadísticas para despreciar esos datos que se consideran anómalos, y que dificultarían las conclusiones. Es razonable eliminar aquello que obstruye el camino, porque es necesario avanzar, pero ¿cómo saber si realmente se trató de un error o de la expresión infrecuente de un personaje secundario que también es parte de la trama? Sea como sea, aunque subsistan sombras y errores, la experiencia muestra que el saber se incrementa aún cuando pueda ser incompleto o parcialmente erroneo. De todos modos, me resulta extraño suponer que el grado de conocimiento alcanzado refleje la estructura de la realidad, algo que no parece sucederle a los expertos (obviamente que saben que su comprensión tiene límites que demarcan lo aún desconocido, pero me da la impresión de que no advierten con tanta claridad que lo que consideran conocido puede ser realmente erroneo). Si un fenómeno ocurre tiene una o varias causas y distintos efectos, y no tiene mucho sentido realizar suposiciones que resulten irracionales a la luz de nuestros saberes actuales. Esto es así porque se pretende cierta eficiencia en el proceso de develar lo desconocido. En las ciencias experimentales se realizan ensayos de distintos tipos para ver el mismo fenómeno con diferentes técnicas, lo cual puede ofrecer información nueva o solidificar una afirmación. Si el planteo de un experimento fuera caótico los resultados no permitirían concluir nada. Pero entonces hay un marco teórico a la luz del cual se proponen los experimentos y se interpretan los resultados. Si hay que describir los mecanismos que limitan la concentración de calcio en el citoplasma de una célula cardíaca cuando llega un impulso nervioso, una explicación relacionada con las fuerzas sutiles del lado oscuro, la fuerza gravitatoria que ejercen los astros o la memoria cuántica de la flecha del tiempo sería impublicable, salvo en revistas de dudosa calidad científica (aunque algún día puede ser que descubramos que la fuerza gravitatoria sí ejerce algún efecto sobre este fenómeno). Se supone también que la naturaleza funciona con regularidad, es decir que -por ejemplo- un canal de calcio tiene siempre la misma evolución temporal cuando interactúa con un ion en condiciones semejantes y hay ciertas limitaciones en cuanto a las variables a las cuales podemos atribuir participación en el fenómeno, de acuerdo al conocimiento actual. No hay en este esquema de trabajo lugar para afirmaciones relativistas extremas, tales como que es válida cualquier interpretación laxa de los resultados obtenidos. Primero por la suposición de que la naturaleza funciona de alguna forma coherente y regular (incluyendo los fenómenos probabilísticos y caóticos que también presentan rasgos de coherencia y regularidad), y segundo por la evaluación a la que es sometida la investigación y de la cual depende su aceptación y posibilidad de continuidad. Si bien los científicos deberían saber que las teorías tienen diverso grado de aproximación a la realidad, que lo establecido está sometido a cambios, y se entiende que los modelos descriptivos o explicativos pueden mejorarse, enuncian lo que saben con tal grado de confianza que estas salvedades tienen restringido el ingreso en las oficinas de migraciones que redactan sus discursos. Los jueces de esta verdad son los pares, principalmente los revisores de los artículos que aparecen en las revistas especializadas y también los evaluadores en las instituciones que otorgan el presupuesto para continuar las investigaciones. Cuando un artículo es rechazado o cuando se pierde un subsidio a veces se duda sobre la imparcialidad o la pericia de los evaluadores antes que de la debilidad de los propios argumentos, al fin y al cabo la investigación es una actividad realizada en el marco de las relaciones sociales, y la competencia, la deslealtad y otros atributos del carácter humano presentes en el resto de nuestras actividades también se expresan en estos ámbitos. To be continued…","url":"https://eldiegoefe.github.io/la-unica-verdad-es-la-incertidumbre-i.html","title":"La única verdad es la incertidumbre (I)"},{"tags":"salud","text":"Estoy de vuelta en mi ciudad natal, ahora con tiempo y energías para tener una vida por fuera del trabajo. Esporádicamente retomé la rutina recomendada en el Reddit de BodyWeightFitness, que comenté en un post anterior , pero sin lograr suficiente continuidad. Ahora lo que compite por la utilización de mi tiempo flexible es la pila de ocupaciones y aficiones que reemplazaron al extractor de energía vital que es el trabajo con horario de oficina. Debería estar entrenando más, pero aunque racionalmente comprendo la importancia de hacer ejercicio me cuesta poner el cuerpo a la obra. Fue así que decidí comprometerme con una actividad con horario fijo, por más que rehuyo de todo tipo de obligaciones horarias. Después de dos años de inactividad marcial volví a entrenar en Jiu Jitsu Brasileño ( BJJ ) en una academia local (a metros de las 5 esquinas, en Paraná, gracias a la insistencia de mi nunca tan bien ponderado amigo personal multitarea el Gabi , que también me asiste en reparaciones hogareñas, labores de herrería y carpintería, contratataciones al 0800-elGabi). Hasta ahora fui a tres clases y estoy contento. Los alumnos son respetuosos y nadie se excedió en los intentos de estrangularme o dislocarme las articulaciones, lo cual es un gran punto a favor. La clave es el profesor, que además de explicar bien promueve un ambiente de camaradería y el cuidado de todos (en la academia de La Plata también pasaba lo mismo). No continuaría yendo si la atmósfera fuese agresiva o ultra-competitiva. Aún faltan repetir más encuentros para conocer al resto de los alumnos y continuar rompiendo el hielo, pero estamos en camino. La clase de BJJ comienza con ejercicios para entrar en calor, fortalecer el cuerpo, ensayar movimientos de utilidad en el combate y lograr flexibilidad. Hay sentadillas, flexiones, saltos, caidas, caminatas en el piso, movimientos de la cadera, del cuello, etc. El ritmo (que queda fijado porque se cuenta en voz alta el número de repeticiones) me resulta excesivo porque compromete la adecuada forma de ejecución del ejercicio, así que cuando lo necesito me separo del ritmo marcado y continúo más lento o directamente descanso. Termino esta parte con la boca seca e inmediatamente pido permiso para tomar agua. Después vienen drills , que ya son ejercicios propios del BJJ en los que se ensaya repetidamente una serie de movimientos que constituyen un ataque, o un escape, o algo de utilidad durante una lucha. Pueden ser simples, ir de un lado al otro de un compañero que se encuentra de espaldas al suelo, hasta más complejos en los que hay una serie de movimientos en secuencia desde una posición inicial desfavorable hasta otra posición mejor. En el video pueden ver algunos pocos ejemplos. Simplificando un poco la realidad puede afirmarse que existen seis posiciones principales en las que se encuentran los contendientes durante un match de BJJ . El tiempo de la lucha se divide entre los momentos en que las mismas se van desarrollando y los momentos de transición entre ellas. En cada una de las siguientes posiciones, ambos contendientes viven distinta realidad: uno se encuentra en posición más dominante, tiene a disposición mayores posibilidades de ataque para concluir la pelea y está relativamente más a salvo mientras que el otro tiene posibilidades más limitadas y debe trabajar para salir de la situación de peligro. Las posiciones son: Guardia (puede ser cerrada, abierta o media) Control lateral, side control, 100 kilos Montada a la espalda, rear mount Montada, mount Montada de rodilla, knee mount, rodilla al estómago Tortuga Salvo en la guardia, en el resto de las posiciones la persona que está encima es la que corre con ventaja y trata de mejorar aún más su posición (ya que hay una jerarquía, por ejemplo la montada a la espalda es más dominante que el control lateral) o directamente trata de finalizar a su adversario mediante un estrangulamiento o una llave. Este último se debe defender y tratar de mejorar su posición, mediante técnicas de barrido para quitarle la posición ventajosa al atacante. En la siguiente imagen, la luchadora de blanco domina a la que viste de azul. Para un principiante es bastante difícil identificar en cada momento la situación en la que está, y encontrar opciones de movimiento, sobre todo porque nadie permanece estático, vuelan brazos, piernas, caderas, hombros, cuellos hacia uno y otro lado, y uno no sabe si agarrar una pierna contraria, cerrar con un brazo el acceso al cuello, buscar un brazo para aplicar una llave, mover la cadera para facilitar un posible escape, etc. Las opciones son enormes por más que cada contendiente tiene como máximo un cuerpo con dos brazos y dos piernas. Igual que en el ajedrez, con un número limitado de piezas se pueden desarrollar infinidad de alternativas de movimientos. El aprendizaje del BJJ constituye un gran reto para los principiantes. Hay una alta tasa de deserción en las primeras etapas de práctica. Yo creo que no está suficientemente desarrollado el método de enseñanza, por más que actualmente es un arte marcial muy popular. Una de las ventajas del BJJ es que las luchas entre compañeros se puede realizar sin tener que limitar demasiado las técnicas, ya que no hay golpes. Cuando uno se encuentra en apuros sencillamente le avisa al compañero que se detenga (se le llama tapear ) y la pelea se reinicia desde una posición de igualdad. Decía de la dificultad del aprendizaje porque la idea general es que la práctica repetida de luchas llevará al mejoramiento del saber y de la forma de ejecución de las técnicas. Pero como hay infinidad de variantes y el volumen de opciones es tan amplio, lo que pasa al luchar es que uno se pierde, no sabe qué hacer y muchas veces no aplica nada de lo que estuvo practicando un rato antes o en clases anteriores. Más que un luchador de BJJ , uno luce como una marioneta con problemas motores, gobernada por un software escrito sin lógica. Tengo predisposición a interesarme por los problemas de la enseñanza, así que estoy pensando alternativas. Espero sobreponerme a la sensación de que sigo igual de perdido que el primer día, y atravesar el umbral de dificultad cuando decaiga mi entusiasmo inicial. Ya veremos qué sale, mientras tanto invito a todos los lectores a dejar la pantalla y sumarse a una práctica, o al menos, a ejercitar esos gluteos fuera de la silla. :)","url":"https://eldiegoefe.github.io/de-vuelta-al-colegio-de-bjj.html","title":"De vuelta al colegio de BJJ"},{"tags":"tecnicismos","text":"Se me está por llenar el disco rígido externo, donde tengo fotos, películas, documentos y demás. Un terabyte de porquerías, pero nada que quiera borrar. ¿O sí? Ir directorio por directorio es tedioso y puede volverse una tarea abrumadora si aparecen muchos subdirectorios anidados con incierto contenido dentro de los mismos. Se puede usar el comando du para obtener el tamaño de los directorios y encadenarlo con un sort para que el resultado aparezca ordenado por el tamaño de los mismos: $ du -sh * | sort -hr 368G Vídeos 178G blogs 41G Descargas 5,1G VirtualBox VMs 4,2G Documentos 2,2G Imágenes 1,5G sistemas-operativos 611M calibre 219M opt 143M programas 4,4M bin 3,2M org 1,9M mis-proyectos 1,1M mis-configs 744K ordenar 452K temp 8,0K usr 4,0K Público 4,0K Plantillas 4,0K Música 4,0K Escritorio Pero en StackExchange por supuesto que está la pregunta How do I get the size of a directory on the command line? y entre las respuestas alguien sugería usar ncdu , que es una versión con interfaz gráfica, y que además permite navegar por los directorios, lo cual facilita encontrar aquellos que ocupan mucho espacio. En Debian, Ubuntu, Mint y semejantes se instala sencillamente con: $ sudo apt-get install ncdu Al ejecutarse, el programa lee todos los directorios a partir del directorio local (desde el cual se está ejecutando), y al finalizar la lectura presenta una pantalla como la que aparece debajo (click sobre ella para verla más grande). Con la tecla ? aparece una ayuda que indica las teclas que permiten la navegación, seleccionar diferentes criterios de ordenamiento (por nombre, por tamaño, etc), elegir el modo en que se presentan los porcentajes y también se pueden borrar directorios (con la tecla d ).","url":"https://eldiegoefe.github.io/peso-de-los-directorios-en-linux.html","title":"Peso de los directorios en Linux"},{"tags":"tecnicismos","text":"RSync es un programa que permite copiar archivos, pero a diferencia de un copiado común, compara los archivos de origen y destino y sólo realiza la transferencia de la diferencia entre ambos: si son iguales no transfiere nada, si es un archivo de texto y se agregó sólo un caracter, RSync envía unicamente ese caracter y reconstruye el archivo en el destino para que ambas copias sean exactamente iguales. De este modo el procedimiento es más eficiente, en particular si se copian archivos grandes. La copia se puede realizar entre cualquier directorio de origen y destino, ya sea que se encuentren en un mismo disco rígido, en diferentes discos en una misma computadora o también entre una máquina local y una remota (o viceversa). Poder copiar de este modo es óptimo para realizar backups de nuestros datos. Como se pueden copiar directorios recursivamente entonces es muy facil, por ejemplo, mantener una copia actualizada de una colección de fotos, que generalmente tiene muchos subdirectorios para almacenar imágenes ordenadas por fecha o por temática. Es RSync el que compara el contenido de cada subdirectorio, y por ejemplo si le cambiamos el contraste a una foto, lo detecta y actualiza en la copia de destino. Nos ahorra tener que identificar cuál es el archivo que procesamos, y todo con una sola linea de comandos, que ya veremos… Primero tenemos que saber la ubicación de los archivos que queremos copiar y el camino hacia el lugar donde haremos la copia. Para esta tarea podemos usar el comando df, que muestra el espacio libre en cada sistema de archivos que se encuentra montado en el sistema y también informa el punto de montaje. El modificador -h (la forma corta de —human-readable ) ofrece el resultado en potencias de 1024. $ df -h S.ficheros Tamaño Usados Disp Uso% Montado en udev 3,9G 0 3,9G 0% /dev tmpfs 784M 9,7M 775M 2% /run /dev/sda4 49G 23G 24G 50% / tmpfs 3,9G 237M 3,6G 7% /dev/shm tmpfs 5,0M 4,0K 5,0M 1% /run/lock tmpfs 3,9G 0 3,9G 0% /sys/fs/cgroup /dev/sda2 1,3G 500M 705M 42% /boot /dev/sda5 853G 402G 408G 50% /home cgmfs 100K 0 100K 0% /run/cgmanager/fs tmpfs 784M 16K 784M 1% /run/user/1001 /dev/sdc1 932G 912G 21G 98% /media/diego/biblioteca En el ejemplo pueden ver mi directorio de origen (que son archivos ubicados en /home) y el destino será algún subdirectorio en el disco rígido externo, que se encuentra montado en /media/diego/biblioteca (me está quedando poco espacio…). También se puede utilizar el comando lsblk para obtener información sobre los discos montados: $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 931,5G 0 disk ├─sda1 8:1 0 20M 0 part ├─sda2 8:2 0 1,3G 0 part /boot ├─sda3 8:3 0 15,3G 0 part [SWAP] ├─sda4 8:4 0 49G 0 part / └─sda5 8:5 0 865,9G 0 part /home sdb 8:16 0 119,2G 0 disk ├─sdb1 8:17 0 100M 0 part ├─sdb2 8:18 0 118,7G 0 part └─sdb3 8:19 0 450M 0 part sdc 8:32 0 931,5G 0 disk └─sdc1 8:33 0 931,5G 0 part /media/diego/biblioteca sdd 8:48 0 931,5G 0 disk Generalmente el comando RSync se ejecuta con estos modificadores: $ rsync -avh --progress --delete /desde /hacia Donde: a : archive, es un modificador que se usa generalmente. Es una abreviatura para no tener que poner todos estos otros modificadores -rlptgoD. Sirve para asegurar que en la transferencia se preserven los symbolic links, dispositivos, atributos, permisos, ownerships, etc. v : verbose h : human readable. progress : muestra el progreso de la transferencia. delete : borra los archivos en destino que no están en el origen. /desde : directorio de origen /hacia : directorio de destino Leyendo el manual de RSync encontramos dos modos distintos de copiar un directorio hacia un destino, siendo la diferencia el uso de un trailing slash (el símbolo /): rsync -av /origen/foo /destino rsync -av /origen/foo/ /destino/foo En el primer caso se copia el directorio foo dentro del directorio destino dest. En cambio con el trailing slash indicamos que lo que se copia es el contenido del directorio foo, y entonces para mantener la estructura en el destino, debemos copiarlo dentro de un directorio foo (no directamente en dest). Para copiar todas mis fotos, lo que tengo que hacer es crear (por única vez) un directorio para tal efecto en el disco externo: $ mkdir /media/diego/biblioteca/mantener-backup/fotos-diego Para efectuar la copia de las fotos que tengo ubicadas dentro de /home/diego/fotos, el comando será: $ rsync -avh --progress --delete ~/fotos/ /media/diego/biblioteca/mantener-backup/fotos-diego Otro ejemplo es la copia que hago de mi colección de libros organizados con Calibre: $ rsync -avh --progress --delete ~/calibre/ /media/diego/biblioteca/espejo-del-rigido/calibre Un último ejemplo: de un rígido externo a otro (porque hay que hacer backup del backup de vez en cuando). $ rsync -avh --progress --delete /media/diego/biblioteca/mantener-backup/ /media/diego/backup/mantener-backup $ rsync -avh --progress --delete /media/diego/biblioteca/fotos-videos/ /media/diego/backup/fotos-videos La primera vez que se ejecute rsync, cuando el destino está vacío, consumirá más tiempo porque debe copiar todos los archivos. Sin embargo, en ejecuciones posteriores se compararán los directorios de origen y destino, y sólo se copiará aquello que haya cambiado (o se borrarán aquellos archivos en el directorio de destino que se hayan eliminado del directorio de origen). Este modo de hacer backup me cambió la vida.","url":"https://eldiegoefe.github.io/backup-con-rsync.html","title":"Backup con RSync"},{"tags":"blog","text":"Sigue el conflicto en Argentina por las políticas científicas del nuevo gobierno y el viejo ministro. Al recorte en el número de ingresantes al Conicet se suman disposiciones que perjudican a quienes no pueden enmarcar sus proyectos de investigación dentro de las ciencias aplicadas que produzcan un beneficio social tangible. Desde arriba, los cabezones tiraron los dados, y salieron seleccionadas estas seis areas: 1) agroindustria, 2) industria, 3) energía, 4) ambiente y desarrollo sustentable, 5) desarrollo social y 6) salud (¡probablemente en ese orden!). Un ser humano con trazas de inteligencia y un enorme deseo por el bienestar progresivo del país (¿un kirchnerista promedio? ¿un lector por partes iguales de clarin, página y la nación? ¿un macrista promedio?) podría alegrarse por la noticia: pronto las industrias del campo y la ciudad encontrarían mejores modos de producción, la energía se abarataría para todos, el ambiente (luego de utilizarlo para producir todas las porquerías que fabricamos socialmente) sería más natural que la naturaleza y por supuesto acabaríamos con la miseria y la enfermedad, con una eficiencia casi al nivel de las promesas homónimas en los discursos electorales. Un ser un poco menos aletargado intelectualmente podría intuir que lo están esquilmando, porque lo que realmente buscan son soluciones a los problemas que fabrica el Capital, encadenadamente: 1) ¿cómo producir más kilos de carne por hectárea, ignorando los efectos sobre el medioambiente y la salud? 2) ¿cómo curar las enfermedades que produce en la población la implantación de sistemas productores de carne (optimizados en el problema anterior)? 3) ¿cómo lograr que un porcentaje ínfimo de las ganancias que producen las agroindustrias y las farmacéuticas se dirija a la construcción de chozas en el conurbano repleto de campesinos expulsados de sus tierras? 4) ¿cómo abaratarle la energía a las Lomas Negras del ladrillos de adobe antivinchucas para poblaciones en situación de haber ganado una década? Estas son las preguntas que trazaron los \"ejes para la innovación de la Argentina Potencia\", porque las biromes que escriben los proyectos de Argentina Innovadora pertenecen a los burócratas de las clases dominantes, y no a los giles (el Pueblo, nosotros, los herederos del trabajo asalariado, o lo que vaya uno a saber que somos colectivamente). El caso de la salud es extraordinario. Nos enferman con la comida producida industrialmente; nos arruinan la cabeza en todos los ámbitos: aguantaderos escolares, medios de estupidización, púlpitos de toda laya; nos exprimen sin látigo pero con una diversidad de violencias: trabajos aburridos, repetitivos, secabochas, de horarios extenuantes, de salarios insuficientes, con contratos a punto de caer, en espacios sin luz natural, físicamente incómodos, sin aire fresco, en procesos irracionales, sin descanso suficiente, etc; nos arruinan con una educación de cuarta y nos limitan la búsqueda de sentido para nuestras vidas; y luego de todo eso, les piden a los investigadores que hagan ciencia aplicada y nos curen, porque si el rebaño flaquea demasiado, ¿quién va a producir? ¿quién va a consumir? La ciencia y la razón son indispensables para cambiar nuestras formas de vida tan tercercapitalistamente exitosas. Pero no son suficientes, y en general producen resultados que estabilizan la explotación del Todo. Así que yo estoy con los reclamos de los científicos, pero cuando terminen de ganar la lucha, de empatarla o de perderla, también estará bueno sentarnos a charlar para ver a quién le sirve lo que hacen, cómo lo hacen, con quiénes, y qué podrían hacer para cambiarlo.","url":"https://eldiegoefe.github.io/ciencia-con-problemas-capitales.html","title":"Ciencia con problemas capitales"},{"tags":"blog","text":"Gracias a la proliferación de tutoriales en diversos formatos, hace años empecé a ver gente practicando artes y oficios como la carpintería, la electrónica hobbista, la permacultura, la cerámica, la calistenia, la programación en lenguajes infrecuentes, la herrería, el jiujitsu (el arte suave) y un sinfín de diversidades así. Son cosas diferentes a disciplinas que anteriormente me habían resultado más afines, como la literatura fantástica, las fisicomatemáticas, el lenguaje BASIC y el ajedrez, todas cosas más relacionadas con la mente que con las manos y el cuerpo. Recuerdo que cuando era chico intenté construir cajas de madera a partir de cajones de manzana, seguramente para guardar juguetes o enterrar algún tesoro, mediante las herramientas manuales que había en casa (martillo, serrucho, clavos y cosas por el estilo). Nunca logré que las maderas encastraran y duraran, se rompían al cortarlas o clavarlas, y cuando resistían un poco el resultado era visualmente repugnante. Sufría de un déficit de conocimiento, aunque en esa época no lo percibía así y seguramente pensaba que no tenía talento para esos menesteres, aunque no tengo claro a qué atribuia en aquel entonces mis fracasos. El desarrollo de la red de redes ha permitido que ignorantes como yo puedan acceder a una enorme biblioteca de saberes, en gran parte mediante videos en una amplia gama de calidad y producción. He aprendido cosas de tomas mal iluminadas y también de puestas que compiten con producciones hollywoodenses. Si la barrera del idioma no es un impedimento (en particular el inglés) entonces el único límite para aprender es la energía que uno disponga para ello. Hay lugares, como Estados Unidos, donde existe una valoración social fuerte de las invenciones y de cultivar habilidades en el ámbito del \"hazlo tu mismo\" (do it yourself: DIY ). En Argentina este espíritu quizás poblaba las viejas secundarias técnicas y también publicaciones marginales como la revista Lupin, pero nunca tuve mucho contacto con esta cultura (mi hermano, que cursó en una ENET , no la tenía en gran estima). Además encuentro una diferencia de perspectivas ya que en EEUU hay una tendencia a especializar la resolución de cada problema sin mezquinar recursos (mediante la creación de herramientas precisas) mientras que la argentinidad se vanagloria de resolver todo a pesar de (o gracias a) una escasez perenne de recursos. Estas dos prácticas no son del todo antagónicas, e incluso sirven para modularse y evitar la creación de adminículos absurdos (no se si estas cosas son inútiles pero al menos son herramientas raras ) o creer que todo se resuelve atando cosas con alambre. Siguiendo el blog de un carpintero norteamericano descubrí un movimiento educativo originado en el norte de Europa (espero haber sido escandinavo en mi vida pasada) que acentuaba el aprendizaje de artes y oficios: el Sloyd . Mientras en mi niñez la hora de \"actividades prácticas\" en la escuela consistía en destinar dos cuatrimestres a construir un macetero hecho en macramé, los suequitos y norueguitos aprendían carpintería, una especie de origami, costura, tejido y quien sabe cuántas cosas más (¿atletismo?). Volviendo a la actualidad, que es lo que quería contar originalmente, hay un florecimiento de actividades relacionadas con artes y oficios en el que situo a la revista Make , el sitio Instructables y sobre todo la miríada de canales de YouTube entre los que voy a armar un listado de recomendados que pueden ver sobre el final del artículo. En particular, en cuanto a electrónica y prototipado es imprescindible mencionar al mundo Arduino y Raspberry PI , el concepto de Internet of Things , las impresoras 3D , lenguajes como Processing (y Python!), etc. El conocimiento por sí mismo no alcanza para desarrollar actividades, hacen falta recursos físicos como herramientas y un taller donde almacenarlas y usarlas. Para mucha gente la solución es asociarse y creo que había algo de esto en tantas casas recuperadas y centros culturales post \"argentinazo 2001\", al menos esto es lo que se me viene a la mente cuando pienso en cuál puede haber sido un fenómeno local relacionado con arts y crafts, ya que hubo talleres de panadería, construcciones alternativas, huertas orgánicas y cosas así, aunque desconozco si estas experiencias sobreviven (¡se aceptan comentarios!). Hay algunos en el país pero sobre todo afuera: los hacklabs (también llamados hackerspaces, fablabs, makerspaces, hackspaces, etc) que son una suerte de talleres abiertos a la comunidad gestionados con diversas reglas pero en general con cierto grado de organización anarquista, es decir organizados por sus propios usuarios (entiéndase qué lindo concepto: un espacio común de aprendizaje, no estatal). En estos \"clubes\" hay cursos que pueden ser dictados por un especialista o por un miembro que quiera compartir lo que sabe, hay disponibilidad de espacio y herramientas para desarrollar proyectos de programación, tejido, cocina, metalurgia y lo que pinte (pueden ver el Tour de Noisebridge, un famoso hackerspace en San Francisco, USA ). Estos lugares ofician de catalizadores para acceder al conocimiento, construir cosas individual o colectivamente y también sirven para socializar. Tendría que volver a leer sobre sus orígenes, pero creo que todo se inició en Alemania con el Chaos Computer Club centrado en temas de seguridad informática, pero que derivó en los hackerspaces de hoy. En algún momento quise fundar el Hackerspace Paraná, quizás en algún momento haya que volver a la carga con esa idea. El conocimiento no tiene por qué estar restringido por fronteras. Estos son algunos canales para curiosear e inspirarse (sobre carpintería hice un listado en mi post de carpintería a pleno ): Laura Kampf One Yard Revolution Steve Ramsey The Post Apocalyptic Inventor Robin Lewis (antes se llamaba You Can) Adafruit (de la genia de Limor Fried ) ¿Cuáles canales me recomendarías? Me encantaría visitar otros sitios.","url":"https://eldiegoefe.github.io/hacedores.html","title":"Hacedores"},{"tags":"blog","text":"Hace poco, en Argentina, tras el intento por parte del oficialismo de limitar el cupo de ingreso a la carrera científica y los recortes presupuestarios en ese area, los investigadores fueron atacados desde notas periodísticas y redes sociales por dedicarse a temas sin interés (en particular los referidos a las ciencias sociales). También ocurrió una reacción de defensa acerca de la importancia de estudiar científicamente todo tipo de cosas. La pobreza de argumentación no se limitó a ningún bando. El \"ciudadano con sentido común\" se mostró preocupado porque los impuestos que evade) se orientan al estudio de materias aparentemente inútiles. Este estereotipo notoriamente caricaturizado se aplica a una franja significativa de la población, no sin certidumbre. Es gente muy pragmática que condena el estudio de los cánticos retrógrados de las hinchadas de fútbol porque piensa que dedicar tiempo a indagar en esos menesteres es tan inutil como investigar sobre bichos que se extinguieron hace cientos de décadas o tratar de comprender los métodos de construcción de los mayas, que hacían pirámides mucho más bajitas que las diseñables con una app de iOS o de Android. En resumen, denostan areas del saber por su inutilidad. Digo, por su inutilidad para analizar, comprender, imaginar y todos aquellos verbos que tengan alguna relación con el uso del celebro . Su juicio tiene un horizonte muy cercano, una geografía rectangular, un pulso musical cercano al vanguardismo de Palito Ortega. Extrañamente muchos defensores de la ciencia esgrimen el mismo argumento utilitarista en un grado apenas más diluido, apostando a que eventualmente, en el futuro, las investigaciones que carecen de aplicabilidad encuentren un uso posterior. Parecen creer, en contra de toda evidencia, que los miembros del Congreso y los funcionarios gubernamentales prestan atención a la sociología, la historia, la ecología y la matemática para elaborar proyectos y tomar decisiones. Les recuerdo que el Ministro de Medio Ambiente es el Rabino Bergman y el de Ciencia y Tecnología es Barañao, si alguno de los cargos estuviese en manos de Wonder Goldman por lo menos tendríamos alguna chance. Para salvar el mundo hay que dejar a los científicos entretenidos en sus pasatiempos, porque a pesar de navegar en conocimientos de ultramar, orientan sus carabelas considerando al océano un plano alrededor del cual gira el universo. Yo creo que el saber es valioso a pesar de que sea económicamente inutil, incluso si continúa siendo un conocimiento impráctico para la vida aún dentro de un plazo de mil años. Desconozco si el placer de indagar en la historia del número cero e inutilidades semejantes está codificado en nuestro ADN o es el resultado de algún mecanismo evolutivo o está implantado por algún software del superyó que gobierna subrepticiamente nuestra conducta (¡habría que investigar esto!) pero es un hecho que un sector de la población (no necesariamente la intersección con los integrantes del Conicet) disfruta de saber sobre cosas tangibles e intangibles de sus universos de interés, a los cuales me gusta definir por extensión: los enigmas relacionados con el origen del universo, la heráldica vikinga, el rol de los personajes secundarios en las películas de David Lynch, el funcionamiento del aparato fonador del canario doméstico. Por otra parte, hay gente que valora la calidad de los saberes y por tal motivo otorga a la ciencia un respeto muchas veces inmerecido, tema que dejo para otro artículo declamatorio (y difamatorio) del sistema científico. Los que piensan con poca profundidad los problemas que nos aquejan suponen que hay que investigar para alcanzar mayor independencia económica, desarrollo industrial, mejores índices económicos, posiciones de vanguardia en el concierto internacional (¿?). Yo, que también pienso con bastante poca profundidad, cuento con evidencia para mostrar que sí tenemos conocimientos suficientes para vivir bien, sin pobrezas materiales graves, sin desigualdad y sin dependencia económica. No me refiero al estándar de vida a que aspira la sociedad de consumo, este también es un conocimiento que tenemos: 5 o 10 mil millones de personas no deberían tratan de emular el nivel de consumo de Mariana Nannis. Entonces, vivimos mal por razones políticas, no epistemológicas. \"El conocimiento está\", diría el Bambino Marx. De hecho, sufrimos las consecuencias de apostar ciegamente a la ciencia y sus aplicaciones tecnológicas de vanguardia. Veneramos las tecnociencias creadas a imagen y semejanza de científicos mitológicamente bienhechores, apóstoles desinteresados del bondadoso saber superior que es del Conicet, de los científicos y de la Industria Nacional en su Agnosticícima Trinidad (del INTI , las universidades y todas las demás instituciones no hablemos, porque los científicos que importan son los del Conichet), saberes que nos fueran entregados para la felicidad del pueblo y la grandeza de los capitales nacionales. El éxito del sistema científico, tal como existe hoy, impulsa y es impulsado por la lógica del capital. Por ejemplo, la clonación empieza a presentarse como la solución frente a la extinción de numerosas especies. ¿Acaso la proliferación de los desiertos verdes a la Monsanto, que los científicos contribuyeron a crear, no son responsables de la pérdida de biodiversidad? ¿Qué dicen los defensores de la ciencia? ¿Cuándo tendremos una discusión pública profunda en la cual no predominen los miopes aplanadores ni los mitómanos de la bondad infinita? Empeorar el sistema científico es seguir defendiéndolo tal como lo conocemos, al igual que defender la escuela pública en la forma degradada en la que hoy se encuentra. Yo no confío en los conocimientos que se producen en los laboratorios fordistas, con una organización no solamente capitalista sino anticuada, y sometida a las presiones por justificar los fondos que se le otorgan. Imaginen a Newton tratando de pedir un subsidio para estudiar la caida de las manzanas rionegrinas. La producción y el uso del saber están en manos de expertos que no cuestionan su quehacer sino que reproducen el sistema con todos sus defectos, porque saben mucho de pocas cosas y son ignorantes de todo el resto. Juegan con nuestras expectativas: nos prometen terminar con el hambre y acaban con plantas y animales; desarman la piedra para que las economías regionales se desarrollen pero devastan los suelos, los pulmones y las reservas de agua; desarrollan fármacos que finalmente se usan para atemperar la depresión de los trabajadores al tiempo que enriquecen a los accionistas de las farmacéuticas; etc. Me gusta terminar mis posteos así, pum para arriba.","url":"https://eldiegoefe.github.io/la-inutilidad-de-la-ciencia.html","title":"La inutilidad de la ciencia"},{"tags":"blog","text":"Hace algunos años me empezó a interesar la salud física y escribí algunas cosas en este blog sobre el tema (sigan los tags de este artículo sobre la columna derecha…). Comenté el libro \"Convict Conditioning\" de Paul Wade (para abreviar voy a llamarlo CC a partir de aca), de donde aprendí unas cuantas cosas sobre el cuerpo y del cual seguí sus ejercicios intermitentemente. Hace algunos días descubrí el subreddit BodyWeightFitness (que llamaré r/ BWF ) donde encontré una tonelada de información sobre ejercicios hechos con el peso del cuerpo (calistenia). Me interesó una rutina recomendada con principios que contrastan con los del CC . Voy a comentar algunos puntos de este desacuerdo. Antes de empezar, aca pueden ver un video donde se comenta la rutina recomendada (de paso eligen modelo de calzas). Número de repeticiones en cada serie En CC la progresión para cada uno de los \"big six\", que son los seis ejercicios que tiene la rutina y que ponen a trabajar gran parte del cuerpo: pushups (flexiones), pullups (dominadas), squats (sentadillas), leg raises (abdominales), bridges (puentes), handstands (verticales) comienza en general con una sola serie de 8 repeticiones y semana a semana el atleta trata de incrementar el volumen de trabajo hasta llegar a 2 o 3 series de 25, 30 o incluso 40 repeticiones. En el caso de r/ BWF , diferencia entre el entrenamiento de fuerza y el de resistencia, y se ocupa de remarcar que la rutina recomendada es de 3 series de 5 a 8 repeticiones para entrenar fuerza. El fundamento principal, y muy sintéticamente, es que el aumento de fuerza se logra hipertrofiando las fibras musculares del tipo II (hay dos subtipos dentro de esta categoría: a y b, para más información diríjanse a una enciclopedia) que son las que se activan ante un umbral de estímulo mayor, es decir al levantar cargas relativamente pesadas para nuestra capacidad de realizar fuerza. Aunque les recomiendo visitar la página de la rutina recomendada y leer todo el contenido, en la imagen siguiente pueden ver un resumen de la misma (sujeto a cambios). También lean las FAQ del r/ BWF ( FAQ : preguntas frecuentes). Velocidad de ejecución de los ejercicios En CC hay mucho énfasis en evitar el impulso para que el movimiento sea el resultado únicamente del trabajo muscular, para lo cual cada repetición debe ser ejecutada a una velocidad lenta; además esto protegería las articulaciones disminuyendo el riesgo de lesiones. En el caso de la flexión de brazos (pushup) cada una se recomienda con 2 segundos del movimiento descendente (la parte \"negativa\", a favor de la gravedad), 1 segundo de pausa en la posición inferior y 2 segundos para el movimiento ascendente (la parte \"positiva\", en contra de la gravedad). En cambio, según r/ BWF el movimiento del segmento \"positivo\" del ejercicio debe ser rápido por las características de las fibras tipo II que se pretende estimular, dado que son fibras rápidas y reclutarlas implica un movimiento más explosivo (aunque estas fibras también se activan tras la fatiga de las fibras tipo I, con lo cual en CC también pueden terminar trabajando). Las fibras tipo I tienen mejor irrigación, lo cual les asegura un suministro más estable de oxígeno y una via para la excreción de sus residuos) mientras que las de tipo II trabajan de modo anaerobico y se fatigan rápido, con lo cual no pueden sostener el esfuerzo en el tiempo (es decir para hacer muchas repeticiones). Tanto CC como r/ BWF sentencian la necesidad de conservar \"buena forma\" en la ejecución del ejercicio, con lo cual la explosividad tiene como límite mantener los movimientos correctos del cuerpo. Quizás hay un poco de verdad en cada uno de estos dos caminos. Organización de la rutina CC promueve que cada uno de los \"big six\" se realice una sola vez por semana, para dar tiempo de recuperación al conjunto de músculos trabajados y teniendo en cuenta que además, como se trata de movimientos complejos, hay un cierto grado de superposición entre los músculos empleados por ejemplo para hacer pushups y pullups, o sentadillas y abdominales. Esto es así a pesar de que ciertos niveles se puedan completar en menos de media hora, incluyendo el calentamiento que está siempre presente (y se realiza con los ejercicios más fáciles de la progresión, salvo cuando uno se está iniciando y obviamente no hay ejercicios previos al primero de la secuencia). En la imagen puedn ver los big six y los músculos que cada uno pone a trabajar . En cambio, la rutina recomendada por r/ BWF contiene un calentamiento para el cuerpo completo, una sección de 10 minutos de ejercicios \"de destreza\": la vertical y el sostenimiento en paralelas y anillas. Para la vertical es requisito poder mantener la plancha por 30 segundos, en caso contrario habrá que saltearse esta parte. La ubicación de esa sección directamente tras el calentamiento es para aprovechar la máxima capacidad muscular y del sistema nervioso central, cuando el cuerpo está aún lejos del agotamiento, un estado inmejorable para trabajar la parte técnica de estos ejercicios (la posición adecuada de cada parte del cuerpo en un ejercicio estático, por ejemplo). Luego vienen los ejercicios de fuerza propiamente dichos, que se realizan con pausas de 90 segundos entre una serie y la siguiente. Éstos se organizan en tres duplas (es decir que se completan 3 series de 8 repeticiones -o la cantidad a la cual lleguemos- de pullups y dips intercaladas, luego 3x8 de L-sit y squats, y finalmente 3x8 de pushups y rows). El conjunto total de la rutina se puede completar en una hora u hora y media, y se repite tres veces por semana. Para pullups y dips hay pre-requisitos así que un principiante probablemente se las tenga que saltear por un tiempo Ejercicios de inicio CC recomienda iniciar la secuencia de ejercicios en el nivel más fácil, incluso para quienes tienen un estado atlético más avanzado, fundamentándolo en la necesidad de acondicionar las partes no-musculares que van a ser exigidas. Quizás los músculos de una persona en buen estado físico esté en condiciones de ejecutar niveles más avanzados de la progresión, pero esto no implica que sus tendones, ligamentos y articulaciones puedan soportarlo sin lesionarse. r/ BWF no impone esta restricción, sino que cada uno debe identificar qué parte de la progresión le resulta desafiante pero accesible, y debe iniciarse con esos ejercicios. En el video siguiente un flaquito muestra todos los ejercicios de calentamiento, destreza y progresiones de fuerza Despedida Quizás por la novedad, las progresiones de r/ BWF me parecen más diversas y debido al menor requerimiento de repeticiones por ejercicio quizás sirvan para evitar el desgaste por aburrimiento, ya que con CC uno se puede pasar meses haciendo el mismo tipo de flexión de brazos hasta alcanzar los requisitos para avanzar al nivel siguiente. Hay un libro que parece contener los fundamentos de la rutina recomendada llamado Overcoming Gravity de Steven Low, que a fin de 2016 tuvo su segunda edición. Lo empecé a leer y me resulta agradable (el CC también está muy bien escrito, aunque más fundamentado en la experiencia y el sentido común que en conceptos de fisiología y biomecánica que abundan en Overcoming Gravity). El libro describe muchos ejercicios y progresiones adicionales que ofrecen la posibilidad de construir rutinas muy diversas y personalizadas. A partir de curiosear en los materiales de r/ BWF también recomiendo los canales de Antranik y Tykato . ¡Hasta la siguiente sesión!","url":"https://eldiegoefe.github.io/rutinas-para-evitar-el-gimnasio.html","title":"Rutinas para evitar el gimnasio"},{"tags":"blog","text":"Estas son cuatro imágenes impresas en los sensores fotolumínicos del 2016. Mucho relleno En el Parque Urquiza de Paraná venden insumos para la grasificación personal. Son irresistibles con o sin el mate a mano, quizás por esa tendencia a lo excesivamente relleno que puedan estar los churros, las letras y esa cosa medio indescifrable que parece escrita en ruso. Para Lyncharlo En las calles de La Plata continuamos obsesionados con el misterio del asesinato de Laura Palmer. Fire walk with me! Juego de Cervezas El bar donde te atizan con Enanos, Dragones y Reinas. \" Hagan lio y usen rodilleras\" Me encanta el poster de la nueva obra en cartel: \"La religión los pone mimosos\". Con un elenco exclusivo liderado por el inolvidable Padre Grassi. Véala en las mejores iglesias de Diagonal 73.","url":"https://eldiegoefe.github.io/sensores-fotoluminicos-del-2016-parte-01.html","title":"Sensores fotolumínicos del 2016 - Parte 01"},{"tags":"blog","text":"Cannabis Grow Barato Carpintería Los más vistos (por mi) April Wilkerson / wilkerdos.com Izzy Swan / Izzy Web Jack Houweling Jay Bates , Vlog and Non Project Videos / Jay's Custom Creations John Heisz (canal principal) / I build it (más amplio en temas, videos más detallistas) / I build it Home Improvement / I build it scrap bin / ibuildit.ca Matthias Wandel / woodgears.ca Ron Paulk Stumpy Nubs / stumpynubs.com Steve Ramsey / Home & Garden / vlog Híbridos (herramientas eléctricas + manuales) Fine Woodworking (de la revista homónima: podcasts, proyectos, shop tours, etc) Monkwerks The Samurai Carpenter The Wood Whisperer Handtools Adrian Preda Paul Sellers Renaissance WW Rob Cosman The English Woodworker Tom Fidgen (The Unplugged Woodshop) Wood and Shop Wood by Wright Woodworking Masterclass wortheffort / wortheffort.com Latinos Andrés Barnett (Chile) Angelatedo Artesanía Almería (España) Carpintero del Desierto (Chile) Cinco a ocho (Colombia) Customs Handmade (Argentina) Despelothier (España) Elías Maximiliano (Argentina) Enredando No Garaxe (España) Luis Lovon (Perú) Proyecto Mueble (Argentina) Moré Hace (Argentina) Más Video Woodworkers (enlaces a muchos carpinteros) Ana White (hace Tiny Houses) BearKat Wood (proyectos, hand tools) Bellevue Woodshop (cosas para el workshop) Dmitriy Lutsenko (proyectos pequeños) Dustin Penner (proyectos) Frank Howarth / Frank Makes Furniture Workshop (proyectos) Garage Woodworks (proyectos) Holzwerken (power tools, jigs, proyectos, todo en alemán) Incra Tools (puras cosas de Incra, obvio) Ishitani Furniture (proyectos, muebles minimalistas/japoneses) Jeremy Schmidt Jim Steinbrecher John Zhu (hand tools, proyectos) KRT Wood (proyectos elaborados) Make Something (David Picciuto: ideas, proyectos) Marius Hornberger McCauley's Design (proyectos, máquinas) Mirock's Woodshop (ingeniosos dispositivos, workshop) Rag'n'Bone Brown (proyectos) Rockler (proyectos, how-tos, máquinas) Shop Built (proyectos, jigs, workshop) Simple Cove (lindos proyectos, workshop) Steve Carmichael (proyectos) The Apprentice and the Journeyman (técnicas, jigs, workshop) William Ng (técnicas) Wooden Toolman (máquinas, máquinas caseras) Wood Work Web (host: Colin Knecht, jigs, workshop) Para conocer Bert de Weert Chris Salomone Click Spring (mecanismos) daddyfixesit 2016 (budget middleclass woodworking) David Barron Furniture (joinery, handtools) David Waelder DIY Creators Homemade Modern Jackman Works Jon Peters Art & Home Jordan Crawford Kevin Caron Kyle Toth Make it Extreme Modern Builds Mr Chickadee Not Just Sawdust Paul Jenkins Peter Brown (proyectos creativos) Robs Woodshop Scott Turner The Woodpecker (Alain Vaillancourt) Wm. Walker Co. Wranglestar (great talk) Francés Le PicBois Samuel Mamias Portugués Tudo de Paletes Oficina de Casa Adilson Pinheiro Dimas Goiano Eduardo Casa Grande Marcenaria Amadora Woodturners Carl Jacobson (lathe) Keith Fenner SV Seeker Machinists Mr Crispin Blacksmithing Torbjörn Åhman Walter Sorrels (fabricación de cuchillos, formones, espadas) Inactivos (desde 2015 o antes) Beachside Hank Mr Carters Account (tornillos de madera, prensas) Borrados I am Stankoff Woodworking Plus Cerámica Amy Palatnick Hsinchuen Lin Jim Willet Siffoutv Pottery Steve McDonald Fotografía / Video COOPH Counterpoint Life Curtis Judd D4Darious Daniel Norris Dave Dugdale DiCasa Film DIY Camera Guy DSL Video Shooter DSLR Guide Fenschel & Janisch Film Riot Filmmaker IQ Griffin Hammond Hey Killer Films Indy Mogul Jared Polin Joe Edelman Juan Luis Fernández Gallo Julian Melanson Kyle Clements Mike Browne Mikeycal Meyers Nitsan Simantov Ray Ortega Sam and Niko Steve Perry The Slanted Lens The Frugal Filmmaker Tom Antos Weekly Imogen Electrónica y DIY Afrotechmods , fun with electronics. Bitluni's Lab EEV Blog Human Hard Drive Kirby Meets Audio Make Magazine Notes and Volts Tinkernut vk2zay w2aew Deportes y Salud Artes Marciales Mario Neri Roland Warzecha BJJ y MMA Art of Jiu Jitsu Academy BJJ Joe BJJ Scout BJJ Weekly Charlie from the plaza Chewjitsu Gracie Breakdown Guilherme and Rafael Mendes Kurt Osiander Move of the Week MMA Candy (mmmh) Roy Dean Stephan Kesting Stephen Whittier The Grappling Academy Fitness Anthoni Montalvan Antranik DotOrg Buff Dudes Farid Berlin Fitness Blender Fitness FAQ GMB Fitness Hot Sport TV (esto es más cercano al porno que al fitness) Insane Home Fatloss Elena Malova Mart Muru Ron Williams The Garage Warrior The Lean Machines Tony Horton Zuzka Light Calistenia Baristi Workout Calisthenic Movement Calisthenics Kingz Calisthenics and Weight Training Calisthenics vs Age El Eggs GymRa Red Delta Project Yoga Cody (Dylan Werner y muchos más). Ekhart Yoga YouTube Kino Yoga Neil Keleher Yoga with Adriene Yoga with Tim Yoga (sitios pagos y gratuitos) Antranik Yoga CodyApp (pago) DoYogaWithMe Ekhart Yoga Gaia OmStars oneOeight The Yoga Collective Udaya Yoga Anytime YogaGlo (pago) Yoga International Yoga Vibes Yogis Anonymous Yoga Apps Down Dog Yoga Studio Home Improvement This Old House I Build It Home Improvements Huerta, campo Tierra Fertil TV Agro Machine Knitting Diana Sullivan Federico Perez Laura Ossmarina Roberta Rose Kelley Susyranner The Answer Lady Knits Juegos Eve Online Eve Business Insider Eve Pro Guides Delonewolf Scott Manley GW2 Balouga TV Darkxemnas WoW Las Aventuras de Perle Música Canto Alexander Massey , Oxford singing lessons. Clases de canto , Magalí Muro. Felicia Ricci Jeff Rolka Vocal Splendor Studios Guitarra Aprendiz de guitarra TV Chachi Guitar Lecciones de música Beat Making Sight-reading (Jane) Music Education For All Studio Arts Rock School Músicos y músicas Chick Corea Deep Mix Nation DJ Dimsa DJ Bolivia Jaime Altozano Just Instrumental Music Keep It Underground Lucas Mauro NPR Music Stay See Percusión Al Dworsky Cajon Groove Guide Drumeo Drumming without drums Heidi Joubert American Percusion Live Online Lessons Vic Firth WM Drums Piano Aprender a tocar piano El profe de piano Emiliano Petronilli Lypur Mr Cumbia Producción Busy Works Beats Coldman Beats Cuckoo Music Dubspot Jeremy Ellis Marcus Fuller Mod Noise Audacity unfa Podcasting Cliff Ravenscraft The Audacity to Podcast Programación, Linux, Emacs Brian Will Charl Botha Derek Banas Programothesis Enthought Joe Collins John Kitchin Kris Occhipinti Kurt Schwehr Learn Linux TV Lorena Barba Roshan The New Boston YouTubers Alpha M Art of Manliness Marques Brownlee Otros Digital Pimple Dimensión Vegana Eli the computer guy Home Addition Plus Homesteadonomics iBio Education Improv Everywhere Khan Academy Trip Smith (ex- Sailing and Such ): antes hacía carpintería, ahora es más de camping y kayakismo. TED Ed The School of Life Veritasium Vice News Videos Antiguos British Pathé Temas Equipos de sonido (Audio Equipment) Carpintería Knitting Marie WirrWarr geWOLLtes (la guardé por un video sobre Knittax) Sewing Weaving Woodworking","url":"https://eldiegoefe.github.io/youtube.html","title":"YouTube"},{"tags":"tecnicismos","text":"Para proyectar diseños en madera los carpinteros de YouTube suelen usar SketchUp, que es un software de Google que sólo funciona en Windows y Mac. Busqué algún programa que pueda usar con el mismo fin pero en Linux, y encontré FreeCAD. Estoy siguiendo un buen tutorial en castellano en el canal de Juan Gonzalez Gomez , aca pueden ver el primer video de la serie: Algunos apuntes iniciales: Luego de iniciar un nuevo proyecto seleccionar el espacio de trabajo Part. Hay distintos estilos de navegación que se seleccionan con el menú contextual que se activa en cualquier región del espacio de trabajo activo. Por ejemplo tiene un modo Blender (resultará familiar a los usuarios de ese software de edición de video). Se puede visualizar el origen y ejes de coordenadas desde el menú View / Toggle Axis Cross . La creación de cubos, esferas y otras formas primitivas se produce mediante los iconos amarillos. Cada elemento tiene un par de pestañas asociadas: en View se pueden cambiar, por ejemplo, los colores y tipos de visualización, y en Data las dimensiones y posición de los objetos. Se puede hacer una selección individual haciendo click sobre cada objeto en el dibujo o sobre el listado de objetos del proyecto. Se pueden seleccionar conjuntos de objetos con los modificadores CTRL y Shift. La posición de los objetos (y otras propiedades) se puede modificar tipeando el nuevo número en el display correspondiente o sino activando el display y moviendo la rueda del mouse. SPC : muestra u oculta (transparenta) el objeto activo. En los primeros videos de la serie que recomiendo al principio se ve cómo construir formas complejas a partir de uniones o restas de formas primitivas. También se pueden clonar formas usando una simetría polar (alrededor de un eje) u ortogonal (como un arreglo matricial en una dimensión, en dos o en tres). No estoy seguro de que FreeCAD sea un buen sustituto para SketchUp, pero igual aprender a usarlo es bastante entretenido. Un ejemplo sencillo Les muestro una vista lateral superior del cono de tránsito propuesto como tarea del video 15 ( usando conos ): La construcción se logra uniendo un cono con un rectángulo al que se le aplica un redondeado en sus bordes. Esta unión representa la pieza completamente rellena. Luego se duplica el cono y se ajustan sus dimensiones para que atraviese toda la pieza por dentro, y al hacer el recorte quede el cono ya no maciso sino con el agujero que lo atraviesa. El proceso es muy rápido.","url":"https://eldiegoefe.github.io/freecad.html","title":"FreeCAD"},{"tags":"blog","text":"Aunque actualmente no tengo espacio para hacer cosas con madera, me puse a revisar enlaces que guardé sobre carpintería, porque en unos meses sí voy a disponer de herramientas y lugar. La web, y especialmente YouTube, me han entusiasmado con distintas artes y oficios, que no hubiera creido que me interesara. De no ser por los videos gente común mostrando cómo trabajan la madera, las lanas, el hierro, la programación en Clojure, creo que no habría confiado demasiado en que yo podría lograr resultados aceptables en alguna de estas áreas. Nunca lo experimenté así cuando el acercamiento a estos temas sucedía sólo a través de libros y revistas. Es algo realmente poderoso y futurista esta producción y difusión colectiva del conocimiento en medios digitales. A continuación presento una breve selección (la mayoría en inglés) de enlaces a temas de carpintería. Videos en YouTube Cada vez hay más canales dedicados a la carpintería. Es muy dificil no perderse entre tanto material, a lo que se suma el pésimo sistema de gestión de suscripciones de Youtube, que eliminó la posibilidad de agruparlas por categorías. Estos canales son prácticamente clásicos para mi: Enredando No Garaxe (Sergio Acuña Padín). Es un gran canal en castellano (cuenta también un canal mellizo en inglés). Tiene una idiosincracia latinoamericana (aunque Sergio está en España), en cuanto a resolver los proyectos con los recursos disponibles (muchos norteamericanos hacen más hincapié en la disponibilidad de herramientas, lo cual para mi no está tampoco nada mal). Tiene su página web homónima . Woodworking for Mere Mortals , de Steve Ramsey, desde California, presenta muchos proyectos y técnicas simples. Los videos tienen buena onda. Para mi fue un portal de entrada al mundo de la carpintería y lo recomiendo ampliamente. Además cuenta con su página web . Izzy Swan muestra técnicas muy fáciles y trucos para resolver problemas habituales (por ejemplo la fijación de piezas para encolar). Sus videos son muy motivadores, dan ganas de ponerse manos a la obra porque hace hincapié en la sencillez. Su página web es izzyswan . John Heisz es canadiense y además del canal de YouTube tiene el sitio i build it con multitud de proyectos interesantes, muy bien documentados (ofrece planos gratuitos de algunas cosas y otros los vende a precio accesible). Tiene también un canal mellizo sobre mejoras en el hogar ( home improvement ). Matthias Wandel es también canadiense y estudia (quizás ya se recibió) ingeniería mecánica, lo cual se nota porque le pone técnica a la carpintería. Hace hincapié en desarrollar y adaptar herramientas, sus proyectos son originales, hace pruebas de herramientas, junturas, muebles. También tiene página web: Wood gears con artículos muy detallados como el de cajoneras . Ron Paulk diseñó un banco de trabajo muy original, liviano, portatil, muy funcional y también muy popular. También otra estación de trabajo donde ubicar varias herramientas eléctricas y por otro lado una carpintería movil en el trailer de una camioneta (vean las series de videos Building the Paulk work bench , Building the Paulk total station , etc). Más YouTube Sin ningún orden particular… Worth the effort está más orientado a la carpintería manual. Jay Bates y su página Custom Creations . Luis Lovon y su blog Madera Fina Frank Howarth Ana White . April Wilkerson William Ng Angelatedo es el canal de un español con montones de videos sobre DIY (Do It Yourself = Hazlo tú mismo), no solamente carpintería. The Carmichel Workshop y el blog correspondiente . Monkwerks y A Monk's Woodworking Experiments (es un monje benedictino). Foros Lumberjocks es un enorme foro con usuarios de todo el mundo (incluso de Argentina) que muestran sus proyectos (hay tantos que es dificil saber qué mirar, hay categorías de búsqueda como Editor's Choice que pueden servir), como todo foro hay espacio para hacer preguntas, y algo entretenido es la sección con fotos de talleres de los usuarios. Router Forums tiene de todo sobre carpintería, no solamente sobre fresadoras (routers). La gente es muy amable y se puede preguntar de todo. Hecho x nosotros mismos es un sitio de DIY con una sección dedicada a la madera . Tiene un foro viejo y uno nuevo que no están conectados entre sí, por lo que quizás puedan encontrar cosas buscando en los dos. El foro de la madera es obviamente en español, con secciones sobre herramientas manuales, eléctricas, proyectos, etc. Woodworking Talk Blogs Mi carpintería (Luis Albano) es un blog con proyectos, técnicas, herramientas y demás cosas relacionadas con la carpintería. En general los artículos contienen una introducción y una selección de videos de diferentes canales de YouTube (por ejemplo el artículo sobre bancos de carpintero ). Tiene un índice con links a sitios de interés. Carpintero en casa es el blog de Juan Carlos Aquila (de Buenos Aires) que muestra técnicas muy sencillas y trucos de carpintería con muy pocas herramientas. Revistas Fine Woodworking . Popular Woodworking . Woodsmith . Shopnotes . Más Wood Bin tiene utilidades (como el Sagulator que es una calculadora para estantes que no se tuercen), guías, proyectos, etc. Woodworkers Heaven es realmente el paraíso de los carpinteros piratas, tiene pilas de revistas, libros y videos. El canal de carpintería de Instructables . La sección de carpintería de HowCast . Makesomething.tv (ex DrunkenWoodworker) es una página web asociada al canal Make Something . Build something . El sitio de Incra , que tiene herramientas de precisión.","url":"https://eldiegoefe.github.io/carpinteria-a-pleno.html","title":"Carpintería a pleno"},{"tags":"tecnicismos","text":"Empecé a probar el uso de la plataforma MBED con la placa FRDM - K64F . Hasta ahora usaba la versión online del compilador con una FRDM - KL25Z , que es una placa anterior y de menores prestaciones, pero igualmente muy popular (de las primeras en funcionar con MBED ). El problema del compilador online no es que haya que estar conectado a la web (lo vengo usando desde hace mucho y nunca tuve problemas de acceso) sino sus limitadas prestaciones como editor de texto. Por ejemplo, no encontré manera de comentar y des-comentar múltiples lineas de código simultaneamente, algo que necesito hacer con frecuencia. Por esto mismo prefiero el editor que uso para el resto de mis actividades: Emacs, y esto lo puedo hacer con el nuevo compilador offline. Las instrucciones para usar el compilador desde la linea de comandos (mbed-cli) las extraje del video que está más abajo y de la documentación. Sin embargo lo resumo en esta entrada para tener el paso-a-paso como referencia rápida. Por esto mismo, hay mucha información que no está incluida en este post y que pueden encontrar en la documentación de mbed-cli (como por ejemplo las instrucciones de instalación). Inicializar un nuevo programa Al inicializar un nuevo programa se crea un directorio con el nombre que le asignamos. Este directorio aparece como hijo de nuestro directorio actual, así que antes de ejecutar el comando hay que posicionarse en la ubicación deseada. Para MBED OS 5 $ mbed new nombre-programa $ cd nombre-programa Para MBED OS 2 $ mbed new nombre-programa --mbedlib $ cd nombre-programa Mostrar las librerías instaladas Al inicializarse un programa, como mínimo se importan las librerías de MBED , ya sean las del OS 5 o del OS 2 (son diferentes entre sí). Para verlas: $ mbed ls -a Selección de placa y toolchain Hay que conectar la placa MBED mediante su conector USB OpenSDA (el que se usa para programarla) y ejecutar el siguiente comando, que nos dará información que necesitaremos para seleccionar placa y toolchain: $ mbed detect [mbed] Detected K64F, port /dev/ttyACM0, mounted /media/diego/MBED [mbed] Supported toolchains for K64F +--------+-----------+-----------+-----------+-----------+-----------+ | Target | mbed OS 2 | mbed OS 5 | ARM | GCC_ARM | IAR | +--------+-----------+-----------+-----------+-----------+-----------+ | K64F | Supported | Supported | Supported | Supported | Supported | +--------+-----------+-----------+-----------+-----------+-----------+ Supported targets: 1 Supported toolchains: 3 El sistema indica que encontró la K64F y cuáles son los toolchains que disponemos para trabajar con ella. Si conecto la placa KL25Z el sistema no la detecta, parece que el sistema sólo es compatible con las placas más nuevas . Para seleccionar la placa de destino donde correrá nuestro programa: $ mbed target K64F Para elegir el toolchain GCC_ARM usamos: $ mbed toolchain GCC_ARM Si pedimos el estado actual de la configuración veremos lo siguiente (si la ejecución del comando mbed new se realizó desde /home/diego/mis-proyectos): $ mbed config --list [mbed] Global config: No global configuration is set [mbed] Local config (/home/diego/mis-proyectos/nombre-programa): TOOLCHAIN=GCC_ARM TARGET=K64F Creación de programa En el directorio raíz del proyecto es necesario crear un archivo llamado main.cpp que contendrá el programa escrito en C++. Por ejemplo, este programa enciende y apaga un LED de la placa (usando OS 2): #include \"mbed.h\" DigitalOut rojo ( LED1 ); void togglearLed ( DigitalOut led ) { led = ! led ; wait ( 1 ); } // togglearLed int main () { while ( 1 ) { togglearLed ( rojo ); togglearLed ( rojo ); } } Compilación y ejecución del programa La compilación se realiza con el siguiente comando: $ mbed compile Luego hay que copiar el archivo generado por el compilador en la placa MBED . Este archivo (cuyo nombre corresponde al utilizado durante la inicialización del proyecto: \"nombre-programa\" y cuya extensión es .bin) se encuentra dentro del directorio BUILD / K64F /GCC_ARM. Obviamente este path corresponde a la placa y al toolchain elegidos en un paso anterior. La placa MBED aparece como un disco en el navegador de archivos. En Linux Mint 18 este disco está montado en /media/diego/ MBED . Luego hay que esperar que se produzca la transferencia del archivo .bin hacia la placa MBED (parpadea un LED verde que está junto al conector USB de la placa) y tras algunos segundos (siempre se abre un nuevo navegador de archivos, como cuando conectamos un pendrive, en la ubicación del MBED ) podemos resetear la placa para que se inicie la ejecución de nuestro programa. Si cargamos el programa que está copiado en el paso anterior veremos parpadear el led rojo a una frecuencia de 0.5 Hz. Si modificamos el programa en main.cpp hay que volver a compilarlo, copiar el nombre-programa.bin hacia la placa MBED , esperar que se complete la transferencia y resetearla. Este es el bucle que repetiremos hasta lograr que nuestro programa funcione de la manera deseada. Resumen $ mbed new nombre-programa ( --mbedlib ) $ cd nombre-programa $ mbed ls -a $ mbed detect $ mbed target K64F $ mbed toolchain GCC_ARM $ mbed config --list $ mbed compile Finalmente copiar el archivo .bin al MBED , esperar que finalice la transferencia y resetear la placa.","url":"https://eldiegoefe.github.io/uso-de-mbed-desde-la-linea-de-comandos-cli.html","title":"Uso de MBED desde la linea de comandos ( CLI )"},{"tags":"blog","text":"Esta página está en construcción, como el socialismo About knitting machines es una enorme fuente de información gratuita recolectada por un entusiasta. En best of the best tiene una selección de materiales (como enlaces a videos) que pueden mirar a modo de muestra. Además tiene secciones especiales para cada marca (Silver, Brother, Toyota, etc) y archivos de revistas para bajar. Para acceder a estas secciones hay que navegar el menú de la derecha . My knitting machines and me es el blog de Susan \"Susyranner\" Ranson, una tejedora que postea buenos videos en su canal de YouTube y en su canal de Vimeo (usa varias máquinas de la linea Silver Reed: 302, 321, … y Bond). Además de sus propios post, en la columna derecha del blog tiene un montón de enlaces a muchísimo más material (revistas, otros blogs y canales de video). Angelika's Yarn Store es un comercio ubicado en EEUU con algunas páginas interesantes: una guía de selección para elegir una máquina de tejer una comparación entre tejido a mano vs a máquina cuadro comparativo con la compatibilidad entre distintos modelos de Silver Reed y sus accesorios). Needles of steel es un sitio de enlaces a una tonelada de información, y lo mejor es que está ordenado (y mantenido, al menos hasta nov/2016). Además de patrones gratuitos tiene un listado de videos sobre técnicas y máquinas con subsecciones como Knitmaster (sobre las máquinas Silver Reed / Studio / etc), Maintenance (mantenimiento), casting on y casting off, etc. En el blog de Cheryl Brunette hay muchas entradas sobre tejido, y particularmente un libro sobre el tejido de sweaters . Knittsing tiene una sección que está buena: how to setup and maintain y algunos extras no muy abundantes como patrones gratis, un directorio de manuales, etc. Un largo listado de enlaces, muchos son antiguos y ya no funcionan, pero muchos otros quizás valga la pena ver.","url":"https://eldiegoefe.github.io/bibliografia-sobre-tejido-a-maquina.html","title":"Bibliografía sobre tejido a máquina"},{"tags":"blog","text":"Estuvimos analizando la compra de una máquina de tejer con la Genia Tejedora. Al final había más opciones que la desolación de las primeras búsquedas tras las cuales no habíamos encontrado casi nada. Pero tras insistir con las búsquedas se desplegaron muchas alternativas y tuvimos que elegir: comprar máquinas nuevas (que aseguran el funcionamiento pero son caras y de calidades incomprobables en particular las de origen chino), comprar máquinas refaccionadas a particulares (mucho más baratas y con garantía de funcionamiento pero antiguas), máquinas usadas en diverso estado a través de Mercado Libre (imposible estar seguro de lo que uno recibirá). Como apareció una usada muy barata aparentemente en buen estado y en nuestra ciudad decidimos arriesgarnos. Traía sus accesorios originales y además dos agujereadoras manuales de tarjetas. La fuimos a ver, el vendedor nos trató muy bien, nos mostró la máquina en su caja original (que estaba como se veía en las fotos de su publicación) y nos contó su historia: había pertenecido a su suegra, a ningún heredero le interesaba usarla y hacía 10 años que estaba oculta en un rincón. Prefería venderla y que alguien la aprovechara, y ese alguien venimos a ser nosotros. El estado general era bueno a muy bueno. Una vez en casa desparramamos la máquina y sus accesorios en el suelo. Llevaba años sin una limpieza así que al tacto no ofrecía la mejor de las experiencias y en algunas partes lucía los efectos de la humedad. De hecho me empecé a desanimar cuando noté herrumbre en regiones que no había visto. Después de un rato me di cuenta de que las agujas estaban medio pegadas y costaba que se abrieran las lenguetas. Las fotos salieron medio movidas con el celular bajo la amarillenta luz del living y mi pulso descontrolado. Empecé a limpiarla pero era obvio que iba a necesitar ir más a fondo que pasarle un trapito húmedo. Las partes herrumbradas resaltaban más a medida que se realzaba el contraste con las zonas alcanzadas por el alcohol y la lavandina. Y a muchos lugares no podría llegar sin emprender el desarme no nuclear. Agarré el destornillador y me puse a ver si los tornillos se podían aflojar. Los tornillos fueron saliendo y el problema fue que me empecé a entusiasmar, así que la limpieza llegó lejos. No les recomiendo usar virulana (lana de acero) porque libera muchos residuos que se terminan pegando por todos lados. Las agujas pasaron una noche en kerosene y luego las limpiamos una por una. Otra de las partes fieras fue la tira de gomaespuma que corre sobre las agujas. Estaba fragil, marrón y toda pegajosa, algo predecible en el mundo de las viejas máquinas de tejer, la cambiamos por un burlete autoadhesivo y quedó lindo pero parece que no va a durar mucho porque es demasiado blando. Vamos directamente al epílogo. La máquina quedó espectacular a la vista, y tejimos nuestras primeras muestras con éxito. No tenemos ninguna mesa en la cual se puedan agarrar los sargentos que sostienen la máquina en su lugar, así que tuvimos que improvisar con unas sillas y una madera. Les dejo algunas fotos. Hasta la próxima. Mesa sillesca Un acercamiento y las primeras 3 muestras, la más chiquita en azul es muy angosta y se enrolla sobre sí misma. Una vista frontal del carro, el contador y la lectora. Los accesorios tras una ducha a fondo. Las perforadoras estaban impecables.","url":"https://eldiegoefe.github.io/bienvenido-a-la-maquina.html","title":"Bienvenido a la máquina"},{"tags":"blog","text":"A partir de la inquietud de Trini, que además de ser mi compañera es una tejedora obsesiva, me puse a investigar sobre máquinas de tejer y terminé enganchado con estas máquinas extrañas. El mundo está lleno de recovecos donde se desarrollan especies raras, y en estas máquinas descubrí uno de estos submundos. Las únicas máquinas hogareñas que yo conocía, emparentadas con la industria textil, eran las máquinas de coser. Mi abuela tenía una, obviamente una Singer negra a pedal. Pero resulta que hay unas máquinas con un montón de agujas (entre 100 y 200) que bailan al compás de un carro y tejen lineas completas de tejido en menos de un suspiro y con la única propulsión de un brazo que guía el carro de un lado hacia el otro (una especie de planchado creacionista). Por el material principal con que se construyen las máquinas de tejer se pueden clasificar como plásticas o metálicas, o se pueden identificar por el tamaño y separación de las agujas (que permiten tejer tramas de un cierto rango de grosores), o se pueden diferenciar por su nivel de complejidad y su capacidad para producir tramas más o menos trabajadas (simples, de tarjeta perforada, electrónicas, …). Algunos fabricantes dominaron el mercado a partir de la década del 50, cuando aparentemente se inició la fiebre del tejido a máquina (?), con modelos que denominaron diferente en distintos lugares del mundo pero que salían de la misma matriz. Esta decisión de llamar diferente a máquinas idénticas probablemente se tomó siguiendo el consejo de un poco talentoso aspirante a Don Draper o de algún perito confusionólogo de moda. Cada linaje, principalmente de máquinas japonesas, dio lugar a una maraña de marcas y códigos, tanto de la máquina principal como de sus accesorios. Por este motivo puede ser dificultoso identificar estas maravillas y determinar la compatibilidad de sus accesorios. Hay muchas páginas que recopilan esta historia, y también videos como el de Alice Pearce que presenta una simplificación para volver comprensible este universo. Si les interesa el tema vean también Knitting Museum , About Knitting Machines , Needles of Steel , Yarn Store , entre otros. La clave para identificarlas es saber que de la extensa variedad de máquinas, aquellas que pertenecen a distintas marcas pero que comparten el mismo número son máquinas idénticas. Una Studio SK -323 es idéntica a una Empisal 323. Las descendientes de las japonesas se comercializaron con estas denominaciones (mismo renglón corresponde a máquinas iguales con distintas marcas): Studio, Singer, Silver, Silver Reed, Knitmaster, Empisal, Artisan, Lady Tricot, etc. En general con prefijos SK , HK , LK . Desconozco cuál fue la marca original. Brother, Knitking, Empisal. En general: KH , KX . Toyota, Elna (en este caso no se cumple la identificación de números, la Toyota KS 950 es idéntica a la Elna 2400). Mitsubishi Es un lío, fíjense que con la marca Empisal se vendían máquinas en Australia, algunas del linaje de Studio y otras de Brother (¡pero repito, en general números idénticos identifican máquinas iguales!). Por supuesto que hay excepciones y los linajes se entrecruzan, por ejemplo de acuerdo a Toyota Knitting Machines la Elna 2300 es la misma que la Studio/Singer/SilverReed/Knitmaster SK155 y que la Toyota KS650 . Las que no son de origen japonés: Bond (inicialmente en Inglaterra y luego fabricadas en USA ) Passap (Suiza) White, Superba, Phildar (Francia) Fuera de esa clasificación también encontré estas identificaciones: Singer, Juki Singer, Superba En Argentina se consiguen actualmente (2016) máquinas nuevas: Silver Reed: 150, 270, 280, 155, 830. Enigma (de origen chino: 150, 230, 260, 280), semejantes a las Silver Reed. Master MA 245-2, Tian Qin Jbz 245-2 (máquinas chinas que seguramente son clones, pero que no identifico) En nuestro país aún se consiguen muchísimas máquinas de tejer usadas, siendo las más abundantes las de marca Knittax, y en menor medida y sin orden alguno: Jukicard, Lyciatex, Lady Tricot. En YouTube se encuentran videos sobre el uso de estas máquinas, entre los que sobresalen los de Federico Perez que son muy actuales y muy didácticos, con abundantes detalles, para mostrar cómo se utilizan. Como no encontré información sobre la historia de las Knittax y no lograba identificar la relación de estas máquinas con las extranjeras (Studio, Brother, Toyota, …), y por alguna razón me obsesioné con trazas su genealogía, le pregunté a Ricardo Daniel, un tejedor argentino que comparte en YouTube videos sobre antiguas máquinas del mercado Argentina (pueden ver sus videos aca ). Me respondió que las Knittax fueron tejedoras familiares netamente argentinas, emparentadas con Lanofix de Brasil y Sewing Singer, de origen sajón (hay videos en alemán como los de Marie WirrWarr con la Knittax modelo M2, lo cual no se cómo encaja en esta historia). Ricardo explica que tenían en común la forma de alimentación del hilado, que corría siguiendo al carro \"por vasos de plástico contenedores de ovillos o las primeras antenas que estaban adosadas en el carro y no como las modernas que tienen el sistema tensor fijo en la parte posterior de las camas de agujas\" (la explicación me supera un poco, necesitaría lograr más familiaridad con las máquinas para comprenderla). En este antiguo noticiero se muestra la fábrica Knittax en Villa Martelli (Vicente Lopez, Argentina). La opinión de Ricardo es que se dejaron de fabricar porque fueron superadas en diseño y calidad por máquinas de origen japonés y chinas que poseían sistemas de agujas sin platinas y con tensores fijos. Parece que en Argentina duraron más que en otros países (no se a cuáles se refiere, quizás Brasil) porque las amas de casa la siguieron eligiendo por su manejo sencillo y su bajo precio. Otra de las razones de la retracción del tejido a máquina fue la caída de la industria textil en la época del gobierno militar, agravada por la importación de sweaters extranjeros. Desde mediados de los ochenta y hasta el principio de los noventa reverdece el mercado del tejido a maquina, pero para ese entonces ya no había tejedoras preparadas, pues las expertas llevaban dos décadas de inactividad. En cambio en Perú sí resistió la industria y se desarrollaron tejedores muy buenos, hasta nuestros días. (¡Gracias Ricardo por la información!)﻿. Encontré una entrevista a un reparador de máquinas de tejer y coser que comenta sobre esta situación: Antonio Evangelista. Recuerdos hilvanados Además de las Knittax, en Argentina se comercializaron descendientes de las japonesas Studio (Silver, etc). Llevaron la marca Singer, luego Lady Wanora y Lady Tricot, por estas cosas de la dinámica empresarial de ventas, fusiones, quiebras y que se yo. Como ejemplo del cambio de nombre para una misma máquina podemos mencionar la Singer Memomatic que pasó a ser Lady Tricot Memorama, una máquina que leía tarjetas caladas. No todas las marcas sobreviven actualmente en el mundo. Mitsubishi no parece haberse dedicado mucho tiempo a esta actividad, practicamente no encontré referencia a sus máquinas. Toyota fabricó relativamente pocos modelos comparadas con otras marcas (las últimas en la década del 80), Brother dejó un gran legado pero discontinuó sus máquinas de tejer. Yo creo que perdura Silver Reed (el importador de Argentina indica en su página web que representa \"la Licencia SILVER SEIKO LTD , para sus productos, máquinas de tejer, SILVER REED \"), en USA parece que se siguen produciendo las Artisan. ¡Seguiremos informando!","url":"https://eldiegoefe.github.io/para-una-genealogia-de-las-maquinas-de-tejer.html","title":"Para una genealogía de las máquinas de tejer"},{"tags":"tecnicismos","text":"Una vez más me encuentro ante el desafío de armar un panel para un programa de análisis de datos, hecho en Python. Lo ideal sería trabajar con lineas de comandos y no tener que estar lidiando con menúes, botones y areas de graficación, pero sería impractico para los usuarios a quienes está destinado el programa. Así que nuevamente tengo que rastrear cómo se arma una pantalla con todas estas cosas. Como ya usé con anterioridad Qt, PyQt y PyQtGraph voy a continuar eligiéndolos, aunque se que existen opciones. Con Qt Designer armo el panel frontal con los elementos básicos: un espacio para ingresar texto (más adelante será un selector de archivos) y dos gráficas que contendrán histogramas. Esto último es lo más arduo, porque siempre me olvido del procedimiento (y por eso armo este artículo, que tiene mucho extraido de How to use PyQtGraph ). Crear un widget QGraphicsView (\"Graphics View\" en la categoría \"Display Widgets\"). Click derecho sobre el QGraphicsView. Seleccionar \"Promote To…\". En \"Promoted class name\" teclear el nombre de la clase a utilizar (por lo general es \"PlotWidget\", pero también podría ser \"GraphicsLayoutWidget\", etc). En \"Header file\" escribir \"pyqtgraph\" (sin ninguna extensión). Click en \"Add\" y luego click en \"Promote\". Al grabar desde Qt Designer tendremos un archivo con extensión \".ui\". Para convertirlo y poder usarlo en Python es preciso utilizar el conversor llamado pyuic4: pyuic4 -x panel.ui -o panel.py Si no lo tenían instalado y están en un descendiente de Debian o Ubuntu: sudo apt-get install pyqt4-dev-tools A continuación se puede ver un ejemplo de un programa en Python que utiliza el panel que fuimos creado. La clase creada al armar el panel se llama, por defecto, Ui_MainWindow. En el ejemplo la llamé Ui_VentanaPrincipal. El panel del ejemplo tiene un boton, una etiqueta y un PlotWidget. from PyQt4 import QtCore , QtGui from panel import Ui_VentanaPrincipal import numpy as np class Window ( QtGui . QMainWindow ): def __init__ ( self ): QtGui . QMainWindow . __init__ ( self ) self . ui = Ui_VentanaPrincipal () self . ui . setupUi ( self ) self . ui . pushButton_actualizar . clicked . connect ( self . borrarEtiqueta ) def borrarEtiqueta ( self ): self . ui . lbl_etiqueta . setText ( \"\" ) def escribirEtiqueta ( self , texto ): self . ui . lbl_etiqueta . setText ( texto ) def setearLimitesPlot ( self , x1 , x2 , y1 , y2 ): p = self . ui . miCuadricula p . setRange ( xRange = [ x1 , x2 ], yRange = [ y1 , y2 ]) def graficar ( self , data ): p = self . ui . miCuadricula p . plot ( data ) if __name__ == '__main__' : import sys ## initializing Qt (only once per application) app = QtGui . QApplication ( sys . argv ) ## inicializa un objeto (window) que contendra todos los widgets, y lo muestra window = Window () window . show () window . setearLimitesPlot ( 0 , 25 , 0 , 1 ) datos = np . random . normal ( size = 25 ) window . graficar ( datos ) window . ui . lbl_etiqueta . setText ( \"hola\" ) ## se puede referenciar al plot desde aqui, de este modo: ## p = window.ui.miCuadricula ## p.setRange(xRange=[-500, 500], yRange=[-500, 500]) window . escribirEtiqueta ( \"Etiqueta modificada\" ) ## Start the Qt event loop: app.exec() sys . exit ( app . exec_ ())","url":"https://eldiegoefe.github.io/panel-frontal-del-software.html","title":"Panel frontal del software"},{"tags":"tecnicismos","text":"Para el uso de la agenda en org-mode, voy a listar las cosas que uso con frecuencia. Además, en este link hay un resumen de comandos de org-mode muy completo. Inserción Atajos de teclado \"convencionales\" de org-mode (funcionan con Spacemacs). capturar una nota en el inbox: C-c c links: C-c C-l etiqueta de To-Do (empezado, hibernando, completado, etc): C-c C-t schedule: C-c C-s deadline: C-c C-d Para agregar: Refile: cómo llevar las notas del inbox a su destino final. Generación de enlaces Atajos de teclado sólo de Spacemacs. buscar dentro de los archivos org (org-occur): SPC a o / org-store-link: SPC a o l org-insert-link: , i l","url":"https://eldiegoefe.github.io/mas-sobre-agenda-en-org-mode.html","title":"Más sobre agenda en org-mode"},{"tags":"tecnicismos","text":"Mientras escribo un programa para manipular imágenes de un microscopio, tuve que ver cómo ejecutar una función distinta, de acuerdo a cierto parámetro. Más concretamente, para procesar las imágenes en algunos casos se necesita un kernel, que es una matriz llena de unos y ceros organizados de acuerdo a la selección de dos parámetros: forma y tamaño. Por ejemplo, un \"disco\" de radio 3 se vería así: [[0 0 0 1 0 0 0] [0 1 1 1 1 1 0] [0 1 1 1 1 1 0] [1 1 1 1 1 1 1] [0 1 1 1 1 1 0] [0 1 1 1 1 1 0] [0 0 0 1 0 0 0]] Y una matriz \"cuadrada\" de lado 3, así: [[1 1 1] [1 1 1] [1 1 1]] Una forma de escribirlo sería usando un \"if\" para cada posibilidad, pero si las variantes son muchas entonces queda poco elegante. Por suerte encontré una alternativa, que se parece al \"case\" de otros lenguajes, pero con mucho más punch : tiposPosibles = { \"cuadrado\" : square , \"disco\" : disk } def armarKernel ( tipo = \"cuadrado\" , tam = 3 ): kernel = tiposPosibles [ tipo ]( tam ) En el ejemplo, tiposPosibles es un diccionario. Cuando tipo = \"cuadrado\", y tam = 4, la linea equivale a: kernel = square(4). ¡Maravilloso!","url":"https://eldiegoefe.github.io/diccionario-de-funciones.html","title":"Diccionario de funciones"},{"tags":"politica","text":"Mi primera reacción cuando me enteré que el kirchnerismo iba a tener que dirimir la presidencia en un ballotage fue entregarme a la catársis de la burla y parafrasear sus consignas políticas para humillarlas y para reirme de sus defensores a ultranza. Como su campaña permanente por el poder es extraordinariamente prolífica y su acervo de publicidades no detiene su crecimiento, la diversión duró más de un día en el que minuto a minuto fui recordando sus frases vacías, sus engaños y sus provocaciones mafiosas, para publicarlas reducidas al absurdo o transformadas en chicanas. Cuando la tarea se volvió rutinaria y perdió la gracia (mi cerebro nunca llegaba a extenuarse, las ocurrencias continuaban pero ya mi estado de ánimo había abandonado la exaltación) empecé a darme cuenta de la tragedia a la que nos hemos condenado socialmente dada la incapacidad que sufrimos para convertir las experiencias colectivas que atravesamos en una fuente de conocimientos utilizable para transformar las circunstancias que nos tocan. Uno podría suponer que después del 2001 y su mantra-hit \"que se vayan todos\", sería dificil para un partido captar la confianza de los ciudadanos, atentos a partir de allí a evitar la repetición del saqueo y la impunidad. Sin embargo, un puñado de medidas progresistas, algunas en el terreno de lo simbólico, otras realmente necesarias para paliar la indigencia, sirvieron para construir un mito que los ciudadanos abrazaron con fe de conversos y defienden con aparente ceguera. La discusión política se ha vuelto imposible por la pérdida de sentido de las palabras y la pereza mental que invade todos los órdenes de la vida, y que por ejemplo lleva a la repetición infinita de información falsa y fórmulas absurdas (pro y anti oficialistas), o al sostenimiento de tesis estrambóticas, pobrísimas, oligofrénicas, criminales. En estos años, al compás del juicio a ex-represores, la gendarmería y las policías provinciales bailaron a diferentes descontentos. Lejos de condenar estas represiones, los militantes kirchneristas exculparon a sus autores intelectuales o los justificaron, y acompañaron estos actos con silencios tácticos, para evitar el debilitamiento de sus líderes y espacios políticos. Pero la ingenuidad de reclamar autocrítica es nuestra. Si no han sido escasas las complicidades colectivas con horrores inimaginables en variados lugares y tiempos, ¿cómo no va a haber colaboracionistas con regímenes de maldad caricaturesca? Voy a definir como colaboracionista a aquel que calla como resultado de un cálculo, porque supone que condenar y criticar una acción del gobierno pone en riesgo un bienestar, propio o ajeno. Cree obrar moralmente, porque supone que señalar lo atroz puede generar un mal mayor. ¿A quien culpar por esta conducta delictiva pero romántica, con buenas intenciones? Claramente al actor que la pone en práctica de un modo extremo, porque no es que calla alguna crítica y enuncia otras, sino que comete el silencio absoluto, se calla todo, se convierte en un pragmático hijo de la re mil puta y se hace el boludo de manera holística, Quizás soy exagerado, y no se trate de colaboracionistas sino de víctimas de acciones mafiosas, y por eso no debieran ser juzgados. Se trataría de víctimas porque disponen de derechos que se le otorgan condicionalmente (a cambio de lealtad, silencio, favores, votos) y que son perecederos, pues su fecha de vencimiento sucede cuando el mafioso en funciones pierde el poder. Quizás es solo eso, la épica de un relato sostenida por la cobardía de sus víctimas. Sea como sea, víctimas o no, estaría bueno que, aunque sea por mero cálculo, para lograr convertirnos en colaboracionistas temporales de su régimen (al menos mientras nos convocan para atravesar el ballotage venciendo al cuco que diseñaron), comiencen a balbucear palabras cuyo significado sea socialmente compartido para que recuperemos la posibilidad de mantener un diálogo racional. Esperar una autocritica feroz parece una utopía lejana. Retomando el proyecto de liberación que el kirchnerismo cerró con tanta maestría, deberíamos repensar nuestra confianza en el tipo de democracia a la que damos vida y continuar la búsqueda de alternativas. Una vez más, pongamos de moda el mantra-hit.","url":"https://eldiegoefe.github.io/la-unica-verdad-es-el-absurdo.html","title":"La única verdad es el absurdo"},{"tags":"politica","text":"No soy un trabajor muy prolífico. Distintos mecanismos cotidianos actúan como fricción, esa fuerza que se opone al movimiento. A pesar de ello, leo con asiduidad sobre un tema noventoso y supuestamente patrimonio de la derecha, muy presente en la filosofía de los capitalistas: la productividad. Igual el planteo es sólo aparentemente contradictorio, porque me gusta leer a quienes se proponen trabajar lo menos posible en relación de dependencia y tratan de aprovechar el tiempo de sus vidas para desarrollarse y hacer lo que creen que les gusta. A veces se ponen objetivos como leer 4 libros en un mes o retirarse a vivir vidas frugales a partir de los 35 años. Me siento identificado con ellos. Hay unos reportajes que me gustan mucho en Lifehacker, de la serie \"How I work\" , en los que Andi Orin entrevista a diversos personajes que seguramente son conocidos en círculos con los que tengo poca intersección: expertos en alguna disciplina, inventores exitosos, escritores de ciencia ficción, periodistas culinarios, youtubers que evalúan gadgets (que no son inspectores sino artilugios) tecnológicos, desarrolladores de juegos, directivos de alguna gran empresa, etc. A todos inquiere sobre sus hábitos de trabajo y sobre sus herramientas preferidas. Los entrevistados describen sus ámbitos y horarios de trabajo, sus computadoras, las aplicaciones que utilizan con frecuencia, las marcas de sus cuadernos y plumas preferidas, qué música escuchan mientras laburan, cuánto duermen, que libros leen, cómo recargan su energía, etc. Las entrevistas son bastante jugosas, con links hacia esas marcas y apps y libros que los tipos comentan, y que te impulsan el deseo de comprar, a ver si quizás se te contagian las ganas de producir cosas importantes que parecen tener estos extraterrestres. Tema para otro posteo: ¿por qué todos prefieren usar computadoras y celulares de Apple, siendo muchos de ellos promotores de la experimentación y de distintas formas de vanguardia? Hay algo oscuro en la ausencia del software libre en sus discursos. Facilmente caigo en la desazón de la comparación. Pero ni bien empiezo a putear en privado tengo que detenerme porque ni siquiera siento el derecho a quejarme de mis condiciones de trabajo, mejores que las de numerosos laburantes completamente más explotados que yo. No estoy seguro. Tampoco es del todo cierto que me contenga porque esté latente, cercana y amenazante la miseria del inframundo. En cuanto a la queja pública tampoco la ejercito porque me adelanto a las excusas que voy a recibir (que no hay presupuesto, que el espacio es limitado y todos están en las mismas condiciones que yo, etc) y porque me evito la confrontación con seres que se destacan más por una idiosincracia capanga que por su auténtica capacidad de liderazgo. ¿Tiene sentido requerir un horarios fijo cuando la labor implica creatividad? En los lugares que conozco predomina la cultura del control horario. Es casi todo lo que piden, que tu cuerpo esté sentado en la silla mientras un megáfono puede estar transmitiendo sin interrupciones las vicisitudes del último match disputado entre Manchester United y Deportivo Mandiyú, y tu mente es incapaz de hilar dos oraciones consecutivas. Y al final de un período preestablecido llegará el momento de completar planillas dibujando el cumplimiento de objetivos a una autoridad superior bastante desconocida que nunca te tira un feedback ni te espera tu opinión honesta sobre lo que profesionalmente hacés, ni se interesa por las herramientas que te faltan o las condiciones que te molestan. No se dan cuenta de que estamos deseosos de regalarles la mayor plusvalía posible si nos dejan tranquilos, porque dedicarse diariamente a no hacer una goma es de lo más aburrido. A mi me encanta programar y resolver los problemas que me presenta el desarrollo del software (al hardware lo estoy empezando a odiar cada vez más), y me invade el cerebro la hormona del placer cuando veo que mis resultados permiten cosas antes irrealizadas. Por otro lado, trabajar estresado atenta contra la calidad de lo que hago, y yo me estreso fácil, así que sería provechoso que me lo eviten, pero por las condiciones actuales me siento en alerta hasta de que no me vean navegando las redes sociales cuando pasan a mi lado, como si a cada momento tuviese que demostrar que no están perdiendo plata conmigo. El mensaje de los rituales de entrada/salida (firmar o marcar tarjeta) es que si no te controlan no harías nada, como si detestaras disfrutar del logro que significa poner tus talentos en juego. Parecen no advertir que nos molesta trabajar a un ritmo ajeno, alejado de nuestro arbitrario reloj biológico y social, sin consideración por nuestra energía vital. Ni hablar cuando la implementación incluye un sistema de castas según el cual sólo los trabajadores de cuello azul debemos someternos a la rigidez del sistema mientras los creativos y cerebrales semidioses de rango superior tienen justificadas reglas especiales. Hay empresas tecnológicas exitosas, como Google, que ofrecen condiciones de trabajo que sus empleados valoran y pretenden mantener, explotándose a gusto. En esta entrevista , Laszlo Bock (un directivo de la empresa) cuenta sobre las estrategias para obtener mejor rendimiento de sus empleados. Sugiere que el éxito es ofrecer libertad, espacio, comfort. Es una lástima que no le pregunten sobre el reverso de su historia ni incluyan testimonios que permitan contrastar algunas de sus afirmaciones. Aparentemente, Google terceriza parte de sus actividades y los trabajadores que realizan esas tareas se parecen mucho más a los flexibilizados de un call-center (si se animan al inglés, está relatado acá: A Place at the Foosball Table. I was a Google contract worker ). Hay también empresas muy exitosas (como Amazon) que son la contracara, por las condiciones esclavizantes que imponen. Sin embargo, la existencia de ejemplos exitosos sobre formas estimulantes de organización alcanza para que sepamos que esas alternativas existen y son posibles, al menos en algunos ámbitos, y sin olvidarnos de que la realidad es más complicada que cualquier propaganda. Es importante conocer ejemplos que nos alientan a imaginar con otras reglas de funcionamiento los lugares en los que nos toca vivir a nosotros. Me faltaría también conocer la dinámica de fábricas recuperadas y cooperativas reales, seguro que tienen aportes para hacer en este tema. ¿Es o no posible desarrollar modos de organización del trabajo que sean menos hostiles con la vida humana? Con frecuencia son los mismos trabajadores quienes lo impiden. Tienen metida en el cuerpo la certeza de que los sistemas de control son imprescindibles porque los demás son vagos , y que si no fuera por el ojo del amo todos llegaríamos tarde y haríamos lo mínimo indispensable. Eso, que puede ser cierto en este mal contexto para la labor libre, sólo describe que no somos máquinas. Me pregunto qué surgiría si nos tomamos el tiempo para discutir los motivos que nos llevan a tener más valles que picos de rendimiento. Yo creo que es algo que no se preguntan quienes acceden a cargos de mayor jerarquía, puesto que sólo replican las formas conocidas de organización y control. Los capataces, incluso los de título universitario, tienen un goce en el ejercicio de la autoridad, disfrutan del poder de mando y por lo general no admiten cuestionamientos. Peor para todos. La organización del trabajo es un tema complejo que no debe haber sido resuelto en sociedades que experimentaron formas de organización socialista. Por ahora parece que pensar por fuera del molde es sólo patrimonio de algunas tribus, quizás posible en Islandia, o dentro de alguna simulación informática.","url":"https://eldiegoefe.github.io/productividad-negativa.html","title":"Productividad negativa"},{"tags":"tecnicismos","text":"Spacemacs Anaconda-mode: Emacs tiene muchas herramientas para facilitar la programación en Python. En Spacemacs se puede activar anaconda-mode , que activa una serie de paquetes útiles. Por ejemplo \"eldoc\" que ofrece información en el modeline sobre la función que se está tipeando (muestra los nombres de sus argumentos). Cosas de Anaconda para usar: anaconda-mode-complete (C-M-i) anaconda-mode-find-definitions ( SPC m g g): busca el origen del símbolo bajo el punto. Por ejemplo: si se trata de una función, abre el archivo donde está definida y ubica el punto sobre el encabezado de la misma. anaconda-mode-find-assignments anaconda-mode-find-references anaconda-mode-go-back anaconda-mode-show-doc Entornos virtuales: se puede activar un entorno virtual donde correr el programa que se está desarrollando con SPC m V (pyvenv-workon, pero en este caso no aparecen correctamente todas las opciones, al menos no veo los entornos que instalé con pyenv), o también con SPC m v s (pyenv-mode-set, en este caso sí se ven los entornos de pyenv). Shell con entorno virtual: para acceder a un shell con el mismo entorno virtual que se activó (en el punto anterior) hay que hacer SPC a s m (shell-pop-multiterm). Comentarios: para comentar el bloque de lineas seleccionadas se utiliza SPC c l (evilnc-comment-or-uncomment-lines). También se puede probar con SPC ; (evilnc-comment-operator). Para ejecutar programas que contienen el llamado a la función principal con un bloque del siguiente modo: if __name__ == '__main__' : hay que pulsar C-u C-c C-c (y en Spacemacs: SPC u C-c C-c). Previamente hay que haber elegido el entorno virtual correcto (ver el punto 2). De este modo funcionan los programas incluso si tienen panel construido con PyQt. Más info en la pregunta que hice yo mismo: How to execute a python program (with a GUI ) from Emacs? . Yasnippets SPC i s (spacemacs/helm-yas). Si no están aún cargados, carga los snippets y ofrece un menú tipo helm para seleccionarlos. Luego quedan habilitados para usar el trigger (la abreviatura) seguido de TAB . Tabulación C-x TAB (indent-rigidly). Selecciono las lineas, uso C-x TAB y luego las flechas hacia los lados para aumentar o disminuir la indentación manteniendo la disposición actual. También se puede tabular para respetar las necesidades del lenguaje, seleccionando una región y pulsando C-M-\\ (indent-region). Aún cuando no haya ninguna indentación previa en esta región, cada linea se acomoda al lugar que debe ir. Igual hay que chequear porque el comando no puede adivinar, y hay veces que un mismo bloque puede ir con distintas indentaciones correctas. Spacemacs Para insertar texto desde el modo \"normal\" (o \"comando\") se usa la letra p o P (la inserción es antes o después de la ubicación actual del cursor). Para pegar desde el modo \"insert\": C-y. Se comentan (y des-comentan) lineas seleccionándolas y presionando SPC c l (comment-or-uncomment-line). Se borra la ventana actual con SPC w d. Obviamente sólo es posible cuando hay más de una ventana abierta (recordar que las ventanas en Emacs son las subdivisiones de la pantalla ocupadas por un buffer). Para navegar directorios se usan las combinaciones C-j y C-l para moverse desde un directorio hacia otro que esté un nivel por encima o un nivel por debajo.","url":"https://eldiegoefe.github.io/python-en-emacs-y-otros-atajos.html","title":"Python en Emacs y otros atajos"},{"tags":"blog","text":"Ayer y hoy el mate cocido se enfrió más rápido. Advertí el motivo con premura. No es que se haya producido una grieta espacio-temporal en la ciudad de La Plata. La aceleración siempre coincide con los días no laborables, y justo ayer fue sábado. Llega el fin de semana y me encuentro lubricando la eficacia del aprovechamiento del tiempo, porque las agujas del reloj se desplazan más rápido. Es corto el período de libertad, quiero aprovechar mi energía vital para materializar todos los proyectos que acumulo mientras no soy dueño de mis horas, en el trabajo, o mientras no soy dueño de mis músculos, cuando ya estoy en casa pero durante el intervalo en el que el cansancio y el hastío me neutralizan. Trabajar cuarenta horas semanales fue un triunfo de la Revolución Rusa, según escuché decir por ahí (al día de hoy resulta una victoria pírrica). Las cuarenta horas semanales incluyen las horas muertas en que el cuerpo se niega a ser continuamente exprimido y excluyen el tiempo del viaje de ida y vuelta, por lo que habría que computar mejor la dedicación al trabajo que consume mucho más que cuarenta horas. Resaltemos que las ocho horas diarias (más el viaje de ida y vuelta, que en mi caso totaliza una hora más) de régimen laboral ocupa más que la mitad del tiempo de vigilia diario, considerando el tercer tercio destinado al sueño. Pero si además pensamos en calidades, las ocho horas propias en que somos dueños de nosotros mismos son peores que las primeras, que se dedican al laburo, porque al llegar a casa uno está un poco (o bastante) arruinado. Habría que trabajar menos, me digo. Un personaje de la Matrix me responde: así no funcionarían los hospitales, ni las escuelas, ni las fábricas, ni las huertas. El caos es la primera amenaza que surte efecto, tardamos un par de segundos en superarla. Acaso funcionan los hospitales y las escuelas y las fábricas y las huertas? Quizás todo marcharía mejor con menos trabajo esclavo. El humo de la taza sube a mayor velocidad mientras pienso en qué hacer para aprovechar mi tiempo libre. Empiezo a sentirme ansioso, mientras recupero proyectos del baúl de mi memoria. Todavía no empecé y ya advierto que no puedo decidirme entre las opciones que tengo (leer unos capítulos del libro actual, aprender trucos de carpintería por YouTube, esmerarme en la práctica de yoga o aprender algún escape de bjj, salir a comprar ingredientes para preparar la comida, ordenar las carpetas pendientes repletas de fotos digitales y elegir algunas para llevar a imprimir, aprender a instalar un servidor de archivos en la red local) y mientras las evalúo, el minutero no tarda en acelerarse, porque es sábado o domingo y el tiempo, como ya dije, transcurre a otro ritmo. Debería estar disfrutando, pienso en segundo plano. Y en un tercer plano de conciencia veo cómo se pone en negrita la cuenta regresiva hacia el lunes con su bóveda superpoblada de problemas pendientes. Hay lugar para más en mi conciencia, se siguen procesando los algoritmos que tratan de vaciar la mencionada bóveda en el cuarto plano de ella. Para empeorar la dinámica, quizás porque uno no es del todo haragán sino que encima conserva rasgos de compromiso con las labores asalariadas, éstas son empujadas desde los planos profundos hacia la superficie, con una fuerza igual a la de las proyectos deseados que van siendo desalojados. Un principio de Arquímedes nefasto para el tiempo libre. La adaptación al nuevo trabajo viene problemática.","url":"https://eldiegoefe.github.io/misterios-de-la-temporizacion.html","title":"Misterios de la temporización"},{"tags":"tecnicismos","text":"Es una tarea habitual al editar texto el buscar caracteres o palabras. Una de las opciones que ofrece Emacs es la función de búsqueda incremental, que tiene varias formas de inicio. Comando Por defecto Ergoemacs Descripción isearch-forward C-s C-f solicita los caracteres a buscar isearch-forward-symbol-at-point M-s . F8 . busca el símbolo bajo el cursor isearch-forward-word M-s w F8 w busca palabras isearch-forward-symbol M-s _ F8 _ busca símbolos (símbolos según Emacs) Al ejecutar uno de estos comandos se entra dentro de un modo en el cual se puede repetir la misma búsqueda o modificarla (en el minibuffer aparece información relativa a este modo, por ejemplo tras ejecutar isearch-forward aparece I-search: para que el usuario ingrese las letras que desea buscar). Se dispone de un gran número de opciones y atajos de teclado, válidos mientras se mantiene este modo de búsqueda. Entre los más habituales: RET (Enter): sale del modo de búsqueda, el cursor queda en la última locación encontrada C-g: interrumpe el modo, el cursor vuelve a la posición inicial C-f: repite la misma búsqueda hacia adelante C-r: repite la misma búsqueda hacia atrás M-s c: conmuta la sensibilidad a mayúsculas M-s w: conmuta al modo de búsqueda de palabra completa Hay muchas más opciones que se pueden consultar ejecutando M-x describe-function isearch-forward o directamente C-h f isearch-forward .","url":"https://eldiegoefe.github.io/busquedas-con-isearch-en-emacs.html","title":"Búsquedas con isearch en Emacs"},{"tags":"tecnicismos","text":"El sitio oficial de Pelican, con sus intrucciones de instalación y uso es este . Originalmente, este post estuvo basado en las instrucciones de Nicholas Tan Jerome . El post original pueden verlo en este enlace Por un lado vamos a configurar un entorno virtual de Python donde vamos a instalar Pelican, y por otro lado vamos a utilizar un directorio subdividido en un subdirectorio para nuestro blog y dos subdirectorios más para herramientas de Pelican (themes y plugins de Pelican). Supongo que GIT ya está instalado en el sistema. Instalación de Pelican en un entorno virtual Vamos a utilizar virtualenvwrapper para este propósito (tengo pendiente escribir el tutorial correspondiente). Creamos un entorno llamado blogs y dentro de él instalamos Pelican y también otras herramientas que utilizaremos posteriormente: $ mkvirtualenv blogs (blogs)$ pip install pelican (blogs)$ pip install beautifulsoup4 (blogs)$ pip install pelican-youtube (blogs)$ pip install ghp-import Estructura de directorios Vamos a utilizar un directorio que va a contener tanto nuestro blog como otros subdirectorios con algunas herramientas de Pelican. La organización será la siguiente: misBlogs/ eldiegoefe.github.io/ pelican-themes/ pelican-plugins/ Para ello debemos ejecutar las siguientes instrucciones (supongo que el entorno virtual sigue activado, lo cual se refleja en el prompt): (blogs)$ mkdir ~/misBlogs (blogs)$ cd ~/misBlogs (blogs)$ git clone --recursive https://github.com/getpelican/pelican-themes (blogs)$ git clone --recursive https://github.com/getpelican/pelican-plugins Aún falta crear el directorio para los archivos del blog. Para ello creamos un repositorio vacío en GitHub. Este sitio ofrece la dirección nombreUsuario.github.io justamente para alojar blogs personales. Asumo que ya sabés crear el repositorio (en mi caso el nombre del repositorio debe ser: eldiegoefe.github.io) y que GIT no te resulta completamente ajeno, de lo contrario este tutorial parecerá sánscrito avanzado. El repositorio recientemente creado debe clonarse en el directorio que fijamos anteriormente, si seguimos de la secuencia de comandos anteriores sólo debemos tipear: (blogs)$ git clone https://github.com/nombreUsuario/nombreUsuario.github.io En el archivo .gitignore (dentro del directorio ~/misBlogs/nombreUsuario.github.io) se deben colocar todos los archivos que no se desea incluir en el control de versiones. Por ejemplo, mi .gitignore se ve así (ya que descarta distintos tipos de archivos de backup): *~ *# *.pid .#* Por otra parte, al inicializar el repositorio ya quedó creada la rama master pero vamos a crear también otras dos ramas llamadas source y gh-pages . La rama source contendrá los archivos de configuración de Pelican para nuestro sitio, los archivos de texto con el contenido de cada post que vayamos escribiendo, etc. La rama gh-pages es necesaria para el procedimiento de generación del sitio estático. Creamos entonces ambas ramas y cambiamos hacia source : (blogs)$ cd nombreUsuario.github.io (blogs)$ git branch gh-pages (blogs)$ git branch source (blogs)$ git checkout source Ejecución inicial de Pelican Dentro de la recientemente creada rama source , dentro del directorio del sitio (nombreUsuario.github.io) se debe ejecutar por única vez la orden pelican-quickstart para que se generen los archivos de configurción de Pelican (va el guión entre las dos palabras): (blogs)$ pelican-quickstart Tras ese comando, y tras contestar todas las preguntas que aparecen, no solamente se guarda la configuración deseada (en los archivos pelicanconfig.py y publishconf.py ), sino que se generan todos los archivos que Pelican necesita (incluso dos directorios nuevos: content y output). Una de las preguntas, sobre el site url debe contestarse con: http://nombreUsuario.github.io El contenido de pelicanconf.py tras responder a las preguntas de pelican-quickstart y además editar manualmente el archivo para completar los datos, queda así: #!/usr/bin/env python # -*- coding: utf-8 -*- # from __future__ import unicode_literals AUTHOR = u'El Diego Efe' SITENAME = u'Certezas Dudosas' SITEURL = 'http://nombreUsuario.github.io' TIMEZONE = 'America/Argentina/Buenos_Aires' DEFAULT_LANG = u'es' # Feed generation is usually not desired when developing FEED_ALL_ATOM = None CATEGORY_FEED_ATOM = None TRANSLATION_FEED_ATOM = None # Blogroll LINKS = (( 'Pelican' , 'http://getpelican.com/' ), ( 'Python.org' , 'http://python.org/' ), ( 'Jinja2' , 'http://jinja.pocoo.org/' ), ( 'You can modify those links in your config file' , '#' ),) # Social widget SOCIAL = (( 'Twitter' , 'http://twitter.com/nombreUsuario' ), ( 'Github' , 'https://github.com/nombreUsuario' ), ( 'Facebook' , 'http://www.facebook.com/nombreUsuario' ), ( 'Google+' , 'https://plus.google.com/+DiegoEfe' ), ) DEFAULT_PAGINATION = 10 # Uncomment following line if you want document-relative URLs when developing #RELATIVE_URLS = True Y el contenido de publishconf.py queda así: #!/usr/bin/env python # -*- coding: utf-8 -*- # from __future__ import unicode_literals # This file is only used if you use `make publish` or # explicitly specify it as your config file. import os import sys sys . path . append ( os . curdir ) from pelicanconf import * SITEURL = 'http://nombreUsuario.github.io' RELATIVE_URLS = False FEED_ALL_ATOM = 'feeds/all.atom.xml' CATEGORY_FEED_ATOM = 'feeds/ %s .atom.xml' DELETE_OUTPUT_DIRECTORY = True # Following items are often useful when publishing #DISQUS_SITENAME = \"\" #GOOGLE_ANALYTICS = \"\" Escribir el primer post Las entradas de nuestro nuevo blog se escriben como un archivo de texto plano con el formato de Markdown o restructuredText, y se deben guardar con la extensión correspondiente (.md o .rst) dentro del directorio content. De este modo, cuando emita el comando para generar el sitio habrá un contenido (sino el blog queda vacío). Por ejemplo, podemos guardar el archivo 2015-05-20-prueba.rst con el siguiente contenido: :title: Primera prueba :date: 2015-05-20 10:00 :category: ejemplos :tags: ejemplo, tutorial, pruebas, blog :author: El Diego Efe :excerpt: Solo una prueba Mi titulo ========= Hola. Este es mi primer post. Chau. Generación del blog Ahora que el blog ya está configurado y tiene un contenido vamos a generar el sitio y chequear cómo se ve. La generación (que procesa todos los archivos del directorio content , produce los archivos html y los aloja en el directorio output ) se logra con make html y luego se ejecuta un servidor local con make serve que permite visitar el blog en la dirección http://localhost:8000 : (blogs)$ make html (blogs)$ make serve En la primera corrida puede haber problemas de formato, sin embargo tras subir el sitio al repositorio externo, se corrobora que la página carga bien. El servidor se detiene tecleando Ctrl-C Ctrl-C en el terminal. Regeneración del sitio ante ediciones sucesivas En vez de usar make html y make serve , que se vuelve tedioso si uno realiza muchas modificaciones en sus posteos es utilizar make regenerate en vez de make html . Con make regenerate , cualquier edición de los posts (ya sea el agregado de nuevos archivos .md o .rst , tanto como la modificación de los existentes) se refleja inmediatamente en cómo se ve el sitio desde el servidor local. Para usarlo se requiere prestar atención. Activar el entorno virtual blogs en dos terminales distintos. A continuación lo muestro con el uso de pyenv, aunque no haya explicado nada antes sobre esta alternativa de manejo de virtualenvs. Vayamos al grano, en un terminal ejecutar esto: $ pyenv activate blogs (blogs)$ cd ~/blogs/eldiegoefe.github.io/ (blogs)$ make regenerate En otro terminal, hacer lo propio: $ pyenv activate blogs (blogs)$ cd ~/blogs/eldiegoefe.github.io/ (blogs)$ make serve De este modo el sitio se regenera ante cualquier edición de su contenido, y permanece accesible en http://localhost:8000 (no hay que olvidar que el navegador debe recargar las páginas editadas para ver los cambios). Tengan presente que si hay algún error, el regenerate finaliza indicando cuál fue el problema (lo muestra en el terminal) y por más que actualicemos la página en el navegador no veremos cambios. Habrá que corregir los errores de las páginas que estemos modificando y luego volver a ejecutar el make regenerate . Subir el sitio al repositorio remoto Una vez que estamos conformes con el contenido vamos a agregar todo al branch source : (blogs)$ git add . (blogs)$ git commit -m \"Commit inicial de la rama source\" De este modo nuestros archivos ya quedaron almacenados en la rama source de nuestro repositorio local. Pero lo que se verá al acceder al blog, es lo que esté en la rama master , así que hay que copiar allí las páginas html de la carpeta output. Nicholas propone usar un script llamado ghp-import para facilitar esa tarea (que ya instalamos en la parte inicial de este tutorial). Este script exporta el contenido de la carpeta que se menciona en la linea de comandos (al ejecutarlo) hacia la rama \"gh-pages\" (que también ya creamos anteriormente, porque somos gente muy prevenida…). Finalmente se debe hacer un merge desde la rama master con la rama gh-pages y subir todo al repositorio externo. Estos son los pasos mencionados: (blogs)$ ghp-import output (blogs)$ git checkout master (blogs)$ git merge gh-pages (blogs)$ git push --all Hay que esperar un rato hasta que el sitio esté accesible (sólo la primera vez, las siguientes actualizaciones que se hagan permiten acceder al nuevo contenido inmediatamente). GitHub pregunta el nombre de usuario y la contraseña al hacer el push al repositorio online. La página para acceder al blog es http://nombreUsuario.github.io Agregado de posts En sesiones posteriores, los nuevos posts se escriben con restructuredText (o Markdown) y se deben guardar en el directorio content , en la rama source . Tampoco hay que olvidarse de activar el entorno virtual correcto para que funcione Pelican y las órdenes como make html y make serve . $ source /usr/local/bin/virtualenvwrapper.sh $ workon blogs (blogs)$ cd ~/misBlogs/nombreUsuario.github.io/ (blogs)$ git checkout source (blogs)$ cd content Con las órdenes anteriores se activó el entorno virtual, nos aseguramos de estar en la rama source y llegamos al directorio content que es donde debemos almacenar los archivos de contenido ( .rst o .md ) Generamos el blog y arrancamos el servidor local con: (blogs)$ make html (blogs)$ make serve Visitamos el blog con nuestro navegador en la dirección http://localhost:8000 Si no estamos conformes detenemos el servidor local desde el terminal con Ctrl-c Ctrl-c y luego de editar los cambios volvemos a ejecutar make html y make serve (o utilizamos la alternativa de make regenerate y make serve en dos terminales distintos, como expliqué antes). Una vez que estemos conformes con el contenido tenemos que ejecutar las siguientes órdenes para subir el blog al repositorio externo: (blogs)$ git add . (blogs)$ git commit -m \"mensaje del commit\" (blogs)$ ghp-import output (blogs)$ git checkout master (blogs)$ git merge -X theirs gh-pages (blogs)$ git push --all Atención: navegación offline Para que la navegación offline sea posible se debe editar el archivo pelicanconf.py y comentar/descomentar la linea RELATIVE_URLS = True . Si la linea está habilitada (sin la marca de comentario # ) entonces se puede navegar sin contratiempos en el servidor local ( http://localhost:8000 ), de lo contrario los enlaces nos llevarán fuera del servidor local y se cargarán las páginas alojadas en el repositorio remoto. Pero si usamos esta opción de las direcciones (url) relativas, para que después no haya inconvenientes en el sitio externo ( http://nombreUsuario.github.io ), se debe deshabilitar esta opción antes de subir el sitio. En otras palabras, no hay que olvidar de generar el sitio con make html o make regenerate con la linea RELATIVE_URLS = True deshabilitada, antes de subir nuestro blog al repositorio remoto. De lo contrario, herramientas como Disqus (que se utiliza para gestionar comentarios en cada entrada) tendrán dificultades de funcionamiento. Problemas con GitHub Puede suceder que tras esperar media hora, luego de subir el sitio, siga dando un mensaje de error (404) al intentar visitarlo en su dirección final. Aparentemente esto puede evitarse si la subida se realiza mediante SSH en vez de hacerlo mediante HTTP . Esto lo advertí en las instrucciones de Leonard Axelsson . Las instrucciones para generar las llaves SSH ( SSH keys) están en esta ayuda de GitHub , mientras que el cambio propiamente dicho se explica en Changing a remote's URL , también en GitHub.","url":"https://eldiegoefe.github.io/actualizacion-de-las-instrucciones-para-armar-un-blog-con-pelican-y-github.html","title":"Actualización de las instrucciones para armar un blog con\nPelican y GitHub"},{"tags":"tecnicismos","text":"To read this entry in english: click here Leo bastantes blogs sobre Emacs desde que empecé el viaje de aprender a usarlo. Hay tutoriales buenísimos para principiantes y también páginas destinadas a usuarios más avanzados. Sin embargo, en la mayoría de los sitios se repite una costumbre que desestima una de las ventajas que tiene el Todopoderoso Editor (su capacidad de personalización): las instrucciones para hacer tal o cual cosa suelen aparecer con sus atajos de teclado por defecto, como si fuese invariable que abrir un archivo (visitarlo) se haga con C-x C-f, o como si los únicos keybindings para ir a los extremos de la linea donde se ubica el cursor sean C-a y C-e, o como si realizar búsquedas incrementales requiera indefectiblemente teclear C-s. En mi caso, las combinaciones de tecla para estas funciones, entre muchas otras, están personalizadas, sin que muchas veces funcionen los atajos por defecto (por ejemplo abro los archivos con C-o, muevo el cursor a los extremos con M-h y S-M-h, y activo las \"búsquedas incrementales\" con C-f). Mi sugerencia a toda la comunidad de educadores de Emacs es que en vez de referirse a las combinaciones de tecla, en sus tutoriales y comentarios coloquen siempre los nombres de las funcionen que sugieren utilizar. Por ejemplo, en vez de escribir C-s deberían hablar de isearch-forward, o en vez de C-a sería mejor indicar el comando move-beginning-of-line. De esta manera, uno puede seguir las instrucciones paso a paso utilizando execute-extended-command (que generalmente se ejecuta con M-x, aunque en mi instalación eso sucede con M-a). Si uno necesita saber cuál es la combinación de teclas asociada a una función (a la función que promueve el tutorial) puede ejecutar describe-function para tener un resumen de la misma y ver sus keybindings.","url":"https://eldiegoefe.github.io/sugerencia-respecto-de-los-tutoriales-de-emacs.html","title":"Sugerencia respecto de los tutoriales de Emacs"},{"tags":"tecnicismos","text":"Para leer este texto en español: click aca I read many Emacs blogs since I started the trip of learning it. There are great beginner's tutorials and also webpages for more advanced users. However, there's a habit I find repeatedly on the majority of sites which goes against one of the Almighty Editor advantages: instructions usually refer to default keybindings, like it was invariant that you visit files only with C-x C-f, or like the only admited shortcuts to the beginning and ending of the current line where C-a and C-e, or if the incremental search inevitable required to type C-s. In my case, keybindings for all these functions and many others are personalized, and the default ones are disabled (I visit files with C-o, move the point to the beginning or end of the line with M-h and S-M-h, and activate incremental searches with C-f). My advice to all the Emacs educator's community is to refer and cite the suggested function names in tutorials and comments, instead of using their default keybindings. For example, you should talk about isearch-forward instead of writing C-s; it is better to write the whole move-beginning-of-line function name instead of only refering to C-a. This way, it is possible to follow step by step instructions using execute-extended-command (generally executed with M-x, although in my setup that happens with M-a). Then, if you need to know the keybinding to a function, just execute describe-function to get its abstract and see its keybindings.","url":"https://eldiegoefe.github.io/suggestion-about-emacs-tutorials.html","title":"Suggestion about Emacs tutorials"},{"tags":"politica","text":"Los docentes universitarios, cuya realidad conozco de cerca, reclaman desde hace mucho tiempo algo así como la canasta familiar para el cargo \"full time\" de menor jerarquía. El \"full time\" o \"dedicación exclusiva\" es un trabajo que ocupa 40 horas a la semana. Y la pirámide, en orden ascendente de grossitud, comienza con el auxiliar de primera categoría, y sigue con el jefe de trabajos prácticos, el profesor adjunto, el profesor asociado y el profesor titular. Por ende, el reclamo se traduce como un salario equivalente a la canasta familiar para el auxiliar de primera que trabaja 5 días de 8 horas . Cada escalón jerárquico por encima del auxiliar recibe un 20% más de salario. Y la antigüedad llega a aportar un 120% extra para los que trabajaron más de 24 años. Salarios full time de bolsillo (docentes universitarios) Cargo Recién iniciado Con 10 años de antigüedad Auxiliar de Primera $8.288 $10.360 Jefe de Trabajos Prácticos $9.769 $12.211 Profesor Adjunto $11.251 $14.063 Profesor Asociado $12.732 $15.915 Profesor Titular $14.214 $17.767 La canasta familiar es una expresión que aún siendo muy usada carece de un significado completamente definido y compartido, porque además suele subdividirse en variantes como canasta básica , canasta total , canasta alimentaria . Por otra parte este concepto se refiere a un ente que parece un chiste, considerando la diversidad de organizaciones familiares existentes: la \"familia tipo\" está constituida por una mamá, un papá y dos hijos en edad escolar. El problema es que aún existiendo familias conformadas de este modo pueden vivir realidades económicas muy disímiles incluso si pertenecen a un mismo segmento de clase social. ¿Son propietarias o pagan alquiler? ¿Poseen obra social con buena cobertura o no? ¿Envían a sus hijos a escuelas públicas o privadas? Y así podríamos seguir… Para poder estimar números algunas instituciones (como ciertos gremios) suponen que la familia tipo es propietaria, y cuenta con el hospital y la escuela públicos para atender sus necesidades de salud y educación. Sin embargo, la absoluta mayoría de los trabajadores que conozco no confían en la atención hospitalaria, carecen de familia tipo , si tienen hijos frecuentemente los mandan a escuelas privadas (en lo posible no-confesionales) y algunos son propietarios, mientras que otros alquilan. Plantear un salario en base a estas realidades es bastante complicado. Si nos mantenemos en los límites del capitalismo (ya que la revolución socialista viene demorada, empobrecida, desmitificada, aborrecida), el trabajador que siempre es expropiado de una porción de lo que produce durante sus horas de trabajo, debería ser capaz de reproducir su fuerza de trabajo. Y no en cualquier condición, sino que a través de una vida que les permita poner en práctica sus talentos, desarrollar sus virtudes, disfrutar de los resultados de sus esfuerzos (salvo que aceptemos el punto de vista de los patrones). A mi me parece que esto puede interpretarse económicamente así: un trabajador debe ser capaz de comprar una vivienda para sí mismo, muebles, electrodomésticos y un medio de movilidad con los ahorros correspondientes a un plazo de 20 años. una porción de su salario debe atender sus necesidades sanitarias y educativas otra parte del sueldo se consumirá en alimentos, vestimenta, servicios de telefonía e internet, y todos los elementos indispensables que cotidianamente necesita para vivir sin lujos ni miserias. finalmente una porción se debe destinar a la cultura, los viajes, el aprendizaje de nuevas habilidades, recreación, pasatiempos, proyectos productivos, ahorros, etc. La constitución de una familia no es entonces un requisito para calcular un salario, sino la vida elegida por cada trabajador. Esto no implica que esté vedada la familia como opción de vida, dado que puede conformarse con dos trabajadores que, mediante la suma de sus ingresos, puedan afrontar los mayores gastos familiares (una casa más grande, atender las necesidades de sus niños, etc). Pensarlo así impide que los dueños de la torta puedan reducir el salario de cada trabajador a la mitad de lo que una \"familia tipo\" supuestamente necesita (puesto que el otro trabajador de la pareja debería aportar la mitad restante). De paso, con esta concepción del salario mínimo, se elimina la noción del hombre que mantiene a su mujer y sus hijos, una concepción retrógrada de organización familiar. ¿Qué deparará el ejercicio de anotar en una lista qué constituye realmente cada uno de los gastos enumerados anteriormente? Quizás permita palpar el tipo de vida que deseamos: ¿pretendemos vivir en una casa espaciosa y alejada o en un departamento pequeño de un barrio céntrico? ¿Cuánto quisiéramos destinar a libros y música no pirateados? ¿Nos importa invertir en un guardarropas extenso? ¿Preferimos destinar el dinero a asegurar una computadora de buenas prestaciones? ¿Qué destinos pretendemos conocer? El concepto de salario mínimo, vital y móvil se acerca un poco más (que la media canasta familiar) a esta idea. Por definición es la menor remuneración que debe percibir en efectivo el trabajador (sin cargas de familia) por su jornada laboral, el cual debe asegurarle la satisfacción de sus necesidades básicas: alimentación, vivienda, educación, vestuario, asistencia sanitaria, transporte y esparcimiento, vacaciones y cobertura previsional; y debe ajustarse periódicamente de acuerdo a las variaciones del costo de la vida. Los gremios deberían reclamar por el salario mínimo, vital y móvil, y efectuar cálculos realistas para estimarlo. El costo de la vivienda ¿Cuánto debe ganar un profesional? Mi respuesta preferida tiene mayoritariamente en cuenta el costo de adquirir una vivienda. Ya sea un médico del hospital público, un docente de una universidad nacional, un investigador de alguna rama de la ciencia o un maestro de escuela, todos deberían ser capaces de adquirir una vivienda en buen estado, y de unos cuantos metros cuadrados. En un informe del gobierno de la ciudad de Buenos Aires se cita el valor promedio del metro cuadrado (para viviendas usadas de unos 70 m2) en unos 2000 dólares. Multiplicando estos valores hallamos que una vivienda de esas características cuesta 140 mil dólares. El ingreso promedio de una pareja de profesionales (los docentes universitarios deberían entrar en esta categoría) en diciembre de 2014 es de unos 30000 pesos (con un valor del dolar informal cercano a los 14 pesos, estos dos salarios sumados corresponden a unos 2000 dólares, es decir 1000 dólares cada uno). Con estos valores, el índice de accesibilidad a un préstamo hipotecario que permita adquirir una vivienda como la citada se encuentra en el 33% (vean el gráfico siguiente). ¿Qué quiere decir esto? Que el salario sumado de ambos es un tercio del que requieren los bancos para otorgar el préstamo del 75% del valor de la vivienda (con lo cual además necesitan 35000 dólares en ahorros). En otras palabras, el crédito es inaccesible, aún para una pareja de profesionales con ingresos promedio para su segmento social. Con el dato anterior respondemos cuál es el salario mínimo que deberían ganar los profesionales del ámbito público, los mencionados médicos del hospital, los docentes de la universidad, los maestros de escuela, los investigadores de las instituciones estatales: sueldos que no desciendan por debajo de los 3000 dólares. En cambio el gobierno propaga la idea de que un trabajador que gana 15000 pesos es un potentado y le cobra impuesto a las ganancias.","url":"https://eldiegoefe.github.io/cuanto-debe-ganar-un-docente-un-medico-un-investigador.html","title":"¿Cuánto debe ganar un docente, un médico, un investigador?"},{"tags":"blog","text":"Tengo un amigo que es un genio. Levantó paredes, soldó parrillas y rejas, instaló cañerías de gas natural. Y aún así, con la tremenda carga de los oficios comiéndole el tiempo y extenuándole los músculos a cambio de la subsistencia, el artista encontró el papel y las tintas para delinear mundos y personajes con una maestría que cuesta convencerse de que habita cerca, porque los genios me parecen muy lejanos y Sebastián Cabrol vivió siempre a cuatro o cinco cuadras de mi casa, en Paraná. Seba Cabrol puede poner en blanco y negro sus pesadillas. El horror puebla sus páginas de comics y a mi, que no me gusta el terror y el sufrimiento, me fascina. Por ahí dibuja algún zombie clásico por encargo, o porque se le canta, pero son esos seres de las pesadillas profundas, híbridos que son al mismo tiempo humanos, hongos, y moho, en los cuales late una conciencia maligna o un sufrimiento antiguo, los que dominan sus cuadros y mi fascinación. Empíricamente comprobamos que el capitalismo no nos lleva a un mundo justo. Intentar vivir de la historieta, entre otras formas del arte, parece ser una aventura de calibre épico, como lanzarse a cruzar en canoa un mar invadido de sirenas vengativas y pulpos gigantes y venenosos. Quizás tampoco nuestra forma de construir el socialismo nos facilite alguna barca más segura. Cuando pienso en el inmenso talento, inteligencia y dedicación con que Seba desarrolla su maestría maldigo nuestra incapacidad para acercarnos a esa organización en la cual sus creaciones puedan fluir en papel ilustración a todas las bibliotecas que reclaman criaturas peligrosas e historias fantásticas, y así nutrirse él y también nosotros. Espectros, cuerpos autofagocitantes, pirámides y contraluces fantasmagóricos, escenarios cotidianos permeados por el enigma. El universo de Cabrol es capaz de mostrarnos cómo se percibe una realidad expandida, o quizás, cómo nuestra visión de tres dimensiones y tiempo lineal es la única fantasía, puro ocultamiento de la realidad monstruosa en la que frágil y engañosamente vivimos mientras nos acechan miríadas de seres escondidos en los puntos ciegos de nuestros sentidos. VIDEO : Un acercamiento al dibujante Sebastián Cabrol. Una aproximación, oscura, sensible, sobre su vida y obra. Realización: Diego Arandojo. Video del canal de youtube morcilleadas , dedicado a la historieta y sus hacedores. Pueden visitar el blog del Seba Cabrol haciendo click en este enlace .","url":"https://eldiegoefe.github.io/los-garabatos-de-cabrol.html","title":"Los garabatos de Cabrol"},{"tags":"blog","text":"Hace algún tiempo escribí sobre el modo de poner en marcha un blog usando Pelican . Con un poco más de experiencia vuelvo a comentar algunas variaciones, como para más adelante condensar los pasos en un artículo corregido y aumentado (o disminuido, dado que la idea es simplificar). Usar entornos virtuales de Python es muy sencillo, tanto que me acostumbré (y hasta disfruto) de realizar instalaciones de diversos programas usándolos. Entre ellos, Pelican. La ventaja es que queda un entorno encapsulado que no se modifica con las actualizaciones del sistema. Se puede tener, por ejemplo, un entorno con Python 3 mientras en el sistema está instalada la versión 2. 1. Instalación del motor de los entornos virtuales Para armar uno de estos entornos es necesario contar con python-virtualenv en el sistema. En Arch y Manjaro: $ sudo pacman -S python-virtualenv Asegurarse de que también python-pip está instalado, porque se necesita para el próximo paso: $ sudo pacman -S python-pip Manipular entornos virtuales se puede hacer con python-virtualenv sin más, pero es más fácil aún con virtualenvwrapper , que puede instalarse con pip (a nivel del sistema): $ sudo pip install virtualenvwrapper 2. Creación de un entorno virtual Para crear un entorno primero nos aseguramos de ejecutar virtualenvwrapper: $ source /usr/bin/virtualenvwrapper.sh Alternativamente, si este script estuviese en el PATH hubiese bastado con ejecutar: $ virtualenvwrapper Luego creamos el entorno virtual, con un intérprete de Python igual al que se ejecuta por defecto en nuestro sistema: $ mkvirtualenv nombredelentorno Por defecto (si no se aclara otro directorio), los distintos entornos que se vayan creando se almacenan en ~/.virtualenvs/ . La página de referencia de virtualenvwrapper es muy buena para consultar todas las opciones de los comandos (mkvirtualenv, cdvirtualenv, etc). Si, por ejemplo, queremos especificar una versión de Python en particular, primero nos aseguramos de saber dónde se encuentra ésta: $ whereis python3 /usr/bin/python3 La instalación de un nuevo entorno virtual con esta versión se ejecuta así: $ mkvirtualenv --python = /usr/bin/python3 nombredelentorno Como resultado de la ejecución de mkvirtualenv , además de instalarse, el entorno virtual se activa, con lo cual el prompt del shell pasa a verse así: (nombredelentorno)$ Al reiniciar el sistema, para activar el entorno hay que ejecutar primero virtualenvwrapper y luego usar el comando workon : $ source /usr/bin/virtualenvwrapper.sh $ workon nombredelentorno 3. Instalación de Pelican y otros módulos Los pasos finales son muy sencillos (ejecutarlos sin sudo para que la instalación ocurra dentro del entorno virtual y no a nivel del sistema): (nombredelentorno)$ pip install pelican (nombredelentorno)$ pip install beautifulsoup4 (nombredelentorno)$ pip install pelican_youtube (nombredelentorno)$ pip install ghp-import 4. Instalación de Plugins de Pelican Algunos temas de Pelican requieren el uso de plugins que se instalan en el directorio desde donde se ejecute la orden siguiente: $ git clone --recursive https://github.com/getpelican/pelican-plugins 5. Desactivar el entorno virtual Cuando no hay más por hacer dentro del entorno virtual, éste se desactiva cerrando el terminal o ejecutando: (nombredelentorno)$ deactivate","url":"https://eldiegoefe.github.io/mas-sobre-blogs-con-pelican.html","title":"Más sobre blogs con Pelican"},{"tags":"blog","text":"Usar el mouse en digiKam puede producir caspa. Cada vez que hago un click para seleccionar un archivo abre la vista de previsualización (como al apretar F3). Este comportamiento no corresponde exclusivamente a digiKam, sino al escritorio (en mi caso KDE ). Para solucionarlo (en KDE ) hay que ir a Preferencias del Sistema y en la sección de Hardware entrar al panel de Dispositivos de Entrada . En la siguiente imagen puede verse el lugar donde seleccionar la opción: Una doble pulsación abre archivos y carpetas (una sola pulsación selecciona iconos) . Selección de opciones en la configuración del escritorio de KDE para facilitar el uso de digiKam","url":"https://eldiegoefe.github.io/molestos-clicks-del-mouse-digikam-tips.html","title":"Molestos clicks del mouse (digiKam tips)"},{"tags":"blog","text":"Crear albumes en digiKam tiene un inconveniente que un usuario que intenta emplearlo descubre rápidamente. Es un detalle que no está bien documentado en los tutoriales que encontré en la web. El problema es el siguiente: sólo van a poder crear álbumes dentro del único álbum existente, el cual aparece tras el procedimiento de configuración básica, cuando digiKam se ejecuta por primera vez. Probablemente este álbum se llame \"/home/nombreusuario/Imágenes\", como en la figura siguiente. Al iniciar el uso de digiKam hay probablemente una sola colección (y un mensaje de bienvenida muy informativo pero medio fiero, con fondo azul). Para crear un álbum las instrucciones son sencillas: hay que ir al menú Album y elegir Nuevo (Ctrl+N)… , o también click con el botón derecho sobre el álbum dentro del cual queremos crearlo. El problema radica en que sólo nos está permitido crear nuevos álbumes dentro del único ya existente . Si queremos crear uno que descienda directamente de \"Álbumes\", con la misma jerarquía que el que aparece por defecto (\"/home/nombreusuario/Imágenes\"), vamos a descubrir que la mencionada opción ( Nuevo ) en el menú se puede ver pero aparece en gris, no se puede elegir, tampoco funciona el atajo de teclado (Ctrl+N) y si tratamos con el ratón vemos que la opción tampoco está disponible en el menú contextual (sólo aparece una opción —Álbum— que en realidad es el título de este menú contextual): Un detalle ampliado de la ventana anterior. No se encuentra la opción, en el menú contextual, de agregar un nuevo álbum. Al hacer click derecho sobre Álbumes aparece el menú contextual de la figura, que sólo posee un título (Álbumes). ¡Qué difícil es explicar las cosas si todo se llama igual! En digiKam hay una diferencia de nomenclatura entre Colecciones y Álbumes , que no se explícita (a la colección a veces la nombran como \"álbum raíz\" o \"root album\", y en las opciones aparece también traducido al castellano como Temas ), y que ahora les comento. Las colecciones son los recipientes donde se almacenan los álbumes; se corresponden físicamente con los directorios principales dentro de los cuales se ubicarán las fotos en subálbumes. El programa no nos deja crear álbumes dependientes de \"Albumes\" porque antes debemos crear las \"Colecciones\". Ya tenemos creada una colección sin habernos dado cuenta y es la que corresponde a /home/nombreusuario/Imágenes, pero si tenemos fotos con las cuales queremos trabajar, y no deseamos moverlas físicamente a este directorio (copiarlas o moverlas dentro de este directorio, da igual), entonces debemos crear una colección por cada carpeta donde tengamos nuestros archivos de imágenes (por ejemplo en el directorio /home/nombreusuario/fotografias o en un subdirectorio de un disco externo). Esto no es necesario cuando las fotos se encuentran en subdirectorios dentro de la colección existente. Vale aclarar que digiKam refleja el contenido de las colecciones y subálbumes como un navegador de archivos, y actualiza el contenido de los mismos inmediatamente si con un programa externo copiamos o movemos fotos desde y hacia los directorios de la colección. Para crear las colecciones los pasos son muy sencillos. Hay que dirigirse al menú \"Settings/Configure digiKam…\" y allí, en el panel de la izquierda, seleccionar el segundo icono desde arriba: \"Temas\" (en inglés es \"Collections\"). Una sola colección existe inicialmente, la que se creó (inadvertidamente) cuando atravesamos la configuración inicial de digiKam, durante su primera corrida. Obviamente hay que presionar el botón \"Añadir colección\". Por colecciones locales se refiere a aquellas que estén dentro del directorio personal del usuario (por ejemplo ~/fotografias). Las colecciones en medios extraibles serán para elegir colecciones en discos externos, pendrives, DVDs, etc. Las colecciones en redes compartidas sólo tendrán sentido en computadoras que se encuentren conectadas a una red local. Aquí les muestro cómo queda este menú de configuración una vez creada la colección /home/fotografo/fotografias (que se sintetiza como ~/fotografias): Configuración luego de haber añadido una colección (o \"álbum raíz\"). Volvemos a la pantalla principal de digiKam y vemos que apareció la nueva colección (fotografias) y al hacer click derecho con el mouse vemos el menú contextual, ahora completo con la opción de crear nuevos álbumes (dependientes de esta colección). Colección agregada y menú contextual. A continuación les muestro otra pantalla con algunos álbumes de muestra. Álbumes y fotografías de ejemplo. Si abren el administrador de archivos (que depende de la distribución de linux y el escritorio que usen, en KDE suele ser dolphin) verán una estructura idéntica de directorios: cada álbum es una carpeta \"física\". Cambio de idioma de digiKam Un último tip : se pueden elegir los idiomas en que se presenta digiKam en el menú de ayuda (Ayuda/Cambiar el idioma de la aplicación…). Es una opción útil, por ejemplo, para seguir un tutorial de la web que no está en español.","url":"https://eldiegoefe.github.io/crear-colecciones-y-albumes-en-digikam.html","title":"Crear colecciones y albumes en digiKam"},{"tags":"blog","text":"La fotografía digital nos permite sacar millones de fotos sin gastar un peso en rollos, con cámaras fotográficas compactas y profesionales, teléfonos celulares y tablets. Esto que parece una ventaja puede volverse en contra si uno se vuelve el loco de la instantánea, porque los archivos se acumulan por montañas y esta abundancia supera toda posibilidad de encontrar las imágenes que merecen ser vistas de nuevo. Muchas veces te encontrás sacando varias fotos iguales o muy parecidas para después elegir la mejor, cosa que nunca sucede. En unos momentos empiezo con el tutorial propiamente dicho, pero antes completo la idea de las dificultades. Hasta ahora guardaba mis fotos tratando de ordenarlas en carpetas utilizando un código de fecha y tema. Por ejemplo, si el 28 de octubre estuve flasheando en una convención de estrellas del porno, ponía las fotos en una carpeta de nombre: \"2014-10-28-convencion-estrellas-porno\" y dentro volcaba las fotos con el nombre que por defecto les asigna la cámara o el celular (algunos equipos incluyen la fecha en el nombre del archivo, otros no). El problema de esta estrategia es que una vez que se acumulan cientos y miles de imágenes, es difícil poder buscar cosas particulares que recordamos sobre ellas: por ejemplo, si en una fiesta equis fotografiamos una pipa que nos trajeron de regalo de Bolivia, salvo que recordemos en cuál fecha y ocasión ocurrió, vamos a tener que apelar a la suerte o al tiempo para recuperarla, dado que tampoco vamos a copiar nuestra foto en distintos directorios preventivamente (/2014-05-18-fiesta-loca, /objetos/pipas, etc) para facilitarnos las inciertas búsquedas que se nos ocurran en un futuro. A nuestro auxilio viene la posibilidad de incluir datos sobre la fotografía en el propio archivo de la imagen (los famosos \"metadatos\"). Entre la información que se puede almacenar en las propias fotos se cuenta no solamente lo que la cámara de fotos mega-inteligente ya graba automáticamente, sin intervención del fotógrafo (como el nombre de la propia cámara, la fecha, la apertura, la geolocalización si posee esta habilidad, etc) sino que permite guardar etiquetas (tags). Estas etiquetas se pueden gestionar con diversos programas de fotografías permitiéndonos armar con nuestra montaña de fotos una colección funcional de información que podemos ordenar, buscar, calificar, etc. Las etiquetas, junto con otras herramientas constituyen lo que se denomina Digital Asset Management (gestión de recursos digitales), o directamnte DAM . Estaremos construyendo con estas herramientas una biblioteca, con imágenes en vez de libros. Revisando la web encontré recomendaciones de software libre y sitios que vale la pena visitar, si nos interesan estas asuntos. El programa que empecé a usar se llama digiKam y para la gestión de la colección, complementa muy bien al programa que se puede usar para el \"revelado digital\", que es el Darktable (la versión Software Libre del estándar pago: Lightable). Con digiKam (y también con otros programas semejantes) se puede: asignar etiquetas y organizarlas jerárquicamente . En el post \" Cómo simplificar la clasificación de fotos comento algunos detalles a tener en cuenta. Esta es una de las formas principales para que nuestra colección se vuelva funcional. calificar imágenes usando un código de estrellas (entre ninguna y cinco). Uno puede usar la versión \"crítica hotelera\" y darle 5 estrellas a las mejores fotos y 1 estrella para las que están desenfocadas, mal encuadradas o son horripilantes por algún que otro motivo, y por ende candidatas al borrado total. Nada ni nadie impide asignarles a las estrellas el significado que uno quiera y usar ese sistema personal a piacere . asignar etiquetas de color . Hay diez colores disponibles, y a estos colores uno los considera con el significado que desee (ojo: solo sirve si uno después recuerda el criterio). Por ejemplo: rojo para las fotos privadas, azul para las que queremos compartir en las redes sociales, verde para las que deseamos imprimir, etc. También tiene una etiqueta de recogida , como puede verse en la siguiente pantalla, pero no me animo a descubrir para qué puede llegar a utilizarse. Una muestra a pantalla completa Se puede ver la foto junto con el panel de la derecha para asignarle descripción, calificación y etiquetas (click para ampliarla). En el panel de la derecha, en la porción inferior, se pueden seleccionar las estrellas y el color que se le asigna a la foto. También a través de este panel se edita el título y el pie de foto, y hay otras pestañas para asignar etiquetas. El resto del decálogo búsquedas simples . En un panel de facil acceso (en el de la izquierda, si ya están probando) hay varias pestañas para seleccionar fotos de acuerdo a la fecha, etiqueta, calificación de estrellas, color elegido, nombre de archivo, etc. visualización por calendario . Esta opción ya mencionada en el punto anterior es muy interesante. Las fotos se pueden ver organizadas por la fecha, sin importar en qué álbum se encuentren. Haciendo click sobre un día en el calendario se pueden ver las imágenes que se tomaron en esa fecha. búsquedas complejas . Combinaciones ( AND , OR , NOT ) de búsquedas simples, por ejemplo fotos etiquetadas como \"autoretratos\" y sacadas con una cámara \"Minolta\" entre el 23 y el 31 de febrero de 2014 y que no tenga asignada la etiqueta \"porno\". gente que busca gente . Automáticamente en los álbumes todas las fotos con rostros para etiquetar (y si fuera posible identificarlos adecuadamente). Esto ya no debería resultar tan raro porque las cámaras nuevas hasta son capaces de usar la sonrisa de una persona para disparar el obturador, con lo cual un algoritmo que encuentre rostros no debería llamarme la atención, pero a mi me sigue pareciendo una funcionalidad asombrosa. De todas maneras, mi experiencia hasta el momento es que funciona más o menos nomas, porque en algunos casos identifica rostros donde no hay (falsos positivos) o se le pasan por alto muchas caras. renombrar archivos usando metadatos . Esto es muy útil y conviene usarlo para darle nombres significativos a los archivos, que pueden venir con nombres insulsos como img_10032.jpg. En vez de eso la opción más sencilla y util es renombrarlos con la fecha y hora en que la foto fue tomada, de modo tal que pasen a llamarse 2014-10-31-22:02:38.jpg (estos datos están dentro del archivo, ya les dije, son los \"metadatos\"). De paso, con ese nombre, es muy fácil encontrar fotos duplicadas. Podría haber conflictos si tenemos distintas fotos del mismo instante, pero hay herramientas que permiten otorgarles nombres diferentes (el caso no es frecuente pero tampoco imposible, por ejemplo sucede cuando el sobrinito sopla las velas y todos los tíos toman ráfagas de imágenes, pudiendo salir varias en el mismo segundo). Para renombrar se pueden usar otros metadatos: el nombre de la cámara es bastante útil, y no es el único. atajos de teclado . Usar diferentes combinaciones de teclas asociadas a un gran número de tareas puede agilizar muchísimo el uso del programa y el flujo de trabajo. convertir formatos de archivos . Se pueden pasar las imágenes de un formato a otro, y de manera muy importante, convertir los archivos RAW en negativos digitales. Este decálogo se me ocurrió en unos pocos minutos, imaginen la cantidad de cosas que quedaron fuera y que potencian las posibilidades de uso de un software así. De hecho también se puede utilizar para subir imágenes a Flickr, Dropbox, GooglePlus, Facebook y otros servicios y redes sociales, pero si lo incluía en la lista anterior ya no podía referirme a ella como \"decálogo\". Como estoy aprendiendo a usarlo, es probable que arme algún tipo de tutorial para aquellas cosas que me parezcan importantes. De hecho ya empecé con este: \" Crear colecciones y albumes en digiKam . Nos vemos.","url":"https://eldiegoefe.github.io/organizar-una-coleccion-de-fotos-digitales.html","title":"Organizar una coleccion de fotos digitales"},{"tags":"blog","text":"Mi lista de sitios favoritos, clasificados por tema, los guardaba originalmente en Delicious y hace un año o dos pasé a Diigo . Guardar los favoritos exclusivamente en un navegador, sin copia en la nube, tiene varios inconvenientes: siempre hay que usar el mismo navegador o importar/exportar para sincronizar links entre distintos browsers, además si la computadora sufre un desperfecto se pueden perder para siempre. Al revisar los enlaces a webs de música (sitios de recomendación y de descarga de géneros no tan difundidos, páginas de radios y de artistas) veo que gran parte ya no existe o dejaron de ser actualizados. Habrá que buscar nuevos sitios con música balcánica, fusiones latinas, folklore americano y cosas así, y a grupos como Gogol Bordello, Modena City Ramblers, Les Ogres de Barback, Goran Bregovic, Paté de Fua, Juaneco y su combo, Susana Baca, Fulanas Trio, Imperio Maltés, entre otros muchos más. Los blogs, a diferencia de los sistemas de streaming de música (como Grooveshark o Spotify), tienen una presencia humana más directa, no son los inventores y programadores de algoritmo los que te recomiendan artistas basándose en tus selecciones previas o en algún tipo de invasión a tu privacidad online, sino que quien te pasea por nuevos sonidos es la sensibilidad o sordera de un tipo o una tipa que rastrea y elige tracks y también escribe sobre la música y los músicos, critica, arma biografías y ofrece datos que invitan a escuchar (o a salir corriendo). Algunos sitios se mueren porque sus promotores se quedan sin ganas de actualizarlos. Pero otros estiran la pata porque la industria discográfica combate la piratería y con ella a este tipo de sitios. ¿Por qué habrían de defender la difusión de canciones remotas, provenientes de lugares y tiempos cuyos discos no pueden vender? Y al mismo tiempo: ¿cómo podemos dejar que la invención y el talento se pierdan porque no producen billetes en los bolsillos de quienes sean los dueños de esos monstruos? Hay alternativas al modelo tradicional de distribución y de comercialización de música, uno de ellos es Flattr (que igual es poco probable que usemos con nuestros empobrecidos bolsillos tercermundistas), pero ahora no será motivo de mayores comentarios. Volviendo a los blogs de música… Siempre habrá melómanos en la web, tendré que buscarle reemplazos a los sitios que se fueron al cielo digital. ¿Tienen alguno para recomendar? ¿Se les ocurrió armar un blog así? Dejo mi vieja lista, al menos parcialmente, a continuación. Perduran: Awesome tapes from Africa . Perrerac . La canción, un arma de la revolución. A pesar del eslogan también recomiendan libros. Rebel sounds . Estos no se actualizan: Crisol de músicas (llegué por la música de True Blood ). Culebrón Timbal . Reino de Mondongo , discos raros y locos. Estos ya ni funcionan: Al sur del Río Bravo . El club de los magios . Electroplastas , blog de música basado en Spotify. Esa mujer hace gargaras con mis lagrimas (carga por un instante su último post pero inmediatamente se desvanece con propaganda). Gustavoeo , discos completos (para todo momento y ocasión…). Soy del montón .","url":"https://eldiegoefe.github.io/la-muerte-visita-a-la-musica-en-la-web.html","title":"La muerte visita a la música (en la web)"},{"tags":"politica","text":"Algunos artículos que hablan sobre el atentado a Charlie Hebdo y sus repercusiones: Je ne suis pas Charlie (Yo no soy Charlie). José Antonio Gutiérrez D. Conviene también leer los comentarios. Mi posteo anterior: Trifulca digital tras un ataque terrorista Blasfemias y pecados de omisión por Juan Rizzo en el blog Inocencia Pragmática y otras contraindicaciones. Génesis del terror por Atilio Borón en Página/12. ¿Son Asesinatos, y no en el buen Sentido de la Palabra? en el blog La Causa de Catón. ¡No, ‘Charlie Hebdo' no es racista! una nota de antes del atentado, firmada por Charb (una de las víctimas mortales) y Fabrice Nicolino en el diario El Mundo. ¿Quién era Charlie? . Dardo Scavino en Panamarevista. Je suis Charlie (sin peros) . Bruno Bimbi en un blog de TN .","url":"https://eldiegoefe.github.io/se-dice-de-charlie-hebdo.html","title":"Se dice de Charlie Hebdo"},{"tags":"politica","text":"Ayer ocurrió el atentado a la sede de la revista Charlie Hebdo, que me afectó bastante. Quizás porque me gusta el humor, y en particular el humor satírico, y porque me resulta completamente absurdo que hayan asesinado a alguien por unos dibujos burlones. Estuve leyendo artículos para saber más sobre el hecho y sobre las víctimas, y también recorrí muchos posteos de las redes sociales sobre el tema. Me indignó particularmente este artículo que manifestaba su oposición al slogan de solidaridad que se popularizó en estas horas (Je suis Charlie vs Je ne suis pas Charlie). El tipo decía que repudiaba el ataque pero que la revista es intolerante, colonialista y racista, y su argumentación viraba hacia la denuncia de las acciones terroristas de algunos estados (Francia, la OTAN , Israel, EEUU ) y de la situación opresiva que viven los musulmanes en Europa. Para mi un repudio del asesinato hecho en estos términos resulta en una expresión de corrección política vacía puesto que se asemeja más a la justificación de la acción homicida. Ilustración del artículo al que me refiero. Me gustó este comentario en aquel sitio, de una tal Ana: \"Estoy de acuerdo con lo dices, en tanto lo injusto de la situación global de los musulmanes. Sin embargo, podría ser que la gente sensible y crítica lee su viñeta así \"Hay en este mundo atroz gentes capaces de asesinar a alguien y luego reirse porque, (los asesinados) con su mansedumbre y su confianza en la humanidad, interpusieron entre ellos y los proyectiles tan solo el texto de su fé\" POdría ser que este señor caricaturizara al asesino y no a la víctima. Es humor inteligente que muchos malinterpretan. no?\" Frente a la ignorancia de los contenidos de la revista caben dos escenarios de análisis. Uno es suponer que efectivamente la revista es tal como la describe este crítico. El otro es darle crédito a otros artículos de la web que afirman que Charlie Hebdo hace humor con el fundamentalismo en todas sus formas, burlándose no solamente de los fanáticos islámicos sino de cristianos, judíos, políticos franceses, etc. La ultima y preferible alternativa es aprender francés, pero no tengo tiempo porque estoy aprendiendo Clojure y Python. El segundo caso es muy fácil de analizar. Una revista de contenidos satíricos que polemiza con todo el mundo no sólo merece una expresión de solidaridad mayúscula ante este acto de horror sino que debería ser una experiencia replicada por todos lados. Apreciaría mucho a sus autores. La crítica aguzada y feroz nos saca del letargo de la aceptación pasiva de nuestra realidad, puede descubrirnos nuestros fascismos ocultos, movilizarnos el cerebro y ponernos a pensar. O puede no provocarnos más que ira y el deseo de que nunca más nos crucemos con un material así. En cualquier caso Je suis Charlie Hebdo. Dibujos estigmatizantes de los musulmanes. ¡Qué raro dibujaron al Profeta! El primer escenario parece más difícil. Supongamos una revista que estigmatiza a un grupo nacional (los \"bolitas\", los kurdos, etc) o religioso (los musulmanes, yazidíes, seguidores de la diosa Kali), a un periódico que una y otra vez apunta sus dardos contra un sector de la sociedad por algún rasgo ideológico (comunistas, liberales, partidarios de Kim Jong-un), por una condición social (obreros, ricachones, traidores de clase, etc), por un gusto estético o sexual (escuchadores de cumbia, adoradores de transgéneros, practicantes de la homosexualidad). Algunos de estos grupos sufren condiciones de vida deplorables, violencia, alienación, y ven cómo se degradan permanentemente sus posibilidades de seguir existiendo, todo lo cual es promovido también (pero no exclusivamente) por este pasquín. ¿Qué hacemos con los efectos que puede causar la propagación de ideas retrógradas, como el ataque a todas estas minorías o grupos de riesgo que sufren la violencia estatal y privada permanentemente? Mi posición es que sólo si hay un abierto llamado a la eliminación del otro es posible pensar en la censura, y esto como último recurso, recién cuando el peligro no puede ser atemperado por algún tipo de protección más efectiva, como la educación de la población, el apoyo colectivo (económico, de organizaciones sociales, la promoción de prensa realmente antifascista), y todo aquello que haga que las publicaciones racistas caigan en el olvido por el rechazo colectivo y la falta de enraizamiento de sus ideas en la sociedad. Reitero lo que dije en las redes sociales, si un tipo dice barbaridades en los medios a su alcance (por ejemplo Barone en 6,7,8) y un asesino lo ultima a sangre fría, yo no tengo drama en salir con un cartel que diga \"Yo soy Barone\" (quizás la letra me sale medio despareja al escribir, pero soy consciente de que el acto trasciende las miserias de Barone). El mensaje que pretendería transmitir es que hay un límite en la acción frente a quien ataca al débil o dice cosas que perturban el bienestar de una minoría (o mayoría). Hay mucho para hacer antes de que la opción sea el asesinato. Desde este importante blog le decimos que no a la pena de muerte. Es en ese momento, y no antes, en que el cartel \"Je suis Charlie\" y \"Yo soy Barone\" cobra sentido. No hace falta allí marcar la diferencia con la ideología de Charlie o de Barone. Si matan a uno u otro es como si me mataran a mi; en otro momento (¿mañana?) discutimos si Charlie y Barone se merecían ese destino. Mientras Charlie y Barone sigan vivos los voy a poder combatir con las armas aceptables. Uf, espero que no maten a ninguno. En las redes sociales un contacto (¿me?) provoca así: ¿y si el asesinado fuese el editor de una revista nazi en la Alemania de 1930? Es difícil pensar la cotidianidad de la Alemania Nazi viviendo una democracia burguesa, como las de Argentina o Europa, incluidas todas sus violencias simbólicas y palpables contra sectores de su población y contra los habitantes de otros países. Puedo contestar que si un comando mata al editor de algún periódico actual que agita violencia contra musulmanes fundamentalistas, si algún militante oficialista lo mata a Magnetto, u otra clase de loco asesina a Insfrán, a Capitanich, a Aníbal Fernández o a Cristina Kirchner, todas personas a las que detesto profundamente, es mi deber salir con un cartel que diga \"Yo soy un musulmán fundamentalista\", \"Yo soy Cristina\" o \"Yo soy Barone\" (Alah no permita esto último). Mientras eso no suceda voy a seguir pensando y diciendo que todos esos son asesinos, corruptos, ladrones, mentirosos, etc. \" Quién es el culpable de la guerra!\" Por otra parte, no es difícil advertir que existen diferencias visibles en cuanto a responsabilidad por los males del mundo entre los asesinos que cultivan la ideología de la homogeneización religiosa, los ejecutores de políticas públicas (que matan de modos más indirectos, salvo Francis Underwood en House of Cards), los soldados de la prensa oficialista y los humoristas gráficos. Estos últimos vienen a ser los menos responsables del estado de situación de toda minoría o mayoría sufriente. Si estuviese de acuerdo con la violencia revolucionaria, cosa que por momentos me resulta razonable, elegiría mejor mis objetivos. Nadie está obligado a salir con ningún cartel a demostrar compromisos con valores que no los conmueven. Hay demasiados valores dando vuelta como para tenerlos en cuenta y respetarlos a todos. Quizás convenga obviar lo dicho hasta ahora y centrar las expectativas en que las expresiones públicas sean honestas y sin ocultamientos de las ideas de las cuales parten y de los proyectos que tienen, aún cuando resulten políticamente incorrectxs. Desde mi punto de vista muchos militantes de izquierda, no sólo los que interactúan conmigo, dividen el mundo entre opresores y oprimidos justificando cualquier acción de quienes consideren oprimidos (o callan sobre esto, que para el caso es lo mismo), y con este modelo creen que entienden una realidad compleja cuando en realidad la aplanan. Es un trabajo arduo decir lo que uno piensa, porque requiere indagar en nuestros subconscientes y en nuestras alineaciones ideológicas, que quizás sí tienen intenciones de hacer volar por los aires algún objetivo humanoide. Yo todavía tengo cuentas pendientes con este último punto, así que no estoy en condiciones de exigírselo a nadie. Por el momento me voy a practicar mi devoción pastafari , el Monstruo del Espagueti Volador que creó realmente el mundo es mucho más copado que las ideas profanas de Alah, Yahve y Lenin juntos, y encima me reclama que le prepare unas albóndigas para el servicio de esta noche. Tal vez mañana continúe…","url":"https://eldiegoefe.github.io/trifulca-digital-tras-un-ataque-terrorista.html","title":"Trifulca digital tras un ataque terrorista"},{"tags":"blog","text":"Recuento y llegada Es la tercera vez que voy a ver una proyección del Relámpago Verde. La primera fue \"Vanishing Point\" (Punto de Fuga), un viaje de rarezas y alegorías que se puede ver sin profundidad pero que con sus personajes tan singulares y alguna mitad cerebral despierta puede provocar un aluvión de interpretaciones psicoactivas. La segunda fue \"Phantom of Paradise\" (El Fantasma del Paraíso), una muy rara biografía de un más extraño compositor del que se aprovecha un productor que pacta con el diablo, dirigida en los 70s por Brian DePalma. Hoy, en la terraza del Club Español, vi \"Summer of ‘42\" (Verano del 42), historia sencilla, también de los setentas, que narra la iniciación amorosa de un adolescente y que de haber sido filmada inexpertamente podría formar parte de sagas de dudoso buen gusto. Un requisito indispensable para disfrutar del cine es dejarse hamacar, y suspender el escepticismo. No siempre me sucede. Hoy mi estado de ánimo fue ideal tras una siesta tardía que me recuperó del cansancio. Tras despertarme no perdí la ensoñación que me acompañó hasta la terraza del Club Español; llegué algunos minutos después del horario de inicio, y los títulos ya habían empezado a rodar. Mis amigos Fran y JuliVé me interceptaron cuando mis ojos aún no se habían adaptado a la oscuridad y me proveyeron inmediatamente de una rubia que me dejó sabor amargo en la boca. Gracias. Deambulé poco y conseguí asiento. Detalles Debo hacer una mención especial al clima, un aire naturalmente acondicionado que tras el calor de la tarde me potenció para disfrutar desde el fondo de la sala-patio. Sentado en la última fila veía una postal de siluetas negras recortadas contra la luz del rostro de Jennifer O'Neill. Inserte las siluetas con su imaginación, porque mis fotos no le hacen honor a esta sonrisa. Por suerte el Relámpago, más allá de sufrir la incontinencia de un antivirus chamuyero y la intromisión de la barra inferior del Windows Seven (mi mayor reclamo es que el Relámpago instale Linux), ofrece una pantalla y un sonido dignos, disponibilidad técnica imprescindible para no arruinar la experiencia. Hubo muchas risas, incluso en momentos de tensión dramática, el público se identifica, se relaja o se tensiona, no se, y se realimenta; yo también me encontré riendo frente a escenas que si hubiese visto en casa no me arrancarían ninguna carcajada. Es diferente ver cine con público, otro día me detendré sobre esto. Insisto en la imagen de las siluetas recortadas contra la pantalla, en general con inclinaciones de 20 a 40 grados, indicando así el estado de involucramiento con el rostro y el corpiño puntiagudo de Dorothy. Una trama ahí Tres amigos pasan el verano en una isla durante la segunda guerra mundial, que transcurre muy lejos pero que tiene un efecto directo sobre sus vidas porque la mujer que espían despide a su pareja que viaja al frente de batalla. ¿Puede realmente pasar algo más que una conversación nimia entre esta bella mujer sola y un joven que quizás llega a los 15 años? Ante la falta de internet, los muchachos sustraen de la biblioteca de uno de ellos un libro con fotos de donde resumen un instructivo con los pasos a seguir durante el encuentro sexual. La película está contada por varones heterosexuales y parece hecha sólo para este público. Es difícil no reírse en la escena de la farmacia, identificados con el protagonista que sufre para comprar forros mientras el amigo lo espera afuera. Adelantada la película, una noche Hermie golpea en la casa de Dorothy y nadie lo atiende. Se aventura y encuentra un telegrama donde informan de la muerte del combatiente. Epílogo Si sigo en Paraná, la semana que viene espero verme de vuelta allí, en este ciclo de Amores de Verano. Me convoca la sencillez de la iniciativa, la falta de presuntuosidad. La sobremesa (¿cómo se le llama al momento post-proyección?) también justifica el viaje hasta esa terraza, sobre todo si tenés la suerte de escuchar alguna de las historias magníficamente relatadas por el gran Franco Ge. Y si no conocés a nadie, te podés quedar contemplando a los asistentes, hipnotizado con más siluetas, algunas ya de frente y con facciones más definidas, que cuentan historias que la mente de uno puede dirigir magistralmente o arruinar para la posteridad. Posdata Me acordé, fui una cuarta vez, para \"On the road\" (En el camino), otra road-movie con iniciaciones y poesía. Eligen buenas pelis los muchachos. En mis ojos se veía mejor.","url":"https://eldiegoefe.github.io/una-noche-de-enero-con-el-relampago-verde.html","title":"Una noche de enero con el Relámpago Verde"},{"tags":"tecnicismos","text":"Configuracion En el archivo de configuracion de Emacs hay que incluir varios elementos para poder usar la agenda adecuadamente. Se pueden seleccionar individualmente los archivos que forman parte de la agenda: ( setq org-agenda-files ( list \"~/mis-archivos-org/apuntes-varios.org\" \"~/mis-archivos-org/acomodar.org\" )) O sino utilizar un directorio completo: ( setq org-agenda-files ' ( \"~/mis-archivos-org\" )) Se puede utilizar un archivo en particular para ir anotando al vuelo las ideas que se nos ocurren. Este archivo lo podremos abrir con org-capture (C-c c). Esto nos permite volcar lo que tenemos en la cabeza y dejar para después su clasificación, de manera de no perder la idea e interrumpir nuestro flujo de trabajo lo menos posible. La nota se cierra con C-c C-c y se vuelve al mismo buffer donde estabamos al iniciar la captura. ( setq org-default-notes-file \"~/mis-archivos-org/inbox.org\" ) Para abrir el inbox.org desde cualquier buffer se puede asignar un atajo: ;; asigna \"C-c o\" para abrir mi inbox.org sin tener que buscarlo ( global-set-key ( kbd \"C-c o\" ) ( lambda () ( interactive ) ( find-file \"~/org/inbox.org\" ))) Estos son otros comandos de configuración de org-mode que tengo seteados. Salvo el primero, el resto puede entenderse por inspección: ( setq org-agenda-include-diary t ) ( setq org-deadline-warning-days 7 ) ;; Palabras clave para los TODO ( setq org-todo-keywords ' (( sequence \"TODO(t)\" \"NEXT(n)\" \"ESPERANDO(w@)\" \"HIBERNANDO(h@)\" \"|\" \"CANCELADO(c@)\" \"COMPLETADO(f@)\" ))) ;; Colores de los TODO ( setq org-todo-keyword-faces ' (( \"TODO\" . ( :foreground \"deep sky blue\" :background \"dim gray\" :weight bold )) ( \"NEXT\" . ( :foreground \"tomato\" :background \"dim gray\" :weight bold )) ;; (\"ACCIONFUTURA\" . \"salmon\") ;; (\"AVANCEPARCIAL\" . \"medium spring green\") ( \"ESPERANDO\" . ( :foreground \"orange\" :background \"dim gray\" :weight bold )) ( \"HIBERNANDO\" . ( :foreground \"salmon\" :background \"dim gray\" :weight bold )) ( \"CANCELADO\" . \"yellow\" ) ( \"COMPLETADO\" . \"green\" ))) ;; Tags ( setq org-tag-persistent-alist ' (( \"@casa\" . ?1 ) ( \"@laburo\" . ?2 ) ( \"tiempolibre\" . ?3 ) ( \"compras\" . ?6 ) ( \"nota\" . ?7 ) ( \"creat\" . ?8 ) ( \"prj\" . ?9 ) ( \"someday\" . ?0 ))) ;; Colores de los tags ( setq org-tag-faces ' (( \"@casa\" . ( :foreground \"firebrick\" :weight bold :inherit s-variable-pitch )) ( \"@laburo\" . \"light sea green\" ) ( \"tiempolibre\" . \"deep sky blue\" ) ( \"compras\" . \"spring green\" ) ( \"oblig\" . \"light coral\" ) ( \"creat\" . \"olive drab\" ) ( \"prj\" . \"cornflower blue\" ) ( \"someday\" . \"orchid\" ))) Estas son las plantillas correspondientes a los distintos tipos de notas configuradas para guardarse en archivos como inbox.org, diario-personal, etc. Cada nota puede tener una estructura particular, en algunos casos importa colocar una fecha, una etiqueta, un deadline, etc: ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, ;; meetings, and org-protocol ( setq org-capture-templates ( quote (( \"a\" \"tarea\" entry ( file \"~/mis-archivos-org/inbox.org\" ) \"* TODO %&#94;{Brief Description} %&#94;g\\n\\n%?\\n\\nAgregado: %T\" ) ( \"t\" \"todo\" entry ( file \"~/mis-archivos-org/inbox.org\" ) \"* TODO %?\\n%U\\n%a\\n\" :clock-in t :clock-resume t ) ( \"n\" \"nota\" entry ( file \"~/mis-archivos-org/inbox.org\" ) \"* %? :NOTE:\\nAgregado: %T\\n\\n\" ) ( \"j\" \"journal\" entry ( file+datetree \"~/mis-archivos-org/diario-personal.org\" ) \"* %?\\n%T\\n\" :clock-in t :clock-resume t ) ( \"l\" \"laboratorio\" entry ( file+datetree \"~/mis-archivos-org/laboratorio-diario.org\" ) \"* %?\\n%t\\n\" ) ( \"e\" \"ejercicios\" entry ( file+datetree \"~/mis-archivos-org/cosas-saludables.org\" ) \"* %?\\n%T\\n\" ) ( \"r\" \"respond\" entry ( file \"~/mis-archivos-org/inbox.org\" ) \"* NEXT Respond to %:from on %:subject\\nSCHEDULED: %t\\n%U\\n%a\\n\" :clock-in t :clock-resume t :immediate-finish t ) ;; b: modificado de http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html ( \"w\" \"org-protocol\" entry ( file \"~/mis-archivos-org/inbox.org\" ) \"* TODO Review %c\\n%U\\n\" :immediate-finish t ) ( \"m\" \"Meeting\" entry ( file \"~/mis-archivos-org/inbox.org\" ) \"* MEETING with %? :MEETING:\\n%U\" :clock-in t :clock-resume t ) ( \"p\" \"Phone call\" entry ( file \"~/mis-archivos-org/inbox.org\" ) \"* PHONE %? :PHONE:\\n%U\" :clock-in t :clock-resume t ) ( \"h\" \"Habit\" entry ( file \"~/mis-archivos-org/inbox.org\" ) Finalmente, para acceder a la agenda hay que invocar el comando org-agenda o configurar una combinación de teclas para su ejecución, habitualmente se usa C-c a: ( global-set-key \"\\C-ca\" 'org-agenda ) Allí aparece un menú con las distintas opciones de visualización. A continuación se describen las opciones (es un resumen de la sección Built in agenda views . Vista 1 org-agenda-list (C-c a a): muestra la vista de agenda para el número de días fijado por la variable org-agenda-span (que puede contener un número o uno de los valores siguientes: day, week, month, year). Por defecto esta variable está elegida en \"week\" (mostrará una semana). Si se invoca el comando con un prefijo numérico se incluyen esa cantidad de días. Por ejemplo con C-u 3 0 C-c a a se mostrará una agenda para los siguientes 30 días. Para agendas semanales, se empieza por defecto en el lunes previo. Vista 2 org-todo-list (C-c a t): es la lista global de \" TODO \"s, muestra en un solo lugar todos los items marcados como pendientes ( TODO ). org-todo-list (C-c a T): es una variación que pregunta por una keyword y lista entonces todos los items marcados con esa keyword (por ejemplo: CANCELADO o COMPLETADO , etc). Se pueden incluir varias keywords usando el caracter \"|\" (que es un OR ). Para acortar la lista de TODOs hay dos modos: sacar de la lista aquellos TODOs que estén marcados como schedule y deadline, para lo cual hay que configurar las variables org-agenda-todo-ignore-scheduled, org-agenda-todo-ignore-deadlines, org-agenda-todo-ignore-timestamp y/o org-agenda-todo-ignore-with-date. los items TODO pueden tener subniveles con las distintas subtareas. En estos casos puede ser suficiente listar sólo los niveles de mayor importancia y omitir los subniveles. Para ello hay que configurar las variable org-agenda-todo-list-sublevels. Vista 3 org-tags-view (C-c a m): muestra una lista de acuerdo a etiquetas (tags) o propiedades, que se seleccionan de una lista. org-tags-view (C-c a M): es parecido, pero además requiere que la etiqueta sea un TODO (y que este TODO no haya sido COMPLETADO ). Hay muchos detalles sobre la construcción de criterios de búsqueda más complejos en este link del manual . Vista 4 org-timeline (C-c a L): resume todos los items marcados con fecha, principalmente usado para dar un panorama de los eventos de un proyecto. Si se usa un prefijo (C-u) se muestran todos los TODOs sin completar que también estén listados debajo del mismo día. Vista 5 org-search-view (C-c a s): es una herramienta para búsqueda de texto, particularmente útil para encontrar notas. Admite búsquedas literales y usando \"regexp\". Ver detalles de búsqueda en el manual . Vista 6 org-agenda-list-stuck-projects (C-c a #): al seguir un sistema como GTD (de David Allen), hay que revisar regularmente que todos los proyectos se muevan. Un proyecto estancado es uno que no tiene definidas las \"próximas acciones\", de modo que nunca aparecería en la lista de TODOs que produce org-mode. Para personalizar el modo de identificar y encontrar proyectos estancados se utiliza C-c a !. Por defecto supone que todos los proyectos son headlines de nivel 2, y que no están estancados si tiene al menos una entrada marcada con alguna de las tres keywords: TODO , NEXT , NEXTACTION . Ver más detalles sobre esta configuración en stuck projects .","url":"https://eldiegoefe.github.io/agenda-en-emacs-y-orgmode.html","title":"Agenda en Emacs y OrgMode"},{"tags":"tecnicismos","text":"Estuve un rato largo (¡horas!) viendo cómo usar el modo \"dired\" que tiene Emacs para el manejo de archivos, porque quiero usarlo al modo del viejo Comandante Norton (y sus clones: Total Commander en Window$, Krusader especialmente para KDE , etc). Es decir: dos paneles que sirven de inicio y de destino para poder copiar y mover archivos, crear directorios, navegarlos, etc. Buffer mostrando un directorio con dired-mode Lo primero que hice fue instalar un paquete que amplía las opciones disponibles llamado dired+ (dired plus) y después instalé otra extensión llamada dired-sort-menu. La información sobre la instalación de estos paquetes da por supuesto que uno ya tiene experiencia en Emacs, y a pesar de que yo lo uso hace casi un año y he instalado y desinstalado muchas extensiones, estuve un rato para darme cuenta de algo que no figura en la página de dired+ . En el archivo de configuración de Emacs (init.el, custom.el o el que estemos utilizando) es imprescindible agregar la orden siguiente: ( require 'dired+ ) Para correr el modo basta hacer M-x dired (yo creo que con esto se carga ya con los agregados de dired+, que por ejemplo enriquece los menúes de dired, así que viendo estos menúes uno puede darse cuenta si está cargada la extensión o no). El buffer de dired que se abre muestra los nombres de los archivos del directorio elegido (ver en la figura siguiente), pero parece que por defecto se activa el ocultamiento de toda otra información. Hay que ejecutar dired-hide-details-mode (con el ( es decir S-8 en la distribución de teclado en castellano) para que se vea toda la info del archivo, incluyendo fecha, permisos, etc. Buffer con dired+ suprimiendo detalles de los archivos Por ahora no encuentro el modo de colorear distinto a las directorios y a los archivos con distinta extensión. Intenté con el paquete dired-rainbow y pude colorear distinto los archivos con diferentes extensiones, pero no se cómo hacer con los directorios (porque no tienen extensión), así que lo desinstalé. Pero copio debajo el código de prueba que funcionó, para no perderlo: ( require 'dired-rainbow ) ( defconst my-dired-media-files-extensions ' ( \"mp3\" \"mp4\" \"MP3\" \"MP4\" \"avi\" \"mpg\" \"flv\" \"ogg\" ) \"Media files.\" ) ( dired-rainbow-define html \"#4e9a06\" ( \"htm\" \"html\" \"xhtml\" )) ( dired-rainbow-define media \"#ce5c00\" my-dired-media-files-extensions ) Puse una pregunta en Emacs Exchange para ver el modo de ordenar los archivos por extensión (y poniendo primero los directorios). Me respondieron al toque, y la solución estaba en instalar un paquete llamado dired-sort-menu.el (o dired-sort-menu+.el). Luego hay que agregar también en la configuración el \"require\" correspondiente: ( require 'dired-sort-menu+ ) Al manipular archivos es muy práctico tener dos buffers abiertos como en la figura siguiente, de modo que al copiar o mover se usan ambos directorios como origen y destino, sin que haga falta teclear nada. En este caso el ordenamiento es por nombre, así que se ven mezclados los archivos (visibles y ocultos) con los directorios. Dos buffers coloridos con dired+. Las funciones más comunes y sus atajos de teclado (son case-sensitive) están en la tabla siguiente, a modo de ejemplo, pero hay muchas más opciones en los menúes de dired+, que son varios: Dir, Mark, Regexp, Multiple, Single. En los menúes figuran los atajos, así que mirándolos es una buena forma de aprender. Función Atajo Marcar archivo m Marcar por extensión *. Desmarcar archivo u Desmarcar todos U Toggle t Copiar C Mover/renombrar R","url":"https://eldiegoefe.github.io/comandante-emacs-dired-mode.html","title":"Comandante Emacs (dired-mode)"},{"tags":"salud","text":"Hace algunos meses empecé a leer (on-line, por supuesto) sobre acondicionamiento físico, un poco estimulado por el deseo de mejorar en las artes marciales (en este post hablaba sobre todo eso). En vez de seguir el programa Freeletics que me había llamado la atención en un primer momento (en una de esas más adelante lo intento), me encontré el libro \"Convict conditioning\", escrito por un supuesto ex-preso llamado Paul Wade. El tipo afirma que el auge de los gimnasios a partir de la década del 70 impuso una pésima forma de ejercitación, que hace énfasis en la hipertrofia muscular con el objetivo principal de lograr una predeterminada apariencia corporal. Por eso, por ejemplo, se popularizaron los llamados \"abdominales\", ejercicios para entrenar la capa más superficial de músculos ventrales, dejando de lado el fortalecimiento de aquellos más profundos, que no alcanzan a verse. Los ejercicios de gimnasio están diseñados generalmente para aislar un músculo en particular, mientras que al realizar movimientos más naturales se trabajan encadenadamente un mayor número de ellos: agonistas y antagonistas, superficiales y profundos, etc. Un mejor entrenamiento consiste en ampliar la capacidad de ejercer fuerza útil, por ejemplo para levantar una valija, acarrear un tonel de cerveza o treparnos por las ramas de un árbol. Debido a la moda de los gimnasios, los ejercicios tradicionales casi se perdieron del todo, pero lograron conservarse hasta la actualidad cobijados en el único lugar donde la fuerza es necesaria para sobrevivir y los gimnasios no pudieron proliferar: la cárcel. Los reclusos se convirtieron en los últimos guardianes de las tradiciones físicas de antaño, los encargados de traspasar de generación en generación la cultura física que heredaron de ejércitos y deportistas de la antigüedad. No tengo idea si esta hipótesis tiene rasgos de verdad, no obstante lo cual la encuentro como una idea atractiva. Paul Wade propone tan solo 6 ejercicios con los que se fortalecen de modo funcional la mayoría de los músculos del cuerpo. Cada uno de estos 6 ejercicios se puede realizar en 10 diferentes grados de dificultad, siendo el más bajo apto para cualquier persona que no practica deportes, mientras que el nivel más alto requiere extrema disponibilidad de fuerza, flexibilidad y control. Probablemente sólo los mejores guerreros vikingos, romanos o mongoles, durante el apogeo de sus empresas aventureras, hubiesen sido capaces de empezar por el nivel más alto. Los jóvenes espartanos se entrenaban desde los 7 años. Se estimulaba a las mujeres a entrenarse junto con los varones. Aún para una persona en buen estado físico el autor recomienda iniciar la rutina con la dificultad más baja, en la que se realiza una fuerza ínfima. De este modo se logra entrenar la coordinación neuromuscular (esto es interesante: en un principio se logran ganancias de fuerza sin aumento del volumen muscular, nuestro cuerpo \"aprende\" a coordinar el esfuerzo optimizando su capacidad ya existente) y se fortalecen las articulaciones y los tejidos no-musculares, como tendones, fascias y ligamentos (que tardan más que los músculos en adaptarse a las tensiones que se originan durante el entrenamiento). El sistema está pensado para asegurar unos cimientos sólidos para el esfuerzo posterior, minimizando la posibilidad de lesiones. Sólo se usa el peso del cuerpo en estos 6 ejercicios: flexiones de brazos (pushups) sentadillas (squats) dominadas o barras (pullups) abdominales (leg raises) puentes (bridges) flexiones verticales (handstands pushups) Como decía antes, cada ejercicio tiene 10 niveles distintos de dificultad. En las primeras semanas lo más difícil es tomar con calma el avance, porque uno siente que no hace nada de fuerza. Por ejemplo, las flexiones de brazos se realizan estando parados, apoyados contra una pared. El esfuerzo es mínimo. Yo podría haberme salteado este nivel y podría haber empezado en el segundo, muy probablemente sin inconvenientes, pero seguí el programa al pie de la letra. Luego de ese primer nivel, el siguiente consiste en hacer las flexiones apoyando las manos sobre una superficie a la altura de la cadera, con el cuerpo a 45 grados. El tercer nivel, al que llegué tras unos 4 meses (cada ejercicio se realiza una sola vez a la semana), consiste en hacer las flexiones ya en modo horizontal, pero con las rodillas apoyadas sobre el piso. Esto puede parecer una pavada, pero hacer 3 series de 30 flexiones, con forma perfecta, tardando unos 2 segundos en bajar, sosteniendo 1 segundo el cuerpo en la posición inferior, y otros 2 segundos para subir, me resulta agotador (de hecho, subdivido la serie de 30 en 3 miniseries de 10, con un mínimo descanso para mover un poco las muñecas, hombros y codos, que se quejan bastante). El nivel cinco es la flexión de brazos tradicional, y el nivel diez consiste en realizar las flexiones usando un solo brazo. Convict Conditioning. Paul \"Coach\" Wade En los seis meses que llevo respetando esta rutina, con diferentes niveles de avance en los 6 ejercicios, puedo notar que estoy más fuerte y que mi cuerpito empieza a mostrar los primeros síntomas de este desarrollo. Mucho tiempo la cultura física estuvo representada en mi mente por alcornoques levantando pesas en gimnasios de música atroz, sin mayor propósito que una estética dudosa, o rugbiers de cerebro desproporcionadamente pequeño. Hoy en día aprendí a admirar a muchos deportistas y aprecio algunas disciplinas que antes desconocía o despreciaba. Cómo cambia la percepción de una actividad que pasa de ser obligatoria y repulsiva (como las clases de educación física de la escuela dictadas por profesores iletrados que creen superfluo explicar su propuesta académica, siendo además incapaces de mostrar que todos podemos mejorar significativamente nuestra capacidad física y nuestro bienestar) a constituirse en una forma consciente de auto-conservación y superación.","url":"https://eldiegoefe.github.io/corpore-sano.html","title":"Corpore sano"},{"tags":"salud","text":"Parte del atractivo que encuentro en el Jiu-Jitsu Brasileño ( BJJ ) es la cantidad de blogs que cuentan la experiencia de aprenderlo. Vendría a ser la parte nerd-geek del asunto ¿Pero por qué la gente escribe sobre su BJJ y no tanto sobre su Karate o TaeKwonDo? ¿O acaso escriben y yo no lo encuentro? Con las palabras clave blog y bjj el buscador indica inmediatamente los sitios de Jiu Jiu , Georgette , Lex BJJ and Judo y Aesopian , entre muchos otros . En mi lista de favoritos ya incluí también a slideyfoot , bjj grrl y GrappleArts . Incluso hay posts del tipo \"lista de los mejores blogs de jiu jitsu\" acá y también acá , así que imagínense. En realidad, mientras chequeo mis impresiones para escribir este post, encuentro lindos sitios de karate, como André Bertel (centrado en entrenamientos), Ikigai Way (con historia, filosofía del arte marcial, técnica, entrevistas, un sitio con mucho material), The Way of Least Resistance , Shinseidokan dojo , Karate camino de vida , Applied Karate , Mundo Karate , y otros. Una forma efectiva de encontrar buenos sitios es prestarle atención a la sección \"blogroll\" que suele aparecer en las páginas personales, y que contiene links a sitios recomendados por el autor del website. El blog de JiuJiu. El blog de JiuJiu es un ejemplo de los sitios que relatan la experiencia de practicar el \"arte suave\". Julia, su autora, es profesora de inglés y vive temporalmente en Corea. Sus posteos son entretenidos, abarcan cosas que van más allá del jiu jitsu, y promueven la participación de sus lectores. Aunque no es tan difícil encontrar sitios de karate con contenidos semejantes a los blogs de bjj, sigo con la impresión de que siento más afinidad por los contenidos de estos últimos, y por su estilo de escritura. Me refiero a que encuentro con más facilidad sitios de bjj de índole personal, más cercanos al formato del blog, centrados en las preguntas que se hacen los principiantes o quienes tienen dudas en distintos aspectos de su entrenamiento. Me gustan los sitios que con frecuencia incluyen las emociones asociadas con la dificultad del aprendizaje, las anécdotas, y muchas recomendaciones de lectura de posteos de otros blogueros. Las páginas de otras artes marciales las veo menos íntimas, más de divulgación enciclopédica del arte, orientadas a la filosofía de la disciplina y su historia, con discusiones sobre la calidad de sus enseñanzas, y con un formato más \"objetivo\", tipo periódico de noticias, por llamarlo de algún modo. El blog de slideyfoot. El blog de slideyfoot incluye una sección de FAQ (preguntas frecuentes) sobre BJJ para principiantes, con buenas preguntas y elocuentes respuestas. Slideyfoot es inglés, y tiene estudios de literatura, sus posteos son sustanciosos. Además encuentro otro elemento que reclama mi reflexión: casi todos los blogs de bjj pertenecen al mundo anglosajón. ¿Por qué no hay análogos en castellano? Los sitios que están en español son los pertenecientes a los clubes, asociaciones y ligas, donde el contenido se limita a dar una definición más o menos estándar (decir \"pobre\" sería irrespetuoso) del deporte y su historia, los resultados de los torneos y rankings, horarios de práctica, información sobre seminarios a dictarse en el futuro, currículums de profesores y competidores, ofertas de kimonos y cosas por el estilo. Casi nadie escribe en castellano sobre su experiencia de aprendizaje, que es el contenido central de los blogs en inglés. ¿Será que hay una apabullante diferencia numérica en el tamaño de las comunidades anglosajonas y españolas de jiujiteros? Quizás la razón sea que por ese motivo, dentro de la numerosa cantidad de deportistas de habla inglesa existe un número significativo de personas inclinadas a la escritura mientras que en la mucho menor comunidad de hablantes de español es lógico que escaseen los aficionados a escribir y bloguear. De poseer alguna estadística podría avanzar en la afirmación, pero por ahora no tengo datos. ¿O es que el jiu jitsu permeó distintas clases sociales en nuestro mundo desigual, y es esto lo que se traduce en las distintas características culturales de las poblaciones de deportistas de lenguas diferentes? Los blogs en inglés tienen muchos comentarios de visitantes. Esa afinidad estoy seguro de que realimenta el entusiasmo de quienes escriben (está bueno recibir feedback, anímense muchachxs). Leer un buen blog contagia muchas cosas: las ganas de entrenar, de escribir, de compartir puntos de vista. Afiche típico. Vení a practicar BJJ , ¡vas a pasarla bárbaro en contacto íntimo con tu adversario! De algún modo, la experiencia de practicar el BJJ es particular en el mundo anglosajón, como si para ellos incluyese el ejercicio de la escritura sobre la disciplina (y por ende la reflexión sobre la misma), ya sea como blogueros o comentaristas. Esta es una característica que obviamente los cultores hispanohablantes del deporte no parecen considerar. Sólo encontré el blog de Ana Yagües , actualizado por última vez en 2012, pero quizás haya otros. Los sitios en español sólo muestran el deporte en formas que para gente como yo resultan expulsivas. Es el caso de los torneos, y el énfasis en todo lo que tenga que ver con la competición. Además es la tendencia a poner en primer plano fotos de musculosos tatuados con expresiones de bulldog asesino propinando ahorcamientos. La única alternativa, igual de lejana a la consideración del BJJ como el \"arte suave\", es la práctica como forma de defensa personal. Nada de esto convocará a gente más o menos sensible. Me parece atractiva la idea del blog personal, cualquiera sea la práctica que uno realice, incluso en actividades por fuera del deporte. Hoy en día las redes sociales son los recipientes de la expresión personal, por su facilidad de uso y amplitud de audiencia, aunque lo escrito naufrague en un océano de memes, frases de autohundimiento (no me parecen de gran ayuda) y montañas de contenidos olvidables. El diario personal digital tiene otros alcances. Ojalá no pase tanto tiempo antes de que este blog incluya entradas sobre mi debut en el jiu jitsu.","url":"https://eldiegoefe.github.io/bloguearas-tu-bjj.html","title":"Bloguearás tu BJJ"},{"tags":"salud","text":"Cada cierto tiempo me encuentro nuevas pasiones. A veces duran, otras veces son sustituidas por otras, o por obligaciones que impiden el desarrollo de mis impulsos. El tiempo es finito, hay que saber elegir qué hacer con él. Empecé a leer cosas de Brazilian Jiu-Jitsu hace unos cuantos días y no he podido parar. Hay mucho material on-line: blogs personales, canales de YouTube, páginas de academias, enciclopedias, etc. Atracciones Voy a tratar de señalar cuáles son los elementos que me resultan atractivos de este arte marcial, algunos quizás sean exclusivos del BJJ y otros de las artes marciales en general. Complejidad . De acuerdo con los comentarios que he leído, uno tarda mucho tiempo en encontrarle la vuelta al BJJ . En otras disciplinas el combate parece bastante más sencillo. Uno ve Karate o Tae Kwon Do y advierte los bloqueos, las patadas, los ataques, las defensas (quizás hay pasajes en que la velocidad de las acciones dificulta comprender lo sucedido, pero una repetición a cámara lenta aclara quién logró conectar un golpe o asegurar un bloqueo). En el BJJ todo parece mucho más embrollado, he visto combates en los cuales es confuso identificar al contendiente que se encuentra en una posición ventajosa. Sin sumergirse en el universo de la disciplina no es obvio saber qué pretenden los luchadores (no me refiero a las pausas en las que estarán planeando sus próximos movimientos, sino a las acciones, cuando vemos una danza de brazos y piernas que se mueven para un lado y para lado) ni tampoco es claro y distinto advertir el modo en que pasan de una posición a otra. Como hay numerosas variantes y además la disciplina continúa desarrollándose (según parece se inventan nuevos movimientos ofensivos o defensivos como resultado de la experimentación y del ingenio) la riqueza de movimientos permite que se haya acuñado la metáfora de que el BJJ es un \"ajedrez corporal\". Fotografía del sitio: The Jiu Jitsu Transformation Desafío . El avance en el reconocimiento \"oficial\", es decir la graduación representada en el color del cinturón, es lento, acorde a la complejidad y dificultades del aprendizaje. Esto es algo propio de cada escuela en otras artes marciales, pero lo resalto porque me parece común que se otorguen reconocimientos no necesariamente producto del aprendizaje y el esfuerzo. Yo creo que no basta con ser un alumno sarmientino, que no falte a clases. Esa regularidad requiere un reconocimiento, pero distinto al que se le otorga a quien incorporó las enseñanzas y cuenta con un arsenal de técnicas cuyo dominio se simboliza con un color del cinturón. En otras palabras, para que lo entiendan exclusivamente los fanáticos de MMORPGs, prefiero los juegos en que levear es complejo y lleva tiempo alcanzar el máximo nivel. Entrenamiento realista : como en BJJ una parte del entrenamiento se practica contra adversarios que se pueden defender con el máximo de su saber (dentro de las reglas del deporte), uno puede apreciar y poner a prueba el nivel de aprendizaje y la utilidad y eficacia de las técnicas en una pelea de uno contra uno. En cambio, en un arte marcial donde hay golpes y bloqueos es imposible lograr lo mismo porque la correcta realización de los movimientos pone en riesgo la salud de nuestros compañeros de práctica. ¿Por qué buscar este modo de realismo si no me interesa el arte marcial como defensa personal? Yo creo que le brinda otra intensidad a lo que yo considero un juego, pienso que me va a motivar más intensamente el deseo de desarrollar mi salud y habilidad corporal al ser un desafío de mayor magnitud. La mayor exigencia también pienso que puede generar una predisposición a comprender mejor los detalles, alternativas y sutilezas durante el aprendizaje. Tapeo : la existencia de un mecanismo para detener la acción permite que cuando un contendiente trata de desarrollar al máximo su acción puede estar (¿casi?) seguro de que el otro no sufrirá consecuencias físicas. Esto quizás alcanza para sentir la confianza de que si uno ejecuta una técnica con cierta intensidad no sea juzgado como un intento de desafío o una búsqueda de confrontación por encima del límite de lo amistoso. Ni bien alguien siente el inicio de un dolor o una falta de comfort se puede detener la acción sin que escale el deseo (o el instinto) de venganza. Buena prensa . Mucha gente cuenta experiencias positivas en la web. Como en otras disciplinas deportivas, hay testimonios que contagian el entusiasmo: historias sobre gente que mejoró notablemente su estado físico (desde bajar de peso hasta lograr destrezas impensadas) o que pudo desarrollar un gran compañerismo en sus prácticas, al tiempo que convertían a esta disciplina en un hobby y/o una pasión. Peligro Así como hay elementos atractivos, hay cuestiones que me generan alertas o directamente resultan en algo repulsivo. Lesiones . La práctica de un arte marcial incluye la posibilidad de sufrir lesiones. Si el instructor y los compañeros de práctica son cuidadosos, la frecuencia de las lesiones no debería ser mayor a las de cualquier otro deporte. Pero quizás en los primeros tiempos, cuando se es un aprendiz reciente, los riesgos se multipliquen si no escuchamos adecuadamente al cuerpo cuando se da por vencido. Aún cuando no haya malas intenciones, siempre puede haber accidentes: nuestro compañero puede perder el equilibrio encima nuestro, podemos sufrir una torcedura o golpearnos sin querer. Estos riesgos existen, son errores aleatorios inevitables en todo proceso, y no creo que sea sensato evitar la práctica ante esta posibilidad. Lo que sí me preocupa es que no se cumplan las premisas de la afirmación: puede que algún entusiasta tenga como objetivo participar en torneos de vale todo y no sea respetuoso con la humanidad del otro, o peor aún, que la filosofía de la escuela sea justamente esa, entrenar deportistas para competencias en las que todos comparten esta predisposición a la maximización de los resultados. En este caso, mi decisión será un rotundo no. Prefiero abandonar hasta encontrar un lugar más acorde con mis expectativas. O tal vez opte por hacer Capoeira, que no tiene contacto y en el cual creo que se hace mucho énfasis en la preparación física (se ve que lo brasileño de algún modo me llama siempre la atención). Escuelas/entrenador . Es clave para sentirse cómodo (desde el principio o a partir de algún momento no tan lejano) encontrar la escuela y los instructores adecuados para el modo en que planeamos experimentar la disciplina. Mi mayor miedo en relación con este punto es encontrar grupos enfocados en la competencia, sin intenciones de \"perder el tiempo\" con alguien que sólo busca desarrollar un pasatiempo saludable. Comercio . Cuando la escuela no es competitiva ni tradicionalista hay otro riesgo. Que se trate de un emprendimiento meramente comercial, donde el interés por la enseñanza de la disciplina se encuentre en segundo plano y la motivación sea eminentemente comercial. De todos modos, esto es como un problema minorista. Por el lado mayorista están las instituciones grandes, con portales de internet, y la industria del entretenimiento, o grandes escuelas que se promocionan comercialmente con técnicas de marketing que ponen en evidencia la existencia de un mercado y la pretensión de dominarlo y extenderlo. Hay mucha venta de clases, uniformes, y sueños, y no está mal estar atentos. Fotografía del sitio: http://www.bjjglobetrotters.com (que parece tener un mensaje a favor de la igualdad). ¿Es un interés genuino? A veces me encuentro deseando cosas que nunca antes me interesaron. El entusiasmo puede estar provocado artificialmente y pasado un tiempo quizás se desvanezca. Ya veremos. El empuje propagandístico del BJJ me hace sospechar. Hay una proliferación de fanáticos de las luchas de artes marciales mixtas en las cuales el BJJ fue y sigue siendo protagonista, asociada a eventos que se televisan y con ello arrastran toda una industria que impone gustos y necesidades de dudosa trascendencia. Es un fenómeno mercantil masivo. En este punto creo que respeto más las artes marciales tradicionales que resaltan valores como la humildad, la paz interior, la búsqueda de uno mismo… aunque con este matiz y esta fachada también pueden encontrarse emprendimientos igual de comerciales. Supongo que así es la práctica de artes marciales en el mundo posmoderno.","url":"https://eldiegoefe.github.io/brazilian-jiu-jitsu.html","title":"Brazilian Jiu-Jitsu"},{"tags":"salud","text":"Mi jornada se cruzó con las artes marciales en 2011. Me dolía la espalda probablemente de tanto usar el mouse (con la zurda). El kinesiólogo me recomendó comenzar con clases de Taichi, así que probé. Las clases resultaron bien: movimientos suaves, búsqueda de flexibilidad, aprendizaje de \"formas\". No me extraña que mis compañeros sean mayoritariamente de la tercera edad, las clases pueden sentirse aburridas. Yo las calificaría más bien de clases tranquilas y calmas, con ejercicios que buscan trabajar la flexibilidad y la respiración, y eventualmente llegar a un estado de meditación en movimiento. Mi práctica personal está más dirigida a la dimensión física, la meditación por el momento no es algo que me resulte comprensible o alcanzable. Práctica de Taichi Al terminar las clases de Taichi empezaban las de arte marcial, sin nombre específico, con el mismo maestro. Como ya tenía confianza con él, me animé a probar. Resultó ser Pakua, un arte marcial joven y de origen poco convincente (basta hacer un rastreo por la web para ver las opiniones negativas que cosecha en foros y páginas, o la propia aura de pseudo-espiritualidad y cualquiercosismo que desprenden algunos chantas que se dedican a su enseñanza). De todos modos a mi me resultó perfecto porque no hay competencia (algo que me alejó de estas prácticas durante mi niñez y adolescencia) y se entiende más como un camino de desarrollo personal, sobre todo si uno lo practica con esa determinación. Aún cuando en las clases hay referencias frecuentes a aplicaciones de defensa personal (que desde mi punto de vista quizás puedan ser eficaces -lo dudo- pero sólo si son entrenadas consistentemente y de manera crecientemente realista), no es eso lo que me motiva. Sí lo hace mi búsqueda de un estado físico mejor y el desarrollo de habilidades corporales que antes me parecían ajenas y dificilmente alcanzables, como patear con buena técnica, realizar giros, caídas controladas, secuencias de movimientos complejos, etc. También es fundamental el ambiente de entrenamiento, la generación de una atmósfera agradable con los compañeros y la persistencia del respeto al maestro. Por curiosidad, y porque estoy por mudarme a otra ciudad, estuve viendo alternativas para continuar mi práctica. En particular busqué aquellas artes marciales que se enfocan en lo que más me cuesta entender: el uso de palancas en las articulaciones para llevar al adversario al suelo o para inmovilizarlo. Navegando la web me encontré con el Aikido, el Hapkido (un arte marcial coreano que nunca había escuchado nombrar y, por lo que pude ver en youtube, con demostraciones que parecen bastante dolorosas) y finalmente con el Brazilian Jiujitsu ( BJJ ), que resultó estar de moda por sus éxitos en los torneos de Artes Marciales Mixtas ( MMA ). El BJJ se publicita como un arte marcial eficaz contra todas las otras disciplinas. Esta ambiciosa aseveración tiene algún sustento. En peleas de uno contra uno, en torneos de artes marciales mixtas (que no es un \"vale todo\", ya que tiene reglas, por ejemplo no permite ciertos golpes y palancas) hubo un período dominado por luchadores de BJJ , y actualmente parece imprescindible saber al menos un poco de esta disciplina para tener alguna chance. En ese ámbito quedó demostrado (en el sentido de una demostración científica sujeta a revisiones futuras) que quienes provienen del BJJ pelean con ventajas porque poseen una familiaridad con la lucha en el piso, de la que muchos contendientes de otras disciplinas carecen. Esto hace que se publicite el BJJ como el arte marcial perfecto para la defensa personal en las calles, lo cual es absolutamente absurdo. Luchadores de JiuJitsu En la vida real no hay reglas, el enfrentamiento puede ser con varios atacantes (incluso puede haber alguien oculto), puede incluir armas, el ataque puede ser sorpresivo y seguramente nos encontrará sin la elasticidad que provee el precalentamiento. Son muchos los que afirman cautelosamente que tener una falsa percepción de nuestras posibilidades de defensa es perjudicial porque en una situación así nos puede llevar a tomar riesgos que no estamos realmente preparados para enfrentar. Por más que uno esté entrenado, pelear contra alguien desconocido (cuya habilidad desconocemos, y en un estado físico y psíquico impredecibles) es muy arriesgado y azaroso, y ni hablar si el atacante tiene armas blancas o armas de fuego a la vista o escondidas. De todo esto se habla en el artículo Is Brazilian Jiu Jitsu Street Effective? . La práctica de artes marciales es beneficiosa si uno disfruta de lo que indiscutiblemente pueden ofrecer, lo cual difiere de las promesas publicitarias con que esta mercancía se vende a los consumidores. La calidad de la enseñanza y el alcance de sus beneficios depende en alto grado de los entrenadores y de las instituciones a las que pertenecen, y también del ecosistema en el que se desarrollan (es decir, el grupo con que se entrena y sus objetivos). En mi caso, creo que es incierto lo que puede resultar de su aplicación en un contexto no controlado, pero esto no atenúa en nada todo lo bueno que parece ofrecer en un gimnasio, con el instructor y los compañeros adecuados.","url":"https://eldiegoefe.github.io/artes-marciales.html","title":"Artes marciales"},{"tags":"tecnicismos","text":"En el mundo Emacs se menciona bastante el lenguaje Clojure, como un dialecto de Lisp que corre sobre el Java Virtual Machine, lo cual constituye para mi un dato casi completamente inutil, puesto que desconozco Java y su JVM . De cualquier manera, mientras continúo leyendo ANSI Common Lisp, me dieron ganas de probar, así que guardo aquí las instrucciones de instalación para usar Clojure con Emacs en Linux. La cuestión no es tan complicada, primero verificamos desde un terminal que Java está instalado: $ java -version java version \"1.7.0_65\" OpenJDK Runtime Environment (IcedTea 2.5.2) (Arch Linux build 7.u65_2.5.2-3-x86_64) OpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode) Como en mi caso obtuve el mensaje precedente, no me tuve que preocupar de instalar Java. Las instrucciones de instalación están en Clojure with Emacs . En resumen, lo que hice fue visitar la página de Leiningen y entonces: Bajar el script de bash (de nombre \" lein \") Copiarlo en una carpeta ( ~/programas/lein/ ) Ir a /usr/bin y crear allí un symlink a lein (con \" sudo ln -s ~/programas/lein/lein \"). El directorio /usr/bin está en el PATH así que todo lo que ahí se almacena puede ser encontrado para su ejecución. El symlink guardado allí apunta al programa en la dirección donde lo guardamos, así que ahora podremos ejecutar lein desde cualquier lugar. Pero aún falta volver ejecutable el script (con \" chmod a+x lein \") Finalmente hay que ejecutar lein, lo cual hace que se baje Leiningen y se instale en el directorio ~/.lein . El directorio creado originalmente (~/programas/lein) debe permanecer porque allí sigue estando lein, que se ejecutará siempre que se cree un proyecto (lo que se baja en ~/.lein no lo sustituye). Agregado : no hace falta copiar lein en un directorio como ~/programas/lein/ y luego armar un symlink desde /usr/bin , se puede directamente copiar lein en este último y listo. En Emacs instalé CIDER , y además como tengo Prelude habilité en el archivo prelude-modules.el la linea (require ‘prelude-clojure). Así que si no lo instalaba yo, el mismo Prelude hubiese bajado CIDER . El tutorial de Clojure with Emacs indica que hay que ejecutar estas dos órdenes desde un terminal (el resultado es la creación de un proyecto llamado command-line-args dentro de un subdirectorio que se ubica dentro del directorio actual en que se encuentra el terminal): $ lein new command-line-args $ cd command-line-args Luego desde Emacs se abre el archivo /command-line-args/project.clj y se lo edita para agregar al texto que ya tiene, la siguiente linea (siempre según el tutorial): :profiles { :dev { :plugins [[ cider/cider-nrepl \"0.7.0\" ]]}} Hay que cambiar la versión que allí se coloca, puesto que ya no será la \"0.7.0\". En el github de cider-nrepl figura la última versión. Una vez que hayamos agregado esta linea hay que guardar el archivo y hacer desde allí mismo M-x cider-jack-in . Si todo va bien se abre un buffer con el prompt del repl. Tuve que dar varias vueltas hasta que esto último funcionó porque aparecían mensajes de error antes de abrir el buffer o en el mismo buffer. Lo que sucede es que debe coincidir la versión del cider-nrepl con la versión de cider instalada. Cuando sustituía \"0.7.0\" por \"0.8.2\" daba un mensaje diciendo que no encontraba esa versión para bajar desde los repositorios y cuando intentaba con \"0.8.1\" me decía WARNING: CIDERs version (0.8.2-snapshot) does not match cider-nrepl version (0.8.1) Todo se solucionó cuando en vez de poner \"0.8.2\" escribí \"0.8.2- SNAPSHOT \" (por eso hay que prestar atención a cuál es la versión de CIDER que está instalada y copiar el mismo código, el cual seguramente coincide con la versión que indica el github de cider-nrepl ). Y ojo, es todo con mayúsculas , no importa cómo aparezca la versión de CIDER . Y voilá: ; CIDER 0.8.2alpha (package: 20141126.715) (Java 1.7.0_65, Clojure 1.6.0, nREPL 0.2.6) user> Para averiguar la versión instalada de cider: M-x cider-version Un nuevo comienzo Ahora, con todo listo para usarse, podemos seguir algún tutorial, como el de Clojure for the brave and true . El primer capítulo ya nos permite probar las cosas más básicas, como armar un proyecto nuevo con lein , armar el ejecutable java para distribuir, y jugar con el repl.","url":"https://eldiegoefe.github.io/clojure-nuevo-entretenimiento.html","title":"Clojure, nuevo entretenimiento"},{"tags":"blog","text":"Debo tener unos 20 o 30 cds y dvds con fotos, más álbumes almacenados en el disco rígido externo, más unos cuantos subidos a sitios online. Hay que sumar las del celular y la tablet, algunas de las cuales (no todas, y es sisífico intentar diferenciarlas) se subieron automáticamente a las cuentas asociadas en Flickr y Google+, y las que siguen en tarjetas de memoria. la cámara guarda fotos en jpg y en raw, y hasta hace poco grababa ambas. Algunos cds son backups, alguna carpeta puede ser una selección. Hay álbumes backupeados y otros no. Muchos organizados por fecha, otros no. Es un lío llevar al día una colección organizada de imágenes personales, fotos para mostrar a los amigos y familiares, otras para compartir en las redes sociales. Además está la cuestión del volumen de imágenes olvidables que vamos guardando quienes tenemos el síndrome del acopiador absoluto. Borro las que no están nítidas, o las que provienen de apretar el disparador accidentalmente. pero así y todo hay montones de secuencias de \"fotos por las dudas\", para que alguna nos encuentre a todos con los ojos abiertos, o 40 fotos de un cactus con sutiles diferencias de enfoque. Un día me voy a morir y esas fotos se perderán, nadie se va a poner a ver si alguna zafa para mantenerla en un inexistente álbum colectivo, ya sea familiar o compartido entre amigos/camaradas. En la antigüedad uno no sacaba fotos porque era caro, ahora uno saca millones y es lo mismo que no sacar casi ninguna porque el volumen vuelve inmanejable y repelente ponerse a mirarlas. La digitalización cambió muchos hábitos, pero la facilidad no es por sí misma un factor para lo virtuoso. Pasa igual con la música, con la correspondencia. ¿Será que algún día contrataremos a un archivista digital que nos ordene las imágenes, los discos, las memorias? Paraná, capital nacional de lo memorable Fuera de los eventos sociales de los cuales queremos tener recuerdos (porque es fundamental registrar el porrón número dos mil setecientos y las caras de la Choli y la Graciela, aunque no se entienda bien si corresponden al cumpleaños del Gustavo o la confirmación del Gonza, porque el agua de la Pelopincho está igual de podrida): ¿para qué sacamos fotos? Por qué en vez de enfocar un atardecer o la cara del gato no nos copiamos otras semejantes pero sacadas por fotógrafos geniales dueños de equipos siderales. ¿Realmente nos expresamos con las fotografías o dejamos que la lógica del fabricante, difusa o robótica, determine la apertura y el foco de acuerdo a algoritmos que promueven nuestra inteligencia estética más al pleistoceno que a la evolución? ¿Cuántas reflexiones nos traen nuestras imágenes además de \"qué buen culo tiene la Lucrecia\"? ¿Expresan algo valorable las fotos de sujetos siempre sonriendo al medio del cuadro, o las miles de poses y desventuras del perro cruza de cocker quizás con pastor alemán? Va siendo hora de purgar mis memorias. Quizás lo mejor sea borrar todo y a la mierda, total no hay tantas cosas valiosas para recordar, y lo bueno está siempre por venir.","url":"https://eldiegoefe.github.io/la-fotografia-en-la-era-de-lo-memorable.html","title":"La fotografía en la era de lo memorable"},{"tags":"blog","text":"Habitualmente la mayoría de los estudiantes de Bio2/DyM logran cumplir con los objetivos de la asignatura, puesto que al finalizar el cursado demuestran que pudieron adquirir criterios de selección de componentes y de diseño de circuitos asociados con el uso de sensores. Acá vemos una alumna -que no termino de identificar (ustedes la ubican?)- que se dirige a Oro Verde para trabajar junto a su grupo en el montaje en protoboard de su diseño del TP de Medición de Temperatura en un Sistema de Termodesinfección. Alumna en dirección a Oro Verde Muy buenos comentarios en el facebook: ver aca .","url":"https://eldiegoefe.github.io/alumna-en-transito-al-tp-de-temperatura.html","title":"Alumna en tránsito al TP de Temperatura"},{"tags":"blog","text":"A todos los interesados en los problemas de la educación de todos los niveles les recomiendo leer sobre la experiencia finlandesa. Acá hay una charla de un educador y autor finés, subtitulada al castellano, que les recomiendo ver antes de correr a leer \"Finnish Lessons\". Link a los comentarios del fb .","url":"https://eldiegoefe.github.io/charla-de-pasi-sahlberg-educacion-en-finlandia.html","title":"Charla de Pasi Sahlberg - Educacion en Finlandia"},{"tags":"blog","text":"Como ya me siento con nostalgia por el abandono de la tarea docente, voy a empezar a mostrar algunas imágenes de mi pasada labor. Acá pueden ver uno de nuestros trabajos prácticos, en el cual nuestro ayudante de cátedra Jonathan se somete al registro del electrocardiógrafo que armaron nuestros estudiantes durante el último cuatrimestre. Maxi, otro de nuestros ayudantes, no sale en la foto porque justo un instante después debió salir corriendo a llamar una ambulancia, dado que ocurrió un pequeño desperfecto con el bloque de aislación. Estos alumnos que no prestan atención a las normas… (en este caso, hay que decirlo, fue el grupo de Juan y Chelo). Link a los comentarios del fb","url":"https://eldiegoefe.github.io/trabajo-practico-de-ecg.html","title":"Trabajo Practico de ECG"},{"tags":"tecnicismos","text":"Pandoc es un software para hacer conversión de archivos de texto entre distintos lenguajes de markup. Me viene bien probarlo porque me gustaría escribir mis entradas del blog desde org-mode (que uso con mucha frecuencia) y obtener el mismo texto en versión restructuredText, que es el formato en el que escribo el blog (con Pelican). La instalación de Pandoc requirió un pequeño ajuste respecto de lo habitual en Manjaro, ya que el programa no estaba disponible desde los repositorios que vienen por defecto. Tuve que hacer los ajustes que se describen en la wiki de Arch . Estos fueron los 5 pasos: Editar con permisos de administrador el archivo /etc/pacman.conf Agregar esta entrada (en la parte donde se listan los repositorios): [haskell-core] Server = http://xsounds.org/~haskell/core/$arch Agregar claves para confiar en ese repositorio: # sudo pacman-key -r 4209170B # sudo pacman-key --lsign-key 4209170B Actualización de los paquetes # sudo pacman -Syy Instalación propiamente dicha de pandoc (puede ser desde la aplicación gráfica Octopi).","url":"https://eldiegoefe.github.io/pandoc-conversion-de-org-mode-a-restructuredtext.html","title":"Pandoc, conversión de org-mode a restructuredtext"},{"tags":"blog","text":"Hoy apenas fue posible encontrar actividades porque el desgano y el malhumor se propagan como pseudópodos del horrendo calor. Por la ventana irremediablemente abierta entra el ruido del tránsito y canciones que deben parecerle fantásticas a los pibes de la gomería. En esta lava de incomodidad tuve la iniciativa de aprender a usar una famosa extensión de Emacs (org-mode) como agenda electrónica, y la verdad es que todo lo bueno que había escuchado resulta ser cierto. No es la primera vez que uso org-mode, pero sí es la iniciación en las funciones de agenda. Como tengo guardadas decenas y decenas de notas en borradores de Gmail, aproveché para empezar a pasarlas a org-mode. Ahí surgió el motivo para escribir estas lineas. Resulta que el borrador de mail más antiguo que tengo es del 2007, sin asunto, sin texto. Solamente tiene una foto con nombre típicamente insulso de cámara digital: DSC02824 .jpg. Al abrirla, el milagro: Que lástima que sale el reflejo del vidrio y no se aprecia tan bien la obra de arte. Pero el milagro de la recuperación no se queda allí. El buscador de imágenes de Google orienta la búsqueda. Todavía me asombra poder encontrar distintos tamaños de la misma imagen esparcidas por la web. O imágenes parecidas o relacionadas. Llego así a descubrir que es la foto de una muestra itinerante; hay al menos un par de páginas ( 1 , 2 ) en las cuales nos enteramos que la obra ha sido realizada por Caro Reynoso, de 9 años por aquella época (pfff, hoy tendrá 16). La maravilla es también que Firefox tiene un complemento (un add-on) que permite hacer click derecho sobre una foto en cualquier página web, y desde allí: Search by Image for Google nos lleva a otras páginas con la misma imagen. Fue lo que permitió ese reencuentro con mi yo del pasado y esa foto herrumbrada en el gmail, que de lo contrario nunca sabría de dónde salió. La aplicación también sirve para encontrar imágenes con mayor resolución a aquella con la que contamos. Navegando visualmente podemos terminar encontrando la fuente de las mejores imágenes para compartir en las redes sociales. No tiene nada que ver, pero hay otro add-on que la rompe: To Google Translate , que agrega otras dos entradas al menú contextual del navegador. Se usa seleccionando una porción de texto en inglés y al hacer click derecho el menú muestra las opciones \"To Google Translate\" y \"To Google Translate Voice\", que abren una nueva página con la traducción del texto o generan un archivo con el texto leído en inglés, para saber cómo suena. Tremendas las cosas que te traen los días de calor.","url":"https://eldiegoefe.github.io/sorpresas-del-pasado.html","title":"Sorpresas del pasado"},{"tags":"tecnicismos","text":"Empezó a haber problemas para actualizar el sistema ( Mageia ), que mostraba un mensaje diciendo que había actualizaciones listas para instalarse, pero no hacía nada al hacer click sobre instalar . Logré que se produzca la instalación desde una consola con sudo urpmi —auto-update . También dejó de funcionar el programa de configuración del sistema al que se accede desde herramientas/herramientas del sistema/configure su computador . Pero en algún momento volvió a andar. :) Finalmente tuve problemas para instalar Julia . No había manera de que compile, y los errores no parecían lógicos. Aproveché para postear mi primer \"Issue\" en GitHub , en el repositorio de Julia. Estuvo bueno porque me respondieron inmediatamente tratando de ayudarme, con lo cual le perdí un poco el miedo a la experiencia de la interacción. Pero el problema persistía y no quería seguir perdiendo tiempo intentando soluciones que seguían fallando, con síntomas bastante ilógicos, (y cuando la lógica parece no funcionar mi respuesta inmediata es tratar de resetear todo). Sumado a eso, tenía previsto instalar Manjaro desde que me entusiasmé con él en una máquina virtual, y por si fuera poco el disco rígido me pedía una reorganización a gritos, dado que tenía tres cuartas partes inutilizadas por una distribución de particiones anómala, que arrastraba desde la época en que tenía Fedora . La instalación de Manjaro tuvo algunos inconvenientes porque no tengo aún muy clara la cuestión del reemplazo de BIOS por UEFI . Ahora ya no recuerdo tanto, pero el problema que tenía con el instalador gráfico de Manjaro era que no me dejaba formatear y reparticionar a mi gusto (no tenía la opción UEFI ), lo cual sí pude hacer con el instalador tipo terminal, que resultó ser bastante amigable. Lo más complicado al particionar era que el tamaño de las particiones las pedía en sectores, así que tenía que hacer \"regla de tres\" para obtener el número de sectores correspondientes a los 50 Gb que quería, con lo que terminaba tecleando un número de sectores con una cantidad importante de dígitos. Acá pueden ver la pantalla desde la cual escribo, con la nueva instalación de Manjaro. Pantalla con Manjaro No abandoné la tarea de instalar con UEFI , a pesar de que me llevó toda una tarde, porque con este nuevo sistema no hay limitación en el número de particiones del disco. En cambio en el viejo y estándar BIOS sólo se pueden hacer 4 primarias, lo cual complica las cosas al querer tener varias distribuciones de Linux simultáneamente aptas para bootear la computadora, que es lo que quiero hacer. Ahora llevo una semana con Manjaro y viene todo perfecto, pero igual en algún momento voy a continuar con el testeo de distribuciones, así que espero que lo que haya hecho (dejar varias particiones vacías de 50 Gb) sirva para esas posteriores instalaciones. Finalmente, recomiendo que sean valientes y experimenten con diferentes distribuciones de Linux, desde Fedora hasta acá todas han tenido algún problema, pero quizás porque instalo diferentes paquetes y pruebo cambios de configuración y eso lleva a que ocurran fallos. Un usuario un poco más conservador que yo seguramente no va a tener problemas con las distribuciones que les vengo comentando. Guía de instalación de Manjaro con UEFI","url":"https://eldiegoefe.github.io/mageia-y-manjaro.html","title":"Mageia y Manjaro"},{"tags":"tecnicismos","text":"Apuntes del capítulo 10. Lists, de Think Python. Traversing To traverse es el verbo que se refiere al acceso secuencial de los elementos de una lista. La siguiente es una forma de \"traversear\" una lista: for cheese in cheeses : print cheese Si se necesita modificar algún elemento de la lista es mejor hacer: for i in range ( len ( numbers )): numbers [ i ] = numers [ i ] * 2 Agregar elementos a una lista Se pueden agregar elementos individuales a una lista con append . También se pueden agregar elementos con el operador + . Ambas formas tienen diferencias: t1 = [ 1 , 3 , 4 ] t2 = t1 . append ( 10 ) print t1 [ 1 , 3 , 4 , 10 ] print t2 None El método append modifica la lista sobre la cual se aplica pero tiene salida None. El operador + sí tiene una salida: t1 = [ 1 , 3 , 4 ] t2 = t1 + [ 10 ] print t1 [ 1 , 3 , 4 ] print t2 [ 1 , 3 , 4 , 10 ] Se puede agregar una lista (t2) a otra lista (t1) con extend : t1 = [ 1 , 3 , 4 ] t2 = [ 2 , 2 ] t1 . extend ( t2 ) print t1 [ 1 , 3 , 4 , 2 , 2 ] Salidas de los métodos de lista Las salidas de los métodos aplicados a listas son todos void , es decir que no dan ningún valor de salida. Por ejemplo el método sort ordena una lista, modifica esa lista (la muta) pero la salida es None (aunque la lista efectivamente cambió). Reduce Fat Fast or Map, Filter and Reduce Reduce : una operación que combina una secuencia de elementos en un solo valor (por ejemplo: la suma de todos los elementos). Es un patrón de procesamiento que traversea una secuencia y acumula los elementos en un solo resultado. Map : una operación que aplica una función a cada elemento de una lista (por ejemplo: poner en mayúscula la inicial de las palabras que forman una lista). El mapeo es una relación en la cual cada elemento de una lista corresponde a un elemento en otra lista. Por ejemplo: una lista es un mapeo de índices a elementos. Filter : una operación que selecciona algunos elementos de una lista, basándose en algún criterio (por ejemplo: las palabras de una lista cuyas letras estén todas en mayúsculas). Es un patrón de procesamiento que traversea una lista y selecciona los elementos que satisfacen algún criterio especificado. Las operaciones más comunes sobre una lista pueden ser expresadas como una combinación de map, filter y reduce. Borrar elementos de una lista Hay distintos modos: pop : modifica la lista t = [ 2 , 4 , 8 ] x = t . pop ( 1 ) print t [ 2 , 8 ] print x 4 del : cuando no se necesita el elemento borrado t = [ 2 , 4 , 8 , 16 ] del t [ 1 ] print t [ 2 , 8 , 16 ] Obs: pueden usarse slices. del t[1:3] —-> [2, 16] remove : cuando no se conoce el índice, pero sí el elemento a borrar t = [ 2 , 4 , 8 ] t . remove ( 8 ) print t [ 2 , 4 ]","url":"https://eldiegoefe.github.io/listas-en-python.html","title":"Listas en Python"},{"tags":"tecnicismos","text":"Indice del Tutorial Parte 1 . Cómo armar un repositorio local Parte 2 . Cómo subir el repositorio local al remoto Parte 3 . Cómo colaborar en un mismo repositorio remoto Parte 4 . Cómo resolver conflictos Para ver las versiones (en inglés) en las cuales se basa este tutorial, podés visitar la página de Software Carpentry Cuándo aparecen los conflictos El sistema de control de versiones permite que la gente trabaje en paralelo editando sus programas en código fuente. En realidad, se puede usar para cualquier tipo de archivo con texto plano (me parece fantástico para informes, relatos, blogs como este, etc). Trabajar en paralelo implica que en algún momento dos personas se van a pisar y van a modificar una misma porción de texto. Esto podría pasarle incluso a una sola persona: si trabajamos un mismo fragmento en la computadora de escritorio en casa, en una notebook y también en una PC en el laburo, podríamos haber hecho diferentes cambios en cada copia. El control de versiones nos ayuda a manipular esos conflictos dándonos herramientas para resolver esos cambios superpuestos. Un conflicto impostado Para ver cómo se resuelven estos conflictos vamos a subir al repositorio emacs que posee eldiegoefe el archivo manifiesto.txt con el siguiente texto: Un fantasma recorre Europa: el fantasma del comunismo. Todas las fuerzas de la vieja Europa se han unido en santa cruzada para acosar a ese fantasma: el Papa y el zar, Metternich y Guizot, los radicales franceses y los polizontes alemanes. A continuación vamos a hacer que los dos usuarios con los que trabajamos en la parte 3 ( eldiegoefe y bioingenierodiegol ) realicen cambios de este archivo en sus repositorios locales. El usuario bioingenierodiegol agregar una linea a su versión local de manifiesto.txt : Un fantasma recorre Europa: el fantasma del comunismo. Todas las fuerzas de la vieja Europa se han unido en santa cruzada para acosar a ese fantasma: el Papa y el zar, Metternich y Guizot, los radicales franceses y los polizontes alemanes. Marx se la come. Mientras tanto el usuario eldiegoefe agrega otra oración, un poco menos revisionista: Un fantasma recorre Europa: el fantasma del comunismo. Todas las fuerzas de la vieja Europa se han unido en santa cruzada para acosar a ese fantasma: el Papa y el zar, Metternich y Guizot, los radicales franceses y los polizontes alemanes. Marx es re-grosso, vieja. Por cosas de la vida, bioingenierodiegol hace su secuencia 1. git add manifiesto.txt , 2. git commit -m \"Agregue linea ‘Marx se la come'\" y 3. git push origin master de modo que cuando termina de hacerlo, en el repositorio remoto (en Github) el archivo manifiesto.txt habla de la gastronómica vida sexual de Marx. Experimentando la frustración del militante El respetuoso militante eldiegoefe también modifica su copia local de manifiesto.txt , hace su git add y su git commit pero veamos qué sucede cuando intenta el git push : [eldiegoefe]$ git push origin master To https://github.com/eldiegoefe/emacs.git ! [rejected] master -> master (fetch first) error: failed to push some refs to 'https://github.com/eldiegoefe/emacs.git' hint: Updates were rejected because the remote contains work that you do hint: not have locally. This is usually caused by another repository pushing hint: to the same ref. You may want to first integrate the remote changes hint: (e.g., 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. El sistema nos da un error, pero también nos dice el motivo por el cual fue rechazado el push : el remoto contiene trabajo que no poseemos localmente. Esto es frecuentemente causado por otro usuario actualizando el repositorio en Github en el tiempo que transcurre entre el momento que hicimos la última sincronización con el repositorio remoto y el tiempo en el que intentamos el git push . En su mensaje, como el sistema sabe de esta posibilidad, sugiere primero integrar los cambios del remoto con un git pull antes de volver a intentar nuestro git push . Comenzando a solucionar la cuestión Es decir que Git detecta que los cambios hechos en una copia se superponen con los hechos en la otra copia, y nos impide pisar o sobreescribir el trabajo. Vamos entonces a hacer el git pull desde Github y fundir esos cambios remotos en nuestra copia local. [eldiegoefe]$ git pull origin master remote: Counting objects: 3, done. remote: Compressing objects: 100% (1/1), done. remote: Total 3 (delta 2), reused 3 (delta 2) Unpacking objects: 100% (3/3), done. From https://github.com/eldiegoefe/emacs * branch master -> FETCH_HEAD 142c683..efe8a9a master -> origin/master Auto-merging manifiesto.txt CONFLICT (content): Merge conflict in manifiesto.txt Automatic merge failed; fix conflicts and then commit the result. Ahora Git nos avisa que hay un conflicto y marca el archivo donde éste se produce ( manifiesto.txt ). Veamos ahora el contenido de este archivo con cualquier editor: Un fantasma recorre Europa: el fantasma del comunismo. Todas las <<<<<<< HEAD fuerzas de la vieja Europa se han unido en santa cruzada para acosar a ese fantasma: el Papa y el zar, Metternich y Guizot, los radicales franceses y los polizontes alemanes. Marx es re-grosso, vieja. ======= fuerzas de la vieja Europa se han unido en santa cruzada para acosar a ese fantasma: el Papa y el zar, Metternich y Guizot, los radicales franceses y los polizontes alemanes. Marx se la come. >>>>>>> efe8a9a434f1a2609a16660f7d78c82fadad7d7c Vemos que Git ha modificado el archivo local colocando marcas para separar las dos versiones. Veo que ambas versiones no solamente difieren en la oración que habla de Marx, sino también en el contenido de las últimas tres lineas (no empiezan y terminan con las mismas palabras). ¡No es facil engañar a Git! Las marcas son <<<<<<< HEAD , el separador ======= (que divide los cambios conflictivos en las dos versiones) y >>>>>>> efe8a9a434f1a2609a16660f7d78c82fadad7d7c . Lo que está junto al HEAD es el contenido local, mientras lo que está tras el separador (antes del identificador de la revisión que acabamos de bajar) es el contenido agregado remotamente. Solución en proceso Nos corresponde editar este archivo para remover las marcas y reconciliar los cambios. Podemos hacer lo que nos plazca: mantener los cambios que hicimos en el repositorio local, mantener los cambios hechos en el repositorio remoto, escribir algo nuevo que reemplace a ambos, o eliminar completamente ambos cambios. Hagamos una mezcla: Un fantasma recorre Europa: el fantasma del comunismo. Todas las fuerzas de la vieja Europa se han unido en santa cruzada para acosar a ese fantasma: el Papa y el zar, Metternich y Guizot, los radicales franceses y los polizontes alemanes. Marx es re-grosso, pero Engels es más grosso todavía. Ahora eldiegoefe pide enterarse de cómo está la situación: [eldiegoefe]$ git status # On branch master # You have unmerged paths. # ( fix conflicts and run \"git commit\" ) # # Unmerged paths: # ( use \"git add <file>...\" to mark resolution ) # # both modified: manifiesto.txt # no changes added to commit (use \"git add\" and/or \"git commit -a\") Tenemos que agregar los cambios y comitearlos antes de volver a intentar el push: [eldiegoefe]$ git add manifiesto.txt [eldiegoefe]$ git status # On branch master # All conflicts fixed but you are still merging. # ( use \"git commit\" to conclude merge ) # # Changes to be committed: # # modified: manifiesto.txt [eldiegoefe]$ git commit -m \"Conflicto arreglado en manifiesto.txt\" [master 4f17908] Conflicto arreglado en manifiesto.txt [eldiegoefe]$ git status # On branch master nothing to commit, working directory clean Listo el pollo Ahora sí intentamos el push: [eldiegoefe]$ git push origin master Counting objects: 10, done. Delta compression using up to 4 threads. Compressing objects: 100% (6/6), done. Writing objects: 100% (6/6), 665 bytes | 0 bytes/s, done. Total 6 (delta 4), reused 0 (delta 0) To https://github.com/eldiegoefe/emacs.git efe8a9a..4f17908 master -> master Esta vez pudimos subir todo exitosamente. Ahora vamos a ver qué le pasa al otro usuario bioingenierodiegol cuando quiere actualizar su repo local: [bioingenierodiegol] $ git pull origin master remote: Counting objects: 6, done. remote: Compressing objects: 100% (2/2), done. Unpacking objects: 100% (6/6), done. remote: Total 6 (delta 4), reused 6 (delta 4) From https://github.com/eldiegoefe/emacs * branch master -> FETCH_HEAD efe8a9a..4f17908 master -> origin/master Updating efe8a9a..4f17908 Fast-forward manifiesto.txt | 3 ++- 1 file changed, 2 insertions(+), 1 deletion(-) Sin problemas se ha cerrado el círculo, ambos usuarios tienen el mismo contenido en el archivo que había generado el conflicto: Un fantasma recorre Europa: el fantasma del comunismo. Todas las fuerzas de la vieja Europa se han unido en santa cruzada para acosar a ese fantasma: el Papa y el zar, Metternich y Guizot, los radicales franceses y los polizontes alemanes. Marx es re-grosso, pero Engels es más grosso todavía. El usuario bioingenierodiegol no tuvo necesidad de hacer la fusión (merge) porque Git sabe que algún otro ya lo hizo. Los usuarios tienden a dividir sus programas y textos en múltiples archivos (en vez de meter todo en un mismo archivo enorme) porque esto facilita lo que acabamos de ver: habilidad del sistema de control de versiones para fusionar cambios conflictivos. Hay también otro beneficio: siempre que hay conflictos repetidos en un archivo en particular, el sistema de control de versiones está esencialmente tratando de decirle a sus usuarios que deberían clarificar quién es el responsable de cada cosa, o encontrar un modo de dividir el trabajo de modo diferente. Claves Los conflictos ocurren cuando dos o más personas cambian el mismo archivo al mismo tiempo. El sistema de control de versiones no permite que la gente sobreescriba ciegamente los cambios realizados por otras personas. En cambio, resalta los conflictos para que los puedan resolver.","url":"https://eldiegoefe.github.io/tutorial-sobre-control-de-versiones-parte-4.html","title":"Tutorial sobre control de versiones (parte 4)"},{"tags":"blog","text":"No recuerdo en qué momento fue que pronuncié las palabras mágicas, pero cuando sea que haya ocurrido, se abrieron portales hacia temas inexplorados dentro de un mundo que creía conocer. En los últimos meses (¿10? ¿20?) me encontré con: un lenguaje de programación fantástico por su sencillez y potencia ( Python ), junto con un conjunto de librerías para tareas científicas: matplotlib, numpy, pandas, etc. la idea del control de versiones (que es una herramienta magnífica para quienes escribimos todo tipo de textos que al ir corrigiendo dejan una huella dificil de seguir desde su versión inicial hacia su versión actual, ya sea que se trate de programas, entradas de blog o informes científicos o técnicos). En particular Git y GitHub . el deseo de colaborar en el desarrollo colectivo de software, cosa que creo que en el futuro de mediano plazo espero concretar. Avancé con el aprendizaje de Emacs (con Prelude , actualmente en uso, y Ergoemacs , que por el momento dejé de usar pero igual creo que está buenísimo, de ahí surgió el interés por los teclados con distribución Dvorak que uso actualmente), descubrí el IPython Notebook (y encadenado con eso ahora descubrí el lenguaje Julia ). Aca pueden ver una imagen del IPython Notebook mientras lo usaba para un trabajo de Dosimetría. Hablando de lenguajes también empecé a ver algo de LISP (el interés apareció cuando quise entender cómo configurar Emacs, sobre todo por esta entrevista de Sacha Chua ), pero luego me explotó la cabeza con solo leer la introducción del libro que ahí recomienda Bozhidar Batsov que se llama Practical Common Lisp de Peter Seibel). Miré decenas de conferencias y tutoriales sobre programación, análisis de datos, herramientas de matemática, etc. Entre las series de videos que recuerdo, a modo de ejemplo, me gustaron los siguientes (aunque no vi absolutamente todo, me está quedando material para ver): RT2011 Screencasts RT2011 Lectures RT2011 Materiales del curso IPython Notebook Tutorial (Roshan) Instalé varias distribuciones de Linux ( Mint , Fedora , Mageia , Manjaro ), experimenté con KDE , aprendí a usar el terminal para instalar programas, navegar el sistema y mantener el blog con GIT y Pelican . Encontré personas que dicen cosas interesantes sobre enseñanza, principalmente de ciencias, pero también sobre sistemas educativos en general (como todo lo referente a las escuelas finlandesas). Por ejemplo, estas dos charlas que vi hace poco, del SciPy 2014 me parecieron fantásticas: Computational Thinking is Computational Learning | Lorena Barba Software Carpentry | Greg Wilson Antes que eso me entusiasmé también con los hackerspaces , la tecnología de placas electrónicas orientadas al aprendizaje y al hobby (como Arduino ). También Processing , KiCAD , y algún otro software libre relacionado. Esta es una foto de cuando pasé por NoiseBridge , donde se ven marcados otros hackerspaces. También tuve la experiencia de trabajar con estudiantes entusiastas y autónomos con quienes empezamos a compartir todas estas cosas. Hubiéramos avanzado más si los tiempos de la facultad y el desgano que producen sus obligaciones me hubieran afectado un poco menos. ¿En qué usaba mi tiempo antes? ¿Cómo es que me había pasado desapercibido todo esto?","url":"https://eldiegoefe.github.io/autoaprendizajes.html","title":"Autoaprendizajes"},{"tags":"tecnicismos","text":"Indice del Tutorial Parte 1 . Cómo armar un repositorio local Parte 2 . Cómo subir el repositorio local al remoto Parte 3 . Cómo colaborar en un mismo repositorio remoto Parte 4 . Cómo resolver conflictos Para ver las versiones (en inglés) en las cuales se basa este tutorial, podés visitar la página de Software Carpentry Probando el cooperativismo Vamos a practicar cómo se realiza una colaboración a través de un repositorio en Github. Para ello nada mejor que colaborar con uno mismo. Lo que hago es trabajar con dos cuentas en Github, corriendo un usuario en mi PC de escritorio y el otro dentro de una máquina virtual dentro de la misma PC (aunque también lo podría hacer desde una notebook, o desde otra sesión de esta misma computadora, pero decir que uno corre una máquina virtual con Linux suena mucho más god-level ). No voy a detenerme a explicar nada sobre las máquinas virtuales porque además de ser demasiado sencillo también es off-topic, y no quiero offtopiquearme. ¡Cómprense un amiguito y chau! Vamos a seguir haciendo las pruebas usando el repositorio emacs con el que estaba nerdeando/tinkereando/boludeando (ahhhh, la flexibilidad del lenguaje) en la parte 2. Voy a darle permiso de acceso ( no-carnal ) a un tercero ( bioingenieroDiegol , mi otra cuenta). Con este propósito me dirijo a la página del repositorio en Github, y selecciono Settings/Collaborators. Una vez allí agrego a bioingenieroDiegol . Clonación Luego me cambio a la PC virtual y allí ya vestido como bioingenieroDiegol voy a clonar el repositorio en esa virtuosa computadora: [bioingenierodiegol]$ git clone https://github.com/eldiegoefe/emacs.git [bioingenierodiegol]$ cd emacs [bioingenierodiegol]$ git status On branch master Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean Ahora tengo los mismos archivos en la compu de bioingenieroDiegol que en el repositorio de Github. Además sucede algo muy curioso, sin haber hecho git remote add origin https://github.com/eldiegoefe/emacs.git vamos a tener: [bioingenierodiegol]$ git remote -v origin https://github.com/eldiegoefe/emacs.git (fetch) origin https://github.com/eldiegoefe/emacs.git (push) Vemos que la url y el alias estaban en el repositorio. Es por convención que se usa el nombre de origin como alias. Cuando más adelante quiera hacer el git push voy a usar directamente git push origin master y va a funcionar. Cambios hechos por el colaborador A continuación hago algunos cambios en los archivos locales de bioingenieroDiegol (para esta prueba puedo agregar un archivo nuevo o modificar los existentes) y luego voy a tratar de subirlos al repo remoto (que sigue siendo propiedad de eldiegoefe ). Para esta última tarea es que hube agregado (¡caramba!) a bioingenieroDiegol a la lista de colaboradores (porque para la clonación no necesitaba permisos). [bioingenierodiegol]$ touch archivo-vacio.txt [bioingenierodiegol]$ git add archivo-vacio.txt [bioingenierodiegol]$ git commit -m \"Agrego archivo-vacio.txt\" [bioingenierodiegol]$ git status On branch master Your branch is ahead of 'origin/master' by 1 commit. (use \"git push\" to publish your local commits) nothing to commit, working directory clean Git es muy comunicativo y nos dice lo que sucede y cómo tenemos que continuar. Nuestra rama master local está adelantada respecto de la rama master que se encuentra en origin (origin/master) por 1 commit (el que acabamos de realizar). El colaborador sube sus cambios a Github Tenemos que hacer un push para llevar los cambios locales de bioingenieroDiegol al remoto. No hay nada que comitear (ni nada que festejar, aún). Vamos a hacerle caso a Git, vean lo que sucede tras un git push origin master hecho por bioingenieroDiegol (no se confundan con el prompt de esa consola, que es manjaro-efe% ): Ningún error, todo bien (vean que tuve que responder con el username y password del colaborador bioingenieroDiegol , bah, el password no se ve…). El dueño original del repositorio actualiza su repo local Finalmente el dueño original del repositorio (yo, eldiegoefe ) quiere actualizar su repositorio local con los cambios hechos por todos los contribuyentes (en este caso sólo bioingenieroDiegol ). Para ello hace un pull desde el remoto: [eldiegoefe]$ git pull origin master remote: Counting objects: 2, done. remote: Compressing objects: 100% (1/1), done. remote: Total 2 (delta 1), reused 2 (delta 1) Unpacking objects: 100% (2/2), done. From https://github.com/eldiegoefe/emacs * branch master -> FETCH_HEAD 2c817b6..f94cdfa master -> origin/master Updating 2c817b6..f94cdfa Fast-forward archivo-vacio.txt | 0 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 archivo-vacio.txt El sistema le indica que se actualizó, que un archivo cambió ( insertions y deletions son cambios en el interior de los archivos, como no hubo ningun cambio entonces quedan en cero). El método por el cual se hizo la fusión (merge) entre el remoto y el local fue Fast-forward y no hubo ningún conflicto. ¡Fiesta! Claves Un repositorio local Git puede estar conectado a uno o más repositorios remotos. Se puede usar el protocolo HTTPS para conectarse al repositorio remoto (hasta que uno aprenda a lidiar con el protocolo SSH , que es más seguro). Con git push se copian los cambios del repositorio local hacia el remoto Con git pull se copian los cambios desde el repositorio remoto hacia el repositorio local. Con git clone se copia un repositorio remoto para crear un repositorio local con un remote automáticamente llamado origin . ¡basta de hacer chistes malos!","url":"https://eldiegoefe.github.io/tutorial-sobre-control-de-versiones-parte-3.html","title":"Tutorial sobre control de versiones (parte 3)"},{"tags":"tecnicismos","text":"Me cuesta encontrar un modo cómodo de trabajar con Emacs y otros programas en KDE . Como creo que voy encontrando cosas que me resultan funcionales, las resumo aca. Sirve trabajar con 4 workspaces (areas de trabajo) en KDE . En el espacio 1 tengo el navegador, en el 2 tengo Emacs y en el 4 tengo un terminal. Cambio de espacio con C-7 (espacio 1), C-8 (espacio 2), C-9 (espacio 3) y C-0 (espacio 4). Para mover la ventana de un programa a un espacio de trabajo lo hago con M-7, M-8, M-9 y M-0 (los fans de emacs saben que M es Meta, y que eso significa en un teclado convencional la tecla Alt). Para elegir estos atajos de teclado hay que ir a Preferencias del Sistema / Accesos rápidos y gestos / Accesos rápidos de teclado globales y elegir en \"Componente de KDE \" la opción \" KWIN \", allí es fácil darse cuenta cómo continuar. De paso, hay una opción en KDE para que cada espacio de trabajo sea independiente de los otros, así que pueden tener widgets y fondos de pantalla diferentes, lo que ayuda a diferenciarlos. Emacs En Emacs uso estas cosas que están buenísimas: Intercambié la funcionalidad de las letras U y X (estoy en Dvorak) con estas lineas en el archivo de configuración de emacs: ( keyboard-translate ?\\C-x ?\\C-u ) ( keyboard-translate ?\\C-u ?\\C-x ) Cambié el keybinding para ir a la linea anterior a C-t, de manera que queda junto a C-n, que es para ir a la linea siguiente: ( global-set-key ( kbd \"C-t\" ) 'previous-line ) Uso C-a y C-e para ir al principio y final de cada linea. Uso C-l para que se centre la ventana alrededor del cursor (muy util cuando estamos cerca del borde inferior de la pantalla). Borro palabras hacia atrás con M-del. Tengo que revisar por qué no anda C-x del (que es backward-kill-sentence). Da el mensaje \"C-x deletechar is undefined\". Se ve que es un problema con la tecla del . Uso el acorde jj que ejecuta ace-jump-word-mode que permite navegar hacia la letra inicial de una palabra de un modo muy veloz (y entretenido). Tendría que acostumbrarme a usar también estos: jk: Jump to a character(ace-jump-char-mode) jl: Jump to the beginning of a line(ace-jump-line-mode) JJ : Jump back to previous buffer(prelude-switch-to-previous-buffer) xx: Executed extended command(execute-extended-command) yy: Browse the kill ring(browse-kill-ring) Para navegar entre los cambios uso el acorde uu que muestra el historial como un arbol ( undo-tree-visualize ). Para saltar de una ventana a otra uso el habitual C-x o (en realidad hago C-u o gracias al truco del intercambio entre la x y la u que mencioné antes), pero ejecuta ace-window que funciona semejante a los ace-jumps . Lo mismo se logra con C- TAB . Para intercambiar ventanas activas sirve C-c s. Es una función de Prelude y sólo funciona si hay 2 ventanas en pantalla. Para aumentar la indentación de una región o bloque uso C-x TAB . Para borrar un rectángulo, por ejemplo la indentación de un bloque, pongo la marca y el punto en los extremos de la región y luego C-x r k. Uso lgrep para buscar archivos por contenido. Es interactivo, va preguntando la fórmula de búsqueda, el tipo de archivo y el directorio. Projectile tiene también un buscador de contenido dentro de los archivos de un proyecto, lo tengo que probar: C-c p g Recién instalo el paquete workgroups2 que gestiona las sesiones, incluyendo la posición de las ventanas. Lo descubrí gracias a una pregunta que hice en emacs.stackexchange . Para ejecutar algún cambio de configuración (en .emacs o en custom.el) puedo marcar la región que contiene el cambio y hacer M-x eval-region. Prelude tiene C-x m para iniciar eshell . Sin embargo no puedo ejecutar el environment para el blog (. bin/activate desde el directorio ENV ). Finalmente, para repetir el último comando se usa C-x z (y luego si desea repetirse nuevamente, basta con apretar la z sola).","url":"https://eldiegoefe.github.io/escritorio-comodo-y-atajos-de-teclado.html","title":"Escritorio cómodo y atajos de teclado"},{"tags":"tecnicismos","text":"Hay un lindo tutorial interactivo para aprender a usar Git en este enlace , recomendado desde el GitHub de Software Carpentry . Me gustó también el video Git for ages 4 and up (no entendí nada la presentación del expositor, pero el resto sí). Al sitio interactivo llegué desde Astropy , en particular de la página How to make a code contribution , que parece que vale la pena leer, porque explica el workflow que utilizan, cosa que no había encontrado hasta ahora (que te expliquen cómo es la secuencia de acciones de un trabajo, su lógica, los trucos, puede ahorrar muchos problemas asociados con la inexperiencia). El tutorial interactivo va mostrando hints , de los cuales quiero acordame: add all : You can also type git add -A . where the dot stands for the current directory, so everything in and beneath it is added. The -A ensures even file deletions are included. git reset : You can use git reset <filename> to remove a file or files from the staging area. More useful logs : Use git log —summary to see more information for each commit. You can see where new files were added for the first time or where files were deleted. It's a good overview of what's going on in the project. Branching . Branches are what naturally happens when you want to work on multiple features at the same time. You wouldn't want to end up with a master branch which has Feature A half done and Feature B half done. Rather you'd separate the code base into two \"snapshots\" (branches) and work on and commit to them separately. As soon as one was ready, you might merge this branch back into the master branch and push it to the remote server. Tengo dudas con esto: si luego de hacer un pull desde un repositorio remoto, hay cambios respecto de lo que tenía en el repositorio local, ¿qué me dice Git si hago git status ? Más material: Version control for fun and profit Revision control software Git for Scientists Cosas interesantes del artículo de Fernando Perez: Se pueden generar alias para ejecutar comandos largos con nombres cortos. Por ejemplo git config —global alias.slog \"log —oneline —topo-order —graph\" hace que luego funcione git slog . Hay un video de Jessica Kerr en el cual hace algunos buenos comentarios: Recomienda tener un gestor gráfico para ver el arbol de un repositorio, y usarlo antes de comitear para anticipar cómo debería verse el arbol, y entonces luego de comitear verificar en el grico que lo realizado coincide con lo que queríamos hacer. Quizás esto lo pueda hacer origin/master es un puntero (como HEAD ) que apunta hacia donde estaba el HEAD en origin la última vez que lo visitamos. No conviene usar pull porque es un fetch + merge . Hacerlo esto último por separado brinda mayor control, permite ver cuál es el merge que hacemos. El push hace lo mismo que el pull pero en dirección opuesta (desde nuestro repo hacia el remoto). Como tiene que hacer un merge, sólo lo permitirá si puede hacer un fast-forward en el remoto, esto es decir: si no hubo otro usuario que hiciera cambios en el remoto desde la última vez que sincronizamos nuestro repo local con el remoto. Por eso, si hubiese habido algún cambio en el remoto, deberá hacerse un pull (o un fetch+merge) antes del push.","url":"https://eldiegoefe.github.io/mas-locura-con-git.html","title":"Más locura con Git"},{"tags":"tecnicismos","text":"Indice del Tutorial Parte 1 . Cómo armar un repositorio local Parte 2 . Cómo subir el repositorio local al remoto Parte 3 . Cómo colaborar en un mismo repositorio remoto Parte 4 . Cómo resolver conflictos Para ver las versiones (en inglés) en las cuales se basa este tutorial, podés visitar la página de Software Carpentry Armar un proyecto (repositorio) en GitHub Para subir el repositorio local a GitHub es indispensable tener una cuenta allí (que es gratis, así que a relajarse y disfrutar). Es bastante intuitivo el modo de crear un repositorio. Pero pongo un par de imágenes, a modo de muestra. En la pantalla anterior hay que hacer click sobre el botón verde que dice \" + New repository \", que nos deposita en la imagen de abajo. Solamente ponemos el nombre y la descripción del repositorio. Los repositorios privados son pagos, así que por lo general uno elige \" Public \". No hace falta inicializarlo con un readme , ni agregar un .gitignore , ni seleccionar una licencia. Basta con apretar el botón verde de \" Create repository \" y chan, ya tenemos repositorio sin tener que acercarnos a la farmacia. La imagen que sigue es para mostrar que la dirección del nuevo repositorio, aún vacío, pero listo para clonarse sin parecerse a la oveja Dolly, se encuentra sobre el panel de la izquierda, donde dice \" HTTPS clone URL \". Copiamos de ahí esa dirección y nos dirigimos con presteza y gráciles movimientos al terminal, que debería estar ubicado (controlar con pwd) en el directorio de nuestro repositorio local. Escribimos (en mi caso estoy trabajando sobre un nuevo repositorio para alojar la configuración de mi Emacs): Setear el repositorio remoto desde nuestro repo local En la siguiente orden le estamos diciendo a Git que agregue como repositorio remoto la URL que le pasamos, y además a esa dirección le asignamos el alias \" origin \" (se suele utilizar origin por convención, pero podríamos haberlo llamado \" farodelfindelmundo \"). Podemos chequearlo con git remote -v . $ git remote add origin https://github.com/eldiegoefe/emacs.git $ git remote -v origin https://github.com/eldiegoefe/emacs.git (fetch) origin https://github.com/eldiegoefe/emacs.git (push) Subir repo local al remoto Ahora es superfacil subir los archivos de nuestro repositorio local hacia el repositorio remoto (en github.com): $ git push origin master Cuando te dicen \"master\" es porque sos grosso, sabelo. Además \" master \" es la única rama (branch) que por el momento tenemos en el recientemente creado repositorio remoto y vacío (se me cae un lagrimón). También es la única rama que tenemos en el repo local (lo podemos chequear con git branch ). Al ejecutar el git push el sistema les va a pedir primero el nombre de usuario y luego la contraseña (que se hicieron en github, porque hacia allí está subiendo los archivos). ¿Problemas? Si acaso diera un error, como me sucedió en el ejemplo que les estoy relatando, es porque el repositorio remoto en vez de estar vacío tiene algún contenido. Debemos entonces, antes de subir cosas, bajar ese contenido que no tenemos en el repositorio local (en mi caso el archivo con la licencia), con la orden \" git pull \" ( git push empuja desde el local hacia el remoto, git pull tira desde el remoto hacia el local): $ git pull origin master warning: no common commits remote: Counting objects: 3, done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 0 (delta 0) Unpacking objects: 100% (3/3), done. From https://github.com/eldiegoefe/emacs * branch master -> FETCH_HEAD * [new branch] master -> origin/master Merge made by the 'recursive' strategy. LICENSE | 675 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 1 file changed, 675 insertions(+) create mode 100644 LICENSE Cuando se agregan cosas (al repo local) hay que comitearlas, como de costumbre. Por eso, al ejecutar el comando anterior el sistema pide un mensaje de \" commit \" y luego da el resultado que muestro (por ahora es un jeroglífico, pero tiene sentido, eh). En mi caso, el archivo LICENCE que sólo estaba en el remoto, ahora está también en el local, lo cual puede verse haciendo: $ ls custom.el LICENSE preload Podemos chequear el estado del repo local: $ git status # On branch master nothing to commit, working directory clean No problem Ahora sí volvemos a intentar subir los archivos que faltan hacia origin (el repo remoto, solo, triste y abandonado): $ git push origin master Counting objects: 12, done. Delta compression using up to 4 threads. Compressing objects: 100% (8/8), done. Writing objects: 100% (11/11), 2.88 KiB | 0 bytes/s, done. Total 11 (delta 2), reused 0 (delta 0) To https://github.com/eldiegoefe/emacs.git e23c676..2c817b6 master -> master \" Joyines\", diría el Tano. Si ahora hiciésemos un pull desde el remoto, no debería pasar nada porque ambos repos son iguales. Veamos: git pull origin master From https://github.com/eldiegoefe/emacs * branch master -> FETCH_HEAD Already up-to-date. En cambio, si alguien actualizó el remoto con algún archivo nuevo, o modificó los existentes, al hacer el pull se incorporarían al repo local esos cambios (lo cual siempre hay que hacer antes de hacer un push hacia el remoto). La bandera '-u' Es común encontrar que git push se acompañe de la bandera '-u'. Vamos a dejar eso para después, pero es casi seguro que se usa para fijar origen y destino, de manera que un git push desnudo, funcionará después con las ramas origen y destino que acompañaban al -u (que es algo de --upstream nosecuanto). Pero estoy tocando de oido, mejor veamos más adelante. Nos vemos en la parte 3 .","url":"https://eldiegoefe.github.io/tutorial-sobre-control-de-versiones-parte-2.html","title":"Tutorial sobre control de versiones (parte 2)"},{"tags":"tecnicismos","text":"Estuve escribiendo algunas entradas para el blog y encontré algunas cosas que vale la pena recordar, que quedan anotadas aca: El modo abbrev tendría que desactivarlo globalmente porque cada vez que escribo la palabra \" con \" (en modo restructuredText) y hago un espacio me lo expande a un texto que no deseo (content…). Se desactiva con M-x abbrev-mode . Mejor aún, encontré cómo editar la lista de abreviaturas. Es así: M-x list-abbrevs y se abre un buffer con las abreviaturas, que se puede editar. Ver de paso \" Using Emacs Abbrev Mode for Abbreviation para un facil tutorial sobre el uso elegante de abbrev-mode. Para seleccionar un rectángulo hay que poner la marca (con C- SPC ) en un extremo del mismo y el punto (es decir el cursor) en el otro extremo. Así, para borrar ese rectángulo se usa kill-rectangle (C-x r k). Para indentar un párrafo, se lo selecciona y luego se aprieta C-x TAB . Esto sube la indentación en uno. Se puede repetir C-x TAB (aunque parezca que no hay región seleccionada). Agregué dos nuevos snippets para escribir en restructuredtext. Los copio debajo. Links # -*- mode: snippet; # name: link # key: lk # -- \\`${1:texto del link}\\`_ .. _$1: ${2:path} $0 Imágenes # -*- mode: snippet; # name: imagen # key: im # expand-env: ((yas-indent-line 'fixed)) # -- .. image:: ${1:path} :scale: ${2:100}% :width: ${3:100}% :align: ${4:$$(yas-choose-value '(\"right\" \"center\" \"left\"))} :alt: $5 $0","url":"https://eldiegoefe.github.io/emacs-y-restructuredtext.html","title":"Emacs y restructuredText"},{"tags":"tecnicismos","text":"En el sitio de Software Carpentry hay un buen tutorial sobre el uso de sistemas de control de versiones. Estos apuntes son prácticamente la traducción de esas instrucciones. Indice del Tutorial Parte 1 . Cómo armar un repositorio local Parte 2 . Cómo subir el repositorio local al remoto Parte 3 . Cómo colaborar en un mismo repositorio remoto Parte 4 . Cómo resolver conflictos Para ver las versiones (en inglés) en las cuales se basa este tutorial, podés visitar la página de Software Carpentry Configuración La primera vez que se usa Git en una máquina hay que configurar al menos el nombre del usuario y su email. También puede elegirse el editor por defecto. Son comandos que se ejecutan una sola vez. Por ejemplo: $ git config - -global user . name \"Vlad Dracula\" $ git config - -global user . email \"vlad@tran.sylvan.ia\" $ git config - -global color . ui \"auto\" $ git config - -global core . editor \"emacs\" La tercer opcion es para que los mensajes con los cuales responde Git en el terminal estén coloreados. La cláusula \"—global\" indica que esta configuración no se limita a un proyecto particular, sino que será utilizado en todos los proyectos (repositorios) de esa computadora. Para verificar el nombre de usuario se usa git config user.name . Inicialización Se puede comenzar a trabajar con un proyecto usando el siguiente comando desde el subdirectorio en el cual se alojarán los archivos del proyecto: $ git init De esta manera se crea un subdirectorio oculto (.git) donde se irá alojando todo el historial de archivos, en todas sus versiones, a medida que se vayan produciendo. Agregar un archivo al proyecto Creamos un archivo de texto con cualquier editor (no necesariamente el elegido en la configuración) y lo almacenamos en el directorio del proyecto. Por ejemplo una canción de La Vela Puerca, en el archivo va-a-escampar.txt: Va a escampar Hoy asume lo que venga sea para bien, o todo mal. y aunque pierda lo que tenga se va a morder para aguantar Si hacemos \"git status\" el sistema nos responde que reconoce la existencia de un nuevo archivo en el proyecto, que todavía el sistema de control de versiones no incorporó. $ git status # On branch master # # Initial commit # # Untracked files: # ( use \"git add <file>...\" to include in what will be committed ) # # va-a-escampar.txt nothing added to commit but untracked files present (use \"git add\" to track) Para agregar el archivo al proyecto se ejecuta: $ git add va-a-escampar.txt Y se puede pedir el nuevo informe de situación con: $ git status # On branch master # # Initial commit # # Changes to be committed: # ( use \"git rm --cached <file>...\" to unstage ) # # new file: va-a-escampar.txt # Comitear es un verbo muy extraño Ahora Git ya sabe que debe ir registrando la evolución del archivo va-a-escampar.txt, pero todavía no ha grabado ninguna información sobre este archivo en su base de datos (y si ya hubiese información de antes, aún no habría guardado los cambios realizados desde el último commit). En inglés, grabar el estado actual de uno o más archivos es hacer un \"commit\". En castellano commit puede traducirse como cometer, hacer, encomendar, perpetrar… Ninguna de las cuales sirve para describir lo que sucede, así que hablaremos de \"comitear\". Para comitear el estado actual del archivo se ejecuta la orden git commit -m \"mensaje personal\" : $ git commit -m \"Empezando a transcribir la letra de La Vela\" [master (root-commit) 38b86f5] Empezando a transcribir la letra de La Vela 1 file changed, 6 insertions(+) create mode 100644 va-a-escampar.txt Git guarda entonces un copia permanente de todos los archivos que están en la base de datos (los que fueron agregados con \"git add\") dentro del directorio oculto .git. Esta copia permanente es llamada una revisión , y su identificador en el ejemplo fue 38b86f5. De omitir el mensaje en el comando git commit (si no hubiese aparecido -m \"mensaje\"), se hubiese abierto el editor configurado al principio, para poder escribir el mensaje. Volvemos a ver la situación actual del proyecto con \"git status\" y con \"git log\" podemos ver el historial de cambios (en orden cronológico inverso), el cual incluye el identificador completo de la revisión, el autor, la fecha y el mensaje de Git al responder al commit: $ git status # On branch master nothing to commit, working directory clean $ git log commit 38b86f5625453732e442c127f1d4678ec8550a12 Author: eldiegoefe <eldiegoefe@gmail.com> Date: Mon Oct 6 15:35:07 2014 -0300 Empezando a transcribir la letra de La Vela Cambios (o agregados) en un archivo ¿Dónde se guardan los cambios? En el directorio del proyecto sigue habiendo un solo archivo. Toda la información extra se almacena en el subdirectorio oculto .git , de modo que el sistema de archivos se ve limpio y se evita la posibilidad de borrar accidentalmente cosas (como versiones viejas del mismo archivo). Si agregamos una segunda estrofa al archivo de texto, pasa a verse así: Va a escampar Hoy asume lo que venga sea para bien, o todo mal. y aunque pierda lo que tenga se va a morder para aguantar Hoy que claro ve las cosas que ayer no vio, ni va a exigir Sobre su pena se posa quiere entender para seguir Al pedir el status del proyecto veremos: $ git status # On branch master # Changes not staged for commit: # ( use \"git add <file>...\" to update what will be committed ) # ( use \"git checkout -- <file>...\" to discard changes in working directory ) # # modified: va-a-escampar.txt # no changes added to commit (use \"git add\" and/or \"git commit -a\") La última linea es la frase clave: \"no se agregaron cambios al commit\". El archivo ha cambiado pero no le hemos dicho aún a Git que queremos guardar esos cambios (lo haremos con git add ). Comparación de versiones Antes de agregar estos cambios podemos revisar nuestro trabajo usando git diff , que nos muestra las diferencias entre el estado actual del archivo y la última versión comiteada. $ git diff diff --git a/va-a-escampar.txt b/va-a-escampar.txt index 97ab7b0..db818ec 100644 --- a/va-a-escampar.txt +++ b/va-a-escampar.txt @@ -4,3 +4,8 @@ Hoy asume lo que venga sea para bien, o todo mal. y aunque pierda lo que tenga se va a morder para aguantar + +Hoy que claro ve las cosas +que ayer no vio, ni va a exigir +Sobre su pena se posa +quiere entender para seguir La salida es críptica porque es en realidad una serie de comandos para que un editor de textos pueda reconstruir un archivo a partir del otro. La primera linea muestra que Git produce una salida similar al comando Unix diff comparando la versión antigua y nueva del archivo. La segunda linea muestra la revisión exacta de cada archivo que está siendo comparado (97ab7b0 y db818ec, etiquetas únicas generadas por la computadora para esas revisiones). La linea restante muestra finalmente las lineas en las que aparecen las diferencias (marcando con \"+\" las lineas que se agregaron). Cómo comitear los cambios Si hacemos un commit de los cambios: $ git commit -m \"Agregada la segunda estrofa\" # On branch master # Changes not staged for commit: # ( use \"git add <file>...\" to update what will be committed ) # ( use \"git checkout -- <file>...\" to discard changes in working directory ) # # modified: va-a-escampar.txt # no changes added to commit (use \"git add\" and/or \"git commit -a\") Ups. No se comitearon los cambios porque faltó agregarlos antes . Entonces, haremos: $ git add va-a-escampar.txt $ git commit -m \"Agregada la segunda estrofa\" [master 6ae57e3] Agregada la segunda estrofa 1 file changed, 5 insertions(+) Git insiste en que agreguemos los archivos al conjunto de los que querramos comitear antes de realmente hacerlo, porque quizás no querramos comitear todo junto. Por ejemplo, supongamos que estamos agregando algunas citas a un documento. Podríamos querer agregarlas sin comitear el trabajo que estamos haciendo en las conclusiones (que todavía no terminamos). NOTA PERSONAL : ¡no entiendo! ¿De qué me sirve agregar los cambios si no los \"comiteo\"? RESPUESTA : Para permitirlo, Git tiene una zona de almacenamiento especial donde hace un seguimiento de cosas que fueron agregadas al último conjunto de cambios, pero que aún no fueron comiteadas. Con git add se colocan las novedades en este area, y luego git commit las copia al espacio de almacenamiento de largo plazo. git staging and commit areas Veamos cómo nuestros cambios a un archivo se mueven desde nuestro editor hacia la staging area (zona de preparación o también area de ensayo) y hacia el almacenamiento de largo plazo. Primero, agregamos otra estrofa: Llega la batalla y contra él estalla algún día va a escampar. y como sale de esta quiere la respuesta sabe que no es escapar. Y analizamos las diferencias con git diff : $ git diff diff --git a/va-a-escampar.txt b/va-a-escampar.txt index db818ec..0c33091 100644 --- a/va-a-escampar.txt +++ b/va-a-escampar.txt @@ -9,3 +9,10 @@ Hoy que claro ve las cosas que ayer no vio, ni va a exigir Sobre su pena se posa quiere entender para seguir + +Llega la batalla +y contra él estalla +algún día va a escampar. +y como sale de esta +quiere la respuesta +sabe que no es escapar. Git identifica las diferencias entre el archivo y la versión intermedia (pero no comiteada), guardada en la staging area (la voy a llamar zona de preparación ). Si agregamos estos cambios al almacenamiento intermedio, veremos lo siguiente: $ git add va-a-escampar.txt $ git diff Ahora no hay ninguna salida, porque el archivo actualmente en edición es igual al que guardamos en la zona de preparación . Sin embargo, si hacemos: $ git diff --staged diff --git a/va-a-escampar.txt b/va-a-escampar.txt index db818ec..0c33091 100644 --- a/va-a-escampar.txt +++ b/va-a-escampar.txt @@ -9,3 +9,10 @@ Hoy que claro ve las cosas que ayer no vio, ni va a exigir Sobre su pena se posa quiere entender para seguir + +Llega la batalla +y contra él estalla +algún día va a escampar. +y como sale de esta +quiere la respuesta +sabe que no es escapar. Ahora nos está mostrando las diferencias entre el último cambio comiteado (en el almacenamiento de largo plazo) y lo que hay en la zona de preparación . Guardemos estos cambios: $ git commit -m \"Tercera estrofa agregada\" [master 8f1eec1] Tercera estrofa agregada 1 file changed, 7 insertions(+) Vemos cómo quedó: $ git status # On branch master nothing to commit, working directory clean Y podemos examinar la historia de lo que fue sucediendo hasta ahora: $ git log commit 8f1eec1836a9ace8a2cbab7e2c3341efa5c3a537 Author: eldiegoefe <eldiegoefe@gmail.com> Date: Mon Oct 6 19:55:10 2014 -0300 Tercera estrofa agregada commit 6ae57e3d91a7a526a257df081d83a5b9be4e6d28 Author: eldiegoefe <eldiegoefe@gmail.com> Date: Mon Oct 6 16:54:40 2014 -0300 Agregada la segunda estrofa commit 38b86f5625453732e442c127f1d4678ec8550a12 Author: eldiegoefe <eldiegoefe@gmail.com> Date: Mon Oct 6 15:35:07 2014 -0300 Empezando a transcribir la letra de La Vela Resumiendo, cuando queremos hacer cambios en nuestro repositorio, primero tenemos que agregar los cambios a la zona de preparación (con git add ), y luego comitear los cambios ensayados al repositorio (con git commit ). trabajando con git Explorando el historial Para ver lo que cambiamos, usamos git diff también, pero para refiriéndonos a versiones viejas con la notación HEAD ~1, HEAD ~2, etc: $ git diff HEAD~1 va-a-escampar.txt diff --git a/va-a-escampar.txt b/va-a-escampar.txt index db818ec..0c33091 100644 --- a/va-a-escampar.txt +++ b/va-a-escampar.txt @@ -9,3 +9,10 @@ Hoy que claro ve las cosas que ayer no vio, ni va a exigir Sobre su pena se posa quiere entender para seguir + +Llega la batalla +y contra él estalla +algún día va a escampar. +y como sale de esta +quiere la respuesta +sabe que no es escapar. $ git diff HEAD~2 va-a-escampar.txt diff --git a/va-a-escampar.txt b/va-a-escampar.txt index 97ab7b0..0c33091 100644 --- a/va-a-escampar.txt +++ b/va-a-escampar.txt @@ -4,3 +4,15 @@ Hoy asume lo que venga sea para bien, o todo mal. y aunque pierda lo que tenga se va a morder para aguantar + +Hoy que claro ve las cosas +que ayer no vio, ni va a exigir +Sobre su pena se posa +quiere entender para seguir + +Llega la batalla +y contra él estalla +algún día va a escampar. +y como sale de esta +quiere la respuesta +sabe que no es escapar. De esta manera construimos una cadena de revisiones. El extremo más reciente de la cadena es HEAD ; podemos referirnos a revisiones previas usando la notación ~, de manera que HEAD ~1 (se pronuncia \"head menos uno\") significa \"la revisión previa\", mientras que HEAD ~123 vuelve 123 revisiones hacia atrás, desde donde nos encontramos en la actualidad. También nos podemos referir a las revisiones usando las cadenas largas de dígitos y letras que Git muestra en los logs. Estos son IDs únicos para los cambios, \"únicos\" significa realmente únicos: cada cambio a cualquier conjunto de archivos en cualquier máquina tiene un identificador de 40 caracteres. Nuestro primer commit nos dio el ID 38b86f5625453732e442c127f1d4678ec8550a12, así que probemos esto: $ git diff 38b86f5625453732e442c127f1d4678ec8550a12 va-a-escampar.txt diff --git a/va-a-escampar.txt b/va-a-escampar.txt index 97ab7b0..0c33091 100644 --- a/va-a-escampar.txt +++ b/va-a-escampar.txt @@ -4,3 +4,15 @@ Hoy asume lo que venga sea para bien, o todo mal. y aunque pierda lo que tenga se va a morder para aguantar + +Hoy que claro ve las cosas +que ayer no vio, ni va a exigir +Sobre su pena se posa +quiere entender para seguir + +Llega la batalla +y contra él estalla +algún día va a escampar. +y como sale de esta +quiere la respuesta +sabe que no es escapar. Para no tipear cadenas de 40 números, Git permite usar los primeros de la cadena, con el mismo resultado: $ git diff 38b86f5 va-a-escampar.txt Recuperar versiones antiguas De acuerdo: podemos grabar cambios a los archivos y ver qué hemos cambiado. Pero ¿cómo restauramos versiones viejas de las cosas? Supongamos que sobreescribimos accidentalmente nuestro archivo va-a-escampar.txt, que pasa a contener sólo la siguiente linea: no va a escampar nada El comando cat muestra el contenido del archivo: $ cat va-a-escampar.txt no va a escampar nada Con git status nos enteramos que el archivo ha cambiado, pero esos cambios aún no pasaron a la zona de preparación ( staging area ). $ git status # On branch master # Changes not staged for commit: # ( use \"git add <file>...\" to update what will be committed ) # ( use \"git checkout -- <file>...\" to discard changes in working directory ) # # modified: va-a-escampar.txt # no changes added to commit (use \"git add\" and/or \"git commit -a\") Podemos volver atrás, dejando las cosas como estaban antes, usando git checkout : $ git checkout HEAD va-a-escampar.txt $ cat va-a-escampar.txt Va a escampar Hoy asume lo que venga sea para bien, o todo mal. y aunque pierda lo que tenga se va a morder para aguantar Hoy que claro ve las cosas que ayer no vio, ni va a exigir Sobre su pena se posa quiere entender para seguir Llega la batalla y contra él estalla algún día va a escampar. y como sale de esta quiere la respuesta sabe que no es escapar. Con git checkout se recupera una versión anterior de un archivo. En este caso, le estamos pidiendo a Git que recupere la versión del archivo guardada en HEAD , que fue la última revisión guardada. Si quisiéramos ir más atrás podríamos usar un identificador de revisión: $ git checkout 38b86f5 va-a-escampar.txt Es importante recordar que debemos usar el número de revisión que identifica el estado del repositorio antes del cambio que estamos tratando de revertir. Un error común es usar el número de revisión del commit en el cual hicimos el cambio del cual estamos tratando de deshacernos. En el ejemplo de abajo queremos recobrar el estado inmediatamente anterior al commit más reciente ( HEAD ~1), que es la revisión 6ae57e3d9 (en la figura -realizada con otro ejemplo- corresponde a la revision f22b25e): retornando a una revisión anterior de un archivo El diagrama siguiento ilustra el modo en que puede verse la historia de un archivo (moviéndose hacia atrás desde HEAD , la versión más recientemente comiteada): historia de las revisiones de un archivo Simplificando un caso común Si mirás cuidadosamente la salida de *git status*, vas a ver esta ayuda: (use \"git checkout -- <file>...\" to discard changes in working directory) Tal como afirma, *git checkout* sin un identificador de versión restaura los archivos al estado guardado en HEAD. El guión doble -- es necesario para separar los nombres de los archivos siendo recuperados del comando mismo: sin esos guiones, Git trataría de usar el nombre del archivo como identificador de la revisión a la cual se desea volver. El hecho de que los archivos puedan recuperarse o revertirse uno por uno tiende a cambiar el modo en que la gente organiza su trabajo. Si todo estuviese en un solo gran archivo, entonces es dificil (si no imposible) deshacer los cambios a la introducción sin también deshacer los cambios hechos a continuación a la conclusión. Por otra parte, si la introducción y la conclusión estuviesen en archivos separados, entonces sería más fácil moverse hacia atrás y hacia adelante en el tiempo. Ignorando cosas Vamos a ver qué hacer con los archivos del mismo directorio que no queremos incluir en el sistema de control de versiones. Agregamos algunos archivos vacíos: a.dat $ mkdir results $ touch a.dat b.dat c.dat results/a.out results/b.out Y vemos qué dice Git: $ git status # On branch master # Untracked files: # ( use \"git add <file>...\" to include in what will be committed ) # # a.dat # b.dat # c.dat # results/ nothing added to commit but untracked files present (use \"git add\" to track) Colocar estos archivos bajo control de versiones sería un desperdicio de espacio en disco. Peor aún, tenerlos listados nos distraería de los cambios que realmente importan, de manera que debemos decirle a Git que los ignore, creando un archivo en el directorio raiz del proyecto. Al archivo lo llamamos .gitignore . Dentro de .gitignore colocamos los patrones para ignorar archivos, en este caso los archivos que terminen en .dat y los archivos que se encuentren en el subdirectorio results (si cualquiera de estos archivos hubiese estado siendo parte del control de versiones, Git continuará considerándolo a pesar de figurar en .gitignore ). Al listar el contenido de .gitignore deberíamos obtener esto: $ cat .gitignore *.dat results/ Si pedimos el status del proyecto, la salida se verá mucho más limpia que antes: $ git status # On branch master # Untracked files: # ( use \"git add <file>...\" to include in what will be committed ) # # .gitignore nothing added to commit but untracked files present (use \"git add\" to track) La única cosa que Git advierte ahora es el archivo .gitignore recientemente creado. Podríamos creer que no querríamos incorporarlo al control de versiones, pero todos con quienes compartimos el repositorio probablemente querrían ignorar las mismas cosas que estamos ignorando nosotros. Así que agregamos y comiteamos este archivo (oculto, pues empieza con un punto): $ git add .gitignore $ git commit -m \"Agregado del archivo de ignorancias\" $ git status # On branch master nothing to commit, working directory clean Como un extra, al usar .gitignore evitamos agregar accidentalmente archivos que no queremos al repositorio. $ git add a.dat The following paths are ignored by one of your .gitignore files: a.dat Use -f if you really want to add them. fatal: no files added Si queremos realmente pasar por alto los seteos de .gitignore , podemos usar git add -f para forzar a Git a agregar algo. Siempre podemos ver la situación de los archivos ignorados si quisiéramos: $ git status --ignored # On branch master # Ignored files: # ( use \"git add -f <file>...\" to include in what will be committed ) # # a.dat # b.dat # c.dat # results/ nothing to commit, working directory clean Claves Usar git config para configurar un usuario, dirección de email, editor y otras preferencias (todas estas cosas son válidas para una máquina) Con git init se inicializa un repositorio Con git status se muestra la situación de un repositorio Los archivos puedes almacenarse en el directorio de trabajo (que los usuarios ven), la zona de preparación o staging area (desde donde se realizará el próximo commit) y el repositorio local (donde las instantáneas son almacenadas permanentemente). Con git add se agregan archivos a la zona de preparación . Con git commit se crea una instantanea de la zona de preparación en el repositorio local. Siempre escribir un mensaje al comitear cambios (con git commit -m \"mensaje\" ). Con git diff se muestran las diferencias entre versiones. Con git checkout se recuperan viejas versiones de un archivo. El archivo .gitignore indica a Git los archivos a ser ignorados por el sistema de control de versiones.","url":"https://eldiegoefe.github.io/tutorial-sobre-control-de-versiones-parte-1.html","title":"Tutorial sobre control de versiones (parte 1)"},{"tags":"tecnicismos","text":"Encontré una muy sencilla aplicación para convertir archivos de imágenes. Si bien tiene mucha potencia, porque puede hacer mucho más, yo la usé para convertir imágenes en páginas de un archivo pdf. Se necesita tener instalado un paquete llamado imagemagick . Para instalarlo desde un terminal dependerá de la distribución, suele ser así: $ sudo urpmi imagemagick # desde mageia $ sudo apt-get install imagemagick # desde ubuntu, mint, etc $ sudo yum install imagemagick # desde fedora Luego, para usarlo, también desde un terminal y en el directorio donde están guardadas las imágenes, se ejecuta convert (parece que no es lo único que instala imagemagick ): $ convert imagen.jpg archivo.pdf Se pueden incluir varias imágenes en un mismo archivo: $ convert imagen1.jpg imagen2.jpg imagen3.jpg archivo.pdf E incluso generalizar con asteriscos: $ convert imagen*.jpg archivo.pdf Hay muchos ejemplos más en Desde Linux . Y también más información haciendo man convert desde el terminal.","url":"https://eldiegoefe.github.io/de-jpg-a-pdf.html","title":"De jpg a pdf"},{"tags":"tecnicismos","text":"Actualización (Feb-2017) : es muy facil usar el programa OBS Studio para grabar en la computadora tanto la pantalla como la webcam, micrófono, etc. Funciona en Linux, Window$ y Mac. Empecé a grabar tutoriales para usar IPython Notebook. Traté de hacerlo con la aplicación recordMyDesktop, pero el modo de seleccionar la parte de la pantalla a grabar resulta muy imprecisa, es practicamente imposible determinar la región con precisión. Luego encontré este buen tutorial: Creating Screencasts in Linux . Ahí hay dos datos importantes: Conviene grabar una región cuyo razón de aspecto sea 16:9 (para que salga bien en un monitor wide). De la tabla de posibles tamaños aceptados por YouTube prefiero la de 1280x720. Se pueden usar las opciones de ventana de KDE (a las cuales se accede con click derecho sobre el título de la ventana / Más acciones / Preferencias especiales de la ventana) para darle al navegador un tamaño de ventana (y un offset desde la esquina superior izquierda) igual al tamaño deseado para la grabación. De este modo se fuerza la ventana a un tamaño tal que ocupe todo el area de grabación, de modo de evitar incluir en el video cosas innecesarias. Para la grabación empecé a usar la aplicación ffmpeg, en linea de comando, tal como lo sugiere la página de Dennis Nienhüser que cité más arriba. Hice cambios en las opciones citadas por Dennis, para grabar también el sonido agregué: -f alsa -ac 2: se usan 2 \"audiochannels\" (ac) -ab 128k: bitrate -acodec pcm_s16le: un codec de grabación de audio -i hw:1 - para seleccionar \"input device\" Para saber cuál es la tarjeta de sonido se utiliza el comando arecord -l , y dado que quiero grabar con la webcam USB uso hw:1 (porque es la \"card 1\"). El resultado en mi PC es el siguiente: **** List of CAPTURE Hardware Devices **** card 0: PCH [HDA Intel PCH], device 0: VT2020 Analog [VT2020 Analog] Subdevices: 1/1 Subdevice #0: subdevice #0 card 0: PCH [HDA Intel PCH], device 2: VT2020 Alt Analog [VT2020 Alt Analog] Subdevices: 1/1 Subdevice #0: subdevice #0 card 1: U0x46d0x825 [USB Device 0x46d:0x825], device 0: USB Audio [USB Audio] Subdevices: 1/1 Subdevice #0: subdevice #0 Usé el programa alsamixer (ejecutado desde la línea de comando y que funciona en modo texto) para seleccionar la placa de sonido, aunque al final no se si tiene algo que ver el haber logrado grabar video y sonido con lo hecho desde esta aplicación. La orden que finalmente usé (va todo junto, es una sola linea): ffmpeg -f alsa -ac 2 -ab 128k -acodec pcm_s16le -i hw:1 -f x11grab -show_region 1 -y -r 30 -s 1280x720 -i :0.0+0,0 -vcodec libx264 screencast.avi Tener cuidado con el nombre del archivo (en este ejemplo es screencast.avi), porque sino se va cambiando entre grabaciones sucesivas se va sobreescribiendo. En la notebook con Linux Mint 17 tuve que instalar ffmpeg siguiendo las instrucciones de esta página .","url":"https://eldiegoefe.github.io/grabacion-de-screencasts-para-tutoriales-de-youtube.html","title":"Grabacion de screencasts para tutoriales de YouTube"},{"tags":"tecnicismos","text":"Para instalar IPython en Mageia, sin tener privilegios de root hay que cumplir con los siguientes pasos: Contar con privilegios de root para poder correr el instalador Hay que instalar PIP Con PIP instalar IPython Trabajar como root: Conviene agregar el usuario a la lista de usuarios con privilegios para ejecutar sudo . Las instrucciones están en Configuring sudo de Mageia. Históricamente en UNIX este es el grupo Wheels. Primero hay que crear el archivo /etc/sudoers.d/01wheel Después ejecutar lo siguiente en un terminal como root (es decir, luego de hacer /usr/bin/su): $ echo \"%wheel ALL=(ALL) ALL\" > /etc/sudoers.d/01wheel $ chmod 440 /etc/sudoers.d/01wheel Agregar el usuario al grupo \"Wheel\". Para ello hay que editar el usuario (desde Configure su computador / Administrar usuarios del sistema). Click derecho para el menú contextual sobre el nombre del usuario a agregar y editar . En la pestaña de grupos agregar un tick sobre el grupo wheel y aceptar. Desloguearse y volver a entrar (en caso que el usuario modificado sea el usuario que hizo la edición). IMPORTANTE : para mejorar la seguridad del sistema conviene usar sudo o su siempre precedidos de la ruta real al comando (la explicación completa verla en el link original), es decir: $ /usr/bin/sudo *comando* $ /usr/bin/su *comando* Instalación de PIP Esto es muy fácil: $ /usr/bin/sudo urpmi python-setuptools $ /usr/bin/sudo easy_install pip Instalación de IPython Igual de fácil: $ /usr/bin/sudo pip install ipython","url":"https://eldiegoefe.github.io/instalando-ipython-en-mageia.html","title":"Instalando IPython en Mageia"},{"tags":"tecnicismos","text":"Desde que empecé a usar Emacs probé dos grandes paquetes para facilitar su uso. Uno ha sido Ergoemacs , que es buenísimo porque remapea todos los accesos rápidos de teclado para poder usarlos de forma más simple e intuitiva (por ejemplo: C-x C-f, que \"visitaba\" un archivo, pasa a ser C-o, que es el comando stándard para \"abrir archivo\" en casi todos los programas actuales). Sin embargo, luego encontré buenas funcionalidades en otro llamado Prelude . Estando sólo activo este último (ya que hay conflictos con ergoemacs) tuve el siguiente problema: al editar una tabla dentro de org-mode , el keybinding para eliminar una fila debía ser M-S-<up> (es decir: alt-shift-flecha arriba) pero en cambio al apretar esa secuencia de teclas lo que sucedía era que se ejecutaba el comando move-text-up que está definido en prelude. Esta combinación de teclas resultó que estaba definida en el archivo ~/.emacs.d/core/prelude-mode.el , en el cual se encuentra la siguiente linea: ( define-key map [ ( meta shift up ) ] 'move-text-up ) para recuperar el keybinding y que vuelva a funcionar como se espera en org-mode, lo primero que probé fue comentar esa linea agregándole dos ; al inicio. Pero de este modo, cuando toque actualizar el paquete Prelude, el archivo prelude-mode.el se sobreescribirá desde el servidor y el problema volverá a aparecer. Entonces me puse a buscar cómo resolverlo y encontré que se puede anular el keybinding correspondiente a un modo de Emacs con el siguiente comando (que debe incluirse en el archivo de inicialización personal, generalmente ~/.emacs o en mi caso ~/.emacs.d/personal/custom.el ): ( define-key prelude-mode-map [ ( meta shift up ) ] nil ) Lo mismo puede hacerse para M-S-<down>: ( define-key prelude-mode-map [ ( meta shift down ) ] nil ) Obviamente esta técnica es aplicable para anular el keybinding de cualquier modo que se quiera desactivar.","url":"https://eldiegoefe.github.io/keybindings-conflictivos-en-emacs.html","title":"Keybindings conflictivos en Emacs"},{"tags":"tecnicismos","text":"Cuando empecé a leer Practical Common Lisp , de Peter Seibel, tras escuchar el reportaje de Sacha Chua a Bozhidar Batsov , tuve algunos inconvenientes para poder instalar Lisp en mi compu, hasta que encontré el tutorial Installing Common Lisp… . Estas notas resumen la información del video (sus instrucciones se muestran en un entorno Windows mientras que mi transcripción es para Linux), para poder instalar un Lisp en cualquier máquina con Emacs: Allí dice que se puede bajar sbcl ( elegir el binario , de la tabla para las distintas plataformas, en mi caso Linux AMD64 , que no implica que esa deba ser la marca de nuestro microprocesador ) e instalarlo. Prestar atención a que el archivo bajado sea efectivamente un binario (posee la palabra \"binary\" en el nombre, antes de la extensión) y descomprimirlo, lo cual se hace con la orden: # sh install.sh ( necesita permisos de root , así que hay que anteponer un sudo o ejecutar el terminal como root). Al final aparecen algunos mensajes diciendo que no se instalaron los manuales, pero más allá de eso todo parece andar bien, puesto que en la ventana puede leerse: SBCL has been installed: binary /usr/local/bin/sbcl core and contribs in /usr/local/lib/sbcl/ Luego hay que bajar quicklisp , el hecho de que sea \"beta\" no importa, porque anda bien así desde hace años. Luego hay que ejecutar esto: $ sbcl --load quicklisp.lisp Luego hay que seguir las instrucciones que aparecen, primeramente teclear (el prompt dentro de Lisp en mi sistema es sólo un asterisco): * ( quicklisp-quickstart:install ) El sistema se pone a bajar cosas, así que supongo que es necesaria la conexión a internet. Finaliza con este mensaje: ==== quicklisp installed ==== To load a system, use: (ql:quickload \"system-name\") To find systems, use: (ql:system-apropos \"term\") To load Quicklisp every time you start Lisp, use: (ql:add-to-init-file) For more information, see http://www.quicklisp.org/beta/ NIL Seguimos ejecutando en el mismo terminal la siguiente instrucción: * ( ql:add-to-init-file ) Funciona independientemente del directorio desde el cual hayamos ejecutado el terminal. Ofrece el siguiente mensaje como resultado: I will append the following lines to #P\"/home/diego/.sbclrc\": ;;; The following lines added by ql:add-to-init-file: # -quicklisp (let ((quicklisp-init (merge-pathnames \"quicklisp/setup.lisp\" (user-homedir-pathname)))) (when (probe-file quicklisp-init) (load quicklisp-init))) Press Enter to continue. # P \"/home/diego/.sbclrc\" Luego se instala slime, pero no como hacía yo desde adentro de emacs, sino desde el mismo terminal en el que venimos trabajando: * (ql:quickload \"quicklisp-slime-helper\") Nuevamente se pone a bajar cosas de la red y termina con el siguiente mensaje, así que sabemos que lo hizo exitosamente: slime-helper.el installed in \"/home/diego/quicklisp/slime-helper.el\" To use, add this to your ~/.emacs: (load (expand-file-name \"~/quicklisp/slime-helper.el\")) ;; Replace \"sbcl\" with the path to your implementation (setq inferior-lisp-program \"sbcl\") (\"quicklisp-slime-helper\") * Yo no tengo archivo ~/.emacs porque instalé Prelude, así que esas tres lineas (desde (load hasta \"sbcl\") ) van en el archivo de configuraciones personales ~/.emacs.d/personal/custom.el . No hace falta cambiar nada, es un copy+paste, o mejor dicho un kill+yank. Al ejecutar emacs correrá brevemente el script que acabamos de decirle que corra. Podemos abrir (visitar en la jerga de emacs) un nuevo archivo con extensión .lisp usando C-x C-f. Luego, en otro buffer, puedo hacer M-x slime. Da como resultado una máquina REPL como la que se espera en los ejemplos del capítulo 2 de Practical Common Lisp. ; SLIME 2014-06-17 CL-USER> Al principio había algo diferente en el video, porque cuando se pone a teclear en el otro buffer, el que tiene el archivo de texto con extensión .lisp no me aparecían en el minibuffer las ayudas (una descripción de lo que se va tecleando, con la sintaxis sugerida), sin embargo, luego empezó a funcionar igual, también con el coloreado de las palabras clave. Aca una versión del Hola, Mundo! para probar en el archivo .lisp (se compila con C-c C-c): ( defun hihi-world () ( format t \"hola mundo!\" ))","url":"https://eldiegoefe.github.io/a-punto-para-lisp.html","title":"A punto para Lisp"},{"tags":"tecnicismos","text":"Este es el primer snippet diseñado para automatizar el encabezado de las paginas hechas en restructuredText, para facilitarme la escritura de este blog. Hay mucha ayuda en la página de Capitao Morte (supongo que es su autor). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # - *- mode: snippet; require-final-newline: nil -* - # name: encabezado # key: enc # expand-env: ((yas-indent-line 'fixed)) # -- :title: ${1:titulo} :date: ${2:2014}-{3:10}-{4:31} {5:10:00} :category: ${6:$$(yas-choose-value '(\"blog\" \"politica\" \"salud\" \"tecnicismos\"))} :tags: $7 :author: El Diego Efe :excerpt: $1 $0 En la linea 14 la instrucción $0 se agregó porque en algún lado decía que suele ponerse para indicar el lugar de salida cuando se termina de ejecutar el snippet. La linea 4 está para que la indentación aparezca correcta al ejecutarse el snippet, ya que sin esta linea aparecían unas tabulaciones erróneas. ¿Dónde guardar el archivo? No conviene guardar el snippet nuevo en el directorio donde se almacena automáticamente el paquete yasnippets porque al actualizar este paquete se perderá nuestra creación. Hay que verificar el valor de la variable donde se almacenan los directorios para los snippets personalizados (mediante M-x customize-variable yas-snippet-dirs ). Al chequear veo que uno de los directorios es ~/.emacs.d/snippets pero cuando me fijo con el navegador encuentro que aún no existe, así que lo creo (desde M-x dired ). Luego también creo un subdirectorio para mantener la lógica de los nombres bajo ~/.emacs.d/elpa/yasnippet- XXXXXXXX . XXXX /snippets , donde a cada modo mayor se le asigna un subdirectorio. Por lo tanto, para mi ultra magnífico snippet de restructuredText, corresponde guardarlo así (sin ninguna extensión): ~/.emacs.d/snippets/rst-mode/encabezado Otra cosa : para poder colocar código con números de línea en estas páginas (escritas con restructuredText) hay que tener en cuenta lo siguiente: debajo del .. code-block:: se debe incluir la directiva :linenos: . No se si es un bug, pero esa directiva debe estar alineada con la palabra code para que funcione, y todo el bloque de código debe también respetar esta alineación. Para tabular un bloque de texto manteniendo las indentaciones que ya tiene se puede usar M-x indent-rigidly . el nombre del lenguaje en .. code-block:: parece que debe ir en minúsculas, para que sea reconocido y funcione el coloreado con pygments. En el caso de restructuredText la palabra clave que funcionó (por prueba y error) es rest. (Editado: luego encontré la página con los \"lexers\" válidos: Available lexers , y vi que también eran válidos rst y restructuredtext).","url":"https://eldiegoefe.github.io/primer-snippet.html","title":"Primer snippet"},{"tags":"tecnicismos","text":"No es difícil encontrar la información para la instalación de Linux, pero hay distintas maneras y quiero dejar registrada la forma en que lo estoy haciendo actualmente. Los pasos que sigo son: Bajar el ISO (el archivo imagen) de la distribución que quiero instalar, en este caso es Linux Mint 17. Formatear en FAT32 el pendrive mediante el programa GParted. Con el programa UNETBOOTIN se pasa la imagen al pendrive (hay que elegir el archivo ISO como fuente). Luego ya es cuestión de setear la PC para que arranque con el pendrive y seguir las instrucciones que aparezcan en pantalla. Particiones En el sitio de Fedora la recomendación es la siguiente: /boot de 500 MB . /root de 10 GB como mínimo, y 20 GB como estándar. Es la partición donde se instalarán todos los softwares. Yo suelo dejarlas en 30 GB . /home de 10 GB como mínimo. Es la partición donde el usuario guarda sus documentos, fotos, música, películas… Debería ser la partición más grande. swap depende de la memoria y si se usa hibernación o no. Para un sistema de 8 GB está bien que sea de 8 a 12 GB . BIOS Boot (1 MB ) o EFI System Partition (200 MB ). En mi caso voy a estar instalando sistemas más modernos, así que la idea es que sean EFI . El formato del volumen EFI debe ser FAT (así que lo elijo como FAT32 ). Post-instalación Una cosa recomendable es buscar en la web algún artículo como éste: 20 things to do after installing Linux Mint 17 Qiana Cinnamon , que indica pasos a seguir luego de la instalación. Por ejemplo, la recomendación de instalar los drivers del fabricante de la placa de video (los pasos detallados están aca ) permitió mejorar el score que da glmark2 de 599 a 1751. Hay que seguir los pasos con atención, porque en este caso las instrucciones estaban para placas NVidia y yo tengo una ATI Radeon HD 5570, así que los drivers hay que buscarlos en la página que corresponda, lo cual no estaba aclarado en la página mencionada.","url":"https://eldiegoefe.github.io/instalacion-de-linux.html","title":"Instalacion de Linux"},{"tags":"tecnicismos","text":"Escribí un documento en org-mode (un modo mayor de emacs), porque permite exportar en formato pdf y escribir todo en texto plano. Es realmente una maravilla, se pueden escribir fórmulas en LaTeX, y organizar la estructura del documento usando títulos precedidos de uno o más asteriscos para indicar su nivel (si es un título principal, un subtitulo, un subsubtítulo, etc.). Hasta genera automáticamente una tabla de contenidos con todos estos títulos al hacer la exportación del documento (keybinding: C-c C-e l o). Pero tenía el problema de que la fecha y la tabla de contenidos, aparecían escritas en inglés. Estuve buscando un rato largo el modo de pasarlo a castellano, y finalmente lo encontré en la página de Nurullah Akkaya, Writing papers using org-mode En el encabezado hay que agregar #+LATEX_HEADER: \\usepackage[spanish]{babel} Sin embargo esto tiene un comportamiento medio raro, ya que además requiere esta linea previa: #+LANGUAGE: es Es extraño porque esta última linea es una directiva para generar html y no pdf. Además me dio siempre el resultado en castellano aunque probé también con fr , pt , de , …; parecía que andaba siempre igual, en español, pero al colocar en volvió a salir el texto en inglés.","url":"https://eldiegoefe.github.io/generar-pdf-en-espanol-desde-org-mode.html","title":"Generar pdf en español desde org-mode"},{"tags":"tecnicismos","text":"Compré una PC con estas características y precios, para uso liviano (mayormente internet, multimedia, programas de oficina, etc): Item Precio($) Detalles mother Gygabyte GA - AM1M - S2H 534 micro Athlon 5150 656 HD 1TB Seagate SATA 3 882 Memoria Kingston DDR3 4 Gb 626 Gabinete + fuente 650 Sharknet 600W Lector tarj. memoria y usb 50 Teclado y mouse inalámbrico 300 Genius Slimstar i820 Tarjeta red wireless USB 112 TPLink Nano TL - WN725N Total 3810 Calculando el equivalente a 3810 pesos en agosto de 2014: tipo de dolar $/dolar total en dolares oficial 8,20 465 turista 11,10 343 blue 12,60 302 Y me pasaron también estos precios de monitores: Monitor LED LG 22\" 22EA53T -P 1920$ Monitor LED LG 23\" 23EA53v-P 2242$","url":"https://eldiegoefe.github.io/compra-de-computadora-de-oficina.html","title":"Compra de computadora de oficina"},{"tags":"tecnicismos","text":"Estos son algunos apuntes extraidos principalmente del tutorial de Artist en la página http://matplotlib.org/users/artists.html matplotlib Matplotlib is the whole package pylab a module in matplotlib installed alongside matplotlib preferred for interactive calculations and plotting matplotlib.pyplot a module in matplotlib provides the state machine interface to the underlying plotting library in matplotlib combines the pyplot functionality (for plotting) with numpy functionality in a single namespace figures and axes are implicitly and automatically created to achieve the desired plot preferred for scripting Artist Artist has three layers: matplotlib.backend_bases.FigureCanvas: area onto which the figure is drawn matplotlib.backend_bases.Renderer: object which knows how to draw on the FigureCanvas matplotlib.artist.Artist: object that knows how to use a renderer to paint onto the canvas (el usuario típico usa esto el 95% del tiempo) 1 and 2 handle all the details of talking to user interface toolkits (Qt4) 3 handles all the high level constructs like representing and laying out the figure, text and lines Artist types primitive: standard graphical objects we want to paint onto our canvas (Line2D, Rectangle, Text, AxesImages, etc) containers: places to put the primitives (Axis, Axes, Figure) Standard use Create a Figure instance use the Figure to create one or more Axes or Subplot instances use the Axes (plotting area into which most of the objects go) instance helper methods (plot(), text(), hist(), etc) to create the primitives (Line2D, Text, Rectangle). Helper methods will take your data (numpy arrays, strings) and create primitive Artists instances as needed (Line2D, etc), add them to the relevant containers and draw them when requested Subplots a special case of an Axes that lives in a regular rows by columns grid of subplots instances. Axes if you want to create an Axes at an arbitrary location, simply use the add_axes() method which takes a list of [left, bottom, width, height] values in 0-1 relative coordinates. Había hecho este dibujito cuando estaba viendo este tema, para aplicarlo a un programa para linealizar termistores, pero veo que en el dibujo la jerarquía de Figure y Canvas aparecen distinto en los dos gráficos, no se si es un error…","url":"https://eldiegoefe.github.io/apuntes-sobre-matplotlib.html","title":"Apuntes sobre matplotlib"},{"tags":"politica","text":"Sé de muchos palestinos a quienes les disgusta Hamas. Para ellos, sin embargo, la guerra de Gaza es sobre el bloqueo, parte de su propia guerra de independencia. Los israelíes rechazan darse cuenta de eso. En \"The Fog of War\" ( Niebla de Guerra ), excelente documental de Errol Morris, el ex Secretario de Defensa de EE . UU . Robert McNamara habla de una cierta incapacidad para comprender al enemigo, que se deriva de la falta de empatía. En la película, McNamara, un analista de sistemas brillante, a quien hoy en día se asocia más que nada con la guerra de Vietnam, dice que parte del éxito de la gestión del presidente Kennedy de la Crisis de los Misiles en Cuba fue la capacidad de su gobierno para ponerse en los zapatos de los soviéticos y entender su punto de vista. \"En el caso de Vietnam\", dice, \"no sabíamos lo suficiente como para sentir empatía.\" Como resultado, cada lado tenía un entendimiento completamente diferente acerca de lo que se trataba la guerra. Esta comprensión llegó a McNamara recién en 1991, cuando visitó Vietnam y se reunió con el Ministro de Relaciones Exteriores vietnamita. McNamara le preguntó si pensaba que era posible llegar a los mismos resultados de la guerra (la independencia y la unión del sur con el norte) sin las enormes pérdidas. En la guerra murieron entre uno y tres millones de personas, la mayoría de ellos civiles vietnamitas. Esto no incluye los cientos de miles de bajas en la guerra contra los franceses, que tuvieron lugar poco antes. Aproximadamente 58.000 soldados estadounidenses murieron en la guerra de Vietnam. \" Tú estabas luchando para esclavizarnos\", le gritó el Ministro de Relaciones Exteriores a McNamara, quien a su vez le respondió que esa era una idea absurda. Casi se fueron a las manos. Pero a medida que pasaba el tiempo McNamara entendió. \"Vimos a Vietnam como un elemento de la Guerra Fría\", dice, mientras que el Ministro de Asuntos Exteriores estaba tratando de decirle que para los vietnamitas era una guerra de independencia. El comunismo no era el meollo de la cuestión para los vietnamitas. Ellos estaban dispuestos a hacer los peores sacrificios porque estaban luchando por su libertad, no por Marx o Brezhnev. Las Naciones hacen sacrificios impensables en este tipo de luchas. Un 1% completo de la población judía fue asesinada en la guerra de 1948 ( N del T: guerra de la independencia israelí ). El público lo aceptó con dolor e insensibilizándose frente a la adversidad, porque al igual que los vietnamitas, sentían que estaban luchando por sus vidas y por su libertad. Nos hemos vuelto mucho más susceptibles a las pérdidas, no porque nos hayamos ablandado, sino porque tenemos una mayor comprensión, y a pesar de todos los slogans del tipo \"nosotros estamos luchando por nuestro futuro\", 2014 no es 1948. Más de 2.000 palestinos murieron en las tres operaciones militares en Gaza, sin incluir la Segunda Intifada. La mayoría de ellos eran civiles. He intercambiado correos electrónicos con gente de Gaza en los últimos días. Son personas que no se interesan tanto por Hamás en su vida cotidiana, ya sea debido a su ideología fundamentalista, la opresión política u otros aspectos de su gobierno. Pero sí apoyan a Hamas en su guerra contra Israel; para ellos, luchar contra el bloqueo es su guerra de independencia. O por lo menos una parte de ella. La exigencia frecuentemente escuchada en Israel, de que la gente de Gaza proteste contra Hamas es absurda. Incluso si dejamos de lado el hecho de que los propios israelíes odian a las protestas en tiempos de guerra, igual esperan que los palestinos realicen un levantamiento civil bajo fuego. Los habitantes de Gaza apoyan a Hamas en su guerra contra Israel porque la perciben como parte de su guerra de independencia. Un guerrero de Hamas que jura por el Corán no es diferente de un Vietcong recitando La Internacional antes de salir para la batalla. Este tipo de rituales deja una fuerte impresión, pero no son la verdadera historia. Los israelíes, tanto la izquierda como la derecha, se equivocan al suponer que Hamas es una dictadura que combate a Israel contra la voluntad de su pueblo. Hamas es de hecho una dictadura, y hay muchos palestinos que con mucho gusto lo verían caer, pero no en este momento. Ahora mismo no tengo ninguna duda de que la mayoría de los palestinos apoyan los ataques contra soldados de las Fuerzas de Defensa Israelíes a Gaza; apoyan el secuestro como un medio para liberar a sus presos (a quienes ven como prisioneros de guerra) y el hecho desagradable es que la mayoría de ellos, creo, apoyan el lanzamiento de cohetes contra Israel. \" Si tuviéramos aviones y tanques para combatir al ejército israelí, no necesitaríamos lanzar cohetes\", es una frase que he escuchado más de una vez. Como israelí, es desagradable para mí escucharla, pero uno debe al menos tratar de entender qué hay detrás de esa posición. Lo que es seguro es que el bombardeo de Gaza no les va a cambiar la cabeza. Todo lo contrario. Un palestino llora cerca de los escombros de su casa Un palestino llora cerca de los escombros de su casa después de la última ronda de ataques israelíes contra Al Shaja'ia, Ciudad de Gaza, 20 de julio de 2014.** (Anne Paq / Activestills.org ) \" Pero si ellos no dispararan cohetes o lanzaran ataques terroristas no habría ningún bloqueo. Entonces, ¿qué es lo que quieren?\", pregunta el público israelí. Después de todo, nosotros ya nos fuimos de Gaza. Volvamos a McNamara y Niebla de Guerra. McNamara le dijo al canciller vietnamita en 1991 que si los ciudadanos de Vietnam hubiesen abandonado el comunismo, los EE . UU . ni se hubiesen interesado en ellos. Podrían haber tenido tanto su independencia como su unidad. Pero a los ojos de los vietnamitas las cosas se veían completamente diferentes. Tan pronto como lograron expulsar a los franceses, se aparecieron los norteamericanos. El colonialismo sencillamente nunca se detuvo. La elección era entre un régimen corrupto patrocinado por Estados Unidos en el sur y una guerra horrorosa con el norte. Para los palestinos, la elección es entre la ocupación por delegación en Cisjordania ( N del T: quizás se refiere al rol de Al-Fatah ) y una guerra en Gaza. Ninguna ofrece esperanza, ni tampoco son formas de libertad. La promesa de Israel —que el fin de la lucha armada traerá la libertad— no es digna de confianza, tal como pusieron de manifiesto las experiencias de los últimos años. Eso simplemente nunca sucedió. Los años tranquilos en Cisjordania no han acercado a los palestinos a un estado independiente, mientras que la tregua de entre-guerras en Gaza no ha traido alivio al bloqueo. Uno puede discutir las razones de que esto haya sucedido, pero no se puede debatir la realidad. Hamas cuenta a los palestinos la simple verdad: la libertad viene a costa de la sangre. La tragedia es que por lo general nosotros ( N del T: los israelíes ) proporcionamos la evidencia. Después de todo, la evacuación de los asentamientos de Gaza se produjeron después de la Segunda Intifada, y no como resultado de negociaciones. Los Acuerdos de Oslo se produjeron después de la Primera Intifada; antes de eso, Israel rechazó incluso el conveniente Acuerdo de Londres entre Shimon Peres y el rey Hussein de Jordania. Los israelíes están convencidos de que están combatiendo a una organización terrorista impulsada por una ideología islámica fundamentalista. Los palestinos están convencidos de que los israelíes buscan esclavizarlos, y que tan pronto como la guerra termine el bloqueo será reforzado. Dado que esto es exactamente lo que Israel tiene la intención de hacer, tal como nuestro gobierno ha declarado en repetidas ocasiones, ellos no tienen ninguna razón para dejar de luchar. Hamas puede aceptar un alto el fuego pronto. Su régimen podría colapsar. De cualquier manera, es sólo una cuestión de tiempo antes de que se produzca la próxima ronda de violencia. Las vidas humanas no son más baratas para los palestinos de lo que son para nosotros. Pero las naciones que luchan por su libertad soportarán los peores sacrificios. Como en Shujaiyeh. Escrito por Noam Sheizaf . ( Artículos de Noam Sheizaf ) Link al artículo original (en inglés) . Publicado: 22 de Julio de 2014 Traducción: El Diego Efe y GoogleTranslator.","url":"https://eldiegoefe.github.io/por-que-los-palestinos-continuan-apoyando-a-hamas-a-pesar-de-sus-perdidas-devastadoras.html","title":"¿Por qué los palestinos continúan apoyando a Hamas a pesar de sus pérdidas devastadoras?"},{"tags":"tecnicismos","text":"Yasnippets / Company En la documentación de Spacemacs están los keybindings. No funciona más SPC i s (que mostraba una lista de snippets habilitados para el modo actual). reemplaza la clave previa al punto por el contenido del snippet correspondiente: M-/ Búsqueda La búsqueda habitual con i-search (C-s) se potencia al instalar swiper , que ofrece un listado de las lineas del documento donde se encuentran los resultados de la búsqueda. También se puede buscar con evil-search-forward (/) que es una variante de i-search, pero sólo va a la próxima aparición de la búsqueda y hay que recordar cómo ir a los resultados siguientes (C-s) y anteriores (C-r). Es menos visual. Movimiento Se puede saltar facilmente a letras o lineas que aparezcan en pantalla. Dentro de Spacemacs las opciones para este tipo de salto están bajo el prefijo SPC j. El sistema de búsqueda funciona así: primero se determina qué elemento se busca (un caracter, una linea, etc). En caso de que sean letras se ingresa cuál es la letra buscada. Como resultado el sistema resalta la ubicación de cada letra o linea y muestra en cada lugar un código de dos letras, que se deben pulsar para llegar hasta allí. Para ir a: un caracter: SPC j j caracter. Por ejemplo, para mostrar las letras z: SPC j j z. una linea: SPC j l linea. Otros movimientos habituales: gg: se mueve al principio del documento 15 gg: se mueve a la línea 15. Obviamente ‘15' es un ejemplo. G: se mueve al final del documento Ventanas dividir ventana verticalmente: SPC w / dividir ventana horizontalmente: SPC w - Dired convertir buffer en texto editable: C-x C-q aceptar los cambios realizados y finalizar edición: C-c C-c Enlaces Armé un snippet para colocar links más fácilmente ( lo pueden ver aca ), pero igual dejo acá la sintaxis para poner hiperlinks en restructuredText: External hyperlinks, like Python_. .. _Python: http://www.python.org/ External hyperlinks, like `Python <http://www.python.org/>`_. Wikipedia es `mi sitio favorito`_. .. _mi sitio favorito: http://www.wikipedia.org/ Indentación Primero se selecciona un bloque de texto y luego: indent-region. Indenta todo, pero no resguarda las indentaciones que el bloque pudo haber tenido, como es usual en los códigos de programación. indent-rigidly (C-x TAB , SPC x TAB ). Mueve todo el bloque manteniendo las indentaciones que el bloque haya tenido antes. El movimiento se determina presionando las flechas (o las teclas ‘h' y ‘l') luego de invocar el comando. Ayuda Para pedir ayuda sobre una función: Si se sabe el nombre: C-h f nombre-de-la-función Si se sabe el keybinding: C-h k keybinding Caracteres Todo esto cambia de acuerdo al teclado (en el Ergodox tengo teclas programables) y con la distribución elegida. De todos modos, actualmente son las siguientes: (uso la letra M para referirme más precisamente al Alt Derecho) < M . > M , ` M 0 \\ M º","url":"https://eldiegoefe.github.io/comandos-de-emacs-y-spacemacs-para-recordar.html","title":"Comandos de Emacs y Spacemacs para recordar"},{"tags":"tecnicismos","text":"La comunicación mediante USB con microcontroladores me viene resultando un escollo permanente. El protocolo en sí tiene una complejidad que requiere más tiempo de estudio para comprenderlo que el que estoy dispuesto a dedicarle, sobre todo porque empecé a leer varias veces sobre el mismo y siempre me encuentro dando vueltas alrededor de detalles que parecen demasiado específicos y alejados de lo que yo necesito lograr. Decidí hacer la prueba con mbed, ya que tengo una placa kinetis frdm-kl25z de freescale, con la cual hay unos ejemplos de comunicación que parecen muy sencillos. Microcontrolador Del lado del mbed el programa es el siguiente: #include \"mbed.h\" #include \"USBHID.h\" //We declare a USBHID device. Input out output reports have a length of 8 bytes USBHID hid ( 8 , 8 ); //This report will contain data to be sent HID_REPORT send_report ; HID_REPORT recv_report ; Serial pc ( USBTX , USBRX ); int main ( void ) { send_report . length = 8 ; while ( 1 ) { //Fill the report for ( int i = 0 ; i < send_report . length ; i ++ ) { send_report . data [ i ] = rand () & 0xff ; } //Send the report hid . send ( & send_report ); //try to read a msg if ( hid . readNB ( & recv_report )) { pc . printf ( \"recv: \" ); for ( int i = 0 ; i < recv_report . length ; i ++ ) { pc . printf ( \"%d \" , recv_report . data [ i ]); } pc . printf ( \" \\r\\n \" ); } wait ( 0.1 ); } En el foro de mbed ( aca ) preguntan cuál es la diferencia entre read y readNB, y también entre send y sendNB: If there is data to read, read and read_nb do the same, they return that data. If not, readNB will return directly that there was no data to read, while read blocks until there is data. Send is pretty much the same, only then related to the output buffer. If the output buffer is empty, both will simply put the data in it and return. If it is full, non-blocking will tell there is no space, while blocking will wait until there is space. Computadora Del lado de la computadora, el programa en python es: # #Simple example on how to send and receive data to the Mbed over USB (on Linux) using pyUSB 1.0 # import os import sys import usb.core # the main USB module import usb.util # utility functions from time import sleep import random # handler called when a report is received def rx_handler ( data ): print 'recv: ' , data def tx_handler ( data ): print 'env: ' , data def findHIDDevice ( mbed_vendor_id , mbed_product_id ): # Find device hid_device = usb . core . find ( idVendor = mbed_vendor_id , idProduct = mbed_product_id ) if not hid_device : print \"No device connected\" else : sys . stdout . write ( 'mbed found \\n ' ) if hid_device . is_kernel_driver_active ( 0 ): try : hid_device . detach_kernel_driver ( 0 ) except usb . core . USBError as e : sys . exit ( \"Could not detatch kernel driver: %s \" % str ( e )) try : # set the active configuration. With no arguments, the first # configuration will be the active one hid_device . set_configuration () hid_device . reset () except usb . core . USBError as e : sys . exit ( \"Could not set configuration: %s \" % str ( e )) endpoint = hid_device [ 0 ][( 0 , 0 )][ 0 ] while True : data = [ 0x0 ] * 16 #read the data bytes = hid_device . read ( endpoint . bEndpointAddress , 8 ) rx_handler ( bytes ); for i in range ( 8 ): data [ i ] = bytes [ i ] data [ i + 8 ] = random . randint ( 0 , 255 ) tx_handler ( bytes ) hid_device . write ( 1 , data ) # 1 es el endpoint if __name__ == '__main__' : # The vendor ID and product ID used in the Mbed program mbed_vendor_id = 0x1234 mbed_product_id = 0x0006 # Search the Mbed, attach rx handler and send data findHIDDevice ( mbed_vendor_id , mbed_product_id ) En funcionamiento En la imagen puede verse la pantalla de emacs donde se ve el envío y recepción de datos. Problema resuelto Hay un problema al ejecutar el programa de la computadora (lo cual hago usando ipython, tanto en modo terminal como en modo notebook) que dispara el siguiente error: USBError: [Errno 13] Access denied (insufficient permissions) Esto tiene que ver con los permisos para usar el USB . Una solución rápida es ejecutar el script de python con permisos de root, para lo cual alcanza con correr ipython anteponiendo sudo: $ sudo ipython Recuerdo haber seguido unas instrucciones para habilitar el usuario a trabajar con el USB , pero no recuerdo dónde estaban y ahora no puedo encontrarlas (aunque salen muchas páginas si uno busca este error).","url":"https://eldiegoefe.github.io/comunicacion-usb-con-mbed.html","title":"Comunicacion USB con mbed"},{"tags":"tecnicismos","text":"Estuve tratando de escribir este blog desde dos computadoras distintas. Armé el sitio desde una de ellas (una PC de escritorio) siguiendo las instrucciones que puse en otro post y después subí el sitio a github con un pull. Quedan armadas tres ramas (branches) en los repositorios: source master gh-pages Me cambié de máquina (a una laptop) e hice una copia de lo que había subido clonando el supositorio, digo el repositorio remoto. Después me puse a trabajar, armé nuevos post y corregí algunos otros. Hice el agregado de los archivos al repositorio local y su correspondiente commit . Finalmente un \"git push —all\" y con eso creo que se actualizó el repositorio remoto. El problema se me presentó al querer sincronizar los archivos en la PC de escritorio, para volver a editar desde allí al blog pero sin perder la edición que había hecho desde la otra máquina. Tenía entonces que actualizar los archivos locales con los que estaban en el repositorio remoto. Mi confusión surgió porque aparecía un mensaje (que ya no recuerdo y no puedo recuperar) en donde git me decía que había algún problema con elegir la rama, o algo así. Yo lo que había intentado, intuitivamente, era un \"git pull —all\" y también un \"git pull\" y \"git pull source\" pero en todos los casos algún error aparecía. La solución fue ejecutar, estando en la rama source la siguiente instrucción (sólo me había faltado agregar origin en mis intentos), que hace un fetch y un merge con la rama source del repositorio remoto (antes de ejecutarla, asegurarse de estar en la rama source local): $ git pull origin source ¡Felicidad!","url":"https://eldiegoefe.github.io/sincronizando-con-git.html","title":"Sincronizando con Git"},{"tags":"politica","text":"Esta guerra puede terminar y la siguiente puede ser evitada mediante el levantamiento del estado de sitio, permitiendo las importaciones y exportaciones desde Gaza, aliviando la presión sobre la población civil, para luego embarcarse en un esfuerzo genuino para alcanzar un acuerdo justo con los palestinos. Esta operación se siente diferente de escaladas anteriores. Un alto el fuego puede llegar pronto, pero también podríamos dirigirnos a un largo periodo de violencia e inestabilidad. Otra escalada no se limitará a Gaza: anoche Cisjordania vio su mayor protesta desde la Segunda Intifada, con dos muertos por disparos del ejército. Este círculo de violencia también debe ser entendido en el contexto de la crisis regional. Los palestinos fueron los únicos que no se rebelaron durante la Primavera Árabe, debido a sus circunstancias singulares bajo la ocupación israelí. Pero uno podía ver Gaza - especialmente si los eventos se desbordan hacia la Ribera Occidental - como el \"giro palestino\" de la revolución. La alianza entre Israel y Egipto también señala el hecho de que Israel ya no es un espectador, sino que es parte en la lucha que tiene lugar en la región. Israel nunca fue un observador pasivo. Es la superpotencia regional y cuenta con el apoyo de la superpotencia mundial. En cualquier momento, los dirigentes israelíes pueden elegir entre varias opciones políticas. Este fue el caso tras el secuestro y asesinato de tres adolescentes israelíes, la escalada que precedió a la campaña militar, y es también la situación actual. Me gustaría discutir una alternativa realista, junto con sus costos y riesgos. Funeral por los 26 miembros de la familia Abu Jame Funeral por los 26 miembros de la familia Abu Jame, quienes fueron asesinados el día anterior durante un ataque israelí sobre el barrio Bani Suhaila de Khan Yunis, Franja de Gaza, 21 de julio de 2014. Los informes indican que 18 de los 24 muertos eran niños de la familia Abu Jame. Los ataques israelíes han matado a 550 palestinos en la ofensiva actual, la mayoría de ellos civiles. (Basilea Yazouri / Activestills.org ) Una nueva política debe comenzar con un objetivo estratégico diferente. El actual objetivo israelí es \"paz a cambio de paz\", que significa un retorno al status quo a cambio de poner fin a la campaña militar. Para Gaza, esto significa la continuidad del bloqueo. Como he escrito aquí antes, Israel trata a Gaza y Cisjordania como un par de prisiones a cielo abierto que en ocasiones se salen de control; el objetivo de las operaciones militares es restaurar el orden. Esta política es también apoyada por la oposición israelí, la cual en ocasiones se denomina como \"el campo de la paz\" pero sin embargo es compatible con todas las guerras. Un objetivo estratégico alternativo debe incluir el levantamiento del estado de sitio en el corto plazo y alcanzar un compromiso justo y estable con el pueblo palestino en el mediano y largo plazo. Utilizo la palabra \"compromiso\" aquí porque no habrá una \"solución\" en Israel / Palestina que ponga fin a la política y la historia. Judios y palestinos continuarán compitiendo y cooperando en esta tierra en el futuro avisorable. Pero en tanto el mantenimiento del statu quo siga siendo el objetivo israelí, las campañas militares violentas, con todos sus horrores y las pérdidas en ambos lados, serán una consecuencia inevitable. No hay forma de evitar esto. La fórmula de \"paz a cambio de paz\" no funciona porque la ocupación no es la paz. Así que lo que los palestinos están consiguiendo es \"un poco menos de guerra a cambio de la paz.\" Por esta razón, la actual guerra con Hamas no es un esfuerzo para \"fortalecer a los moderados\" y para \"facilitar la paz\", como algunos afirman, sino más bien una alternativa a la paz. La naturaleza de este compromiso también debe entenderse de una manera diferente. Esto es mucho más importante que el debate por \"un estado / dos estados\". Si el compromiso debe incluir los supuestos actuales de la política israelí - que Israel debería tener poder de veto sobre la política palestina, sobre los candidatos y los ganadores; que los ciudadanos israelíes deben disfrutar al 100 por ciento de seguridad en todo el proceso y más allá; que los palestinos deben aceptar la narrativa sionista y renunciar a la suya; que Israel va a ser capaz de retener ciertos bienes para sí mismo (desde sitios religiosos a territorios estratégicos) -si todo esto va a continuar, entonces no hay solución, ni tampoco la habrá. Una vez más, vale la pena mencionar que la mayor parte de los \"partidarios de la paz\" israelí nunca renunciaron a estas demandas, por lo tanto, su apoyo a la negociación pacífica no puede ser tomado muy en serio. Si el objetivo estratégico es en efecto un compromiso o una solución, los israelíes deben darse cuenta de que no podrán controlar la política o la economía palestinas, y que se debe estar preparado para la posibilidad de que se produzcan algunas bajas a lo largo del camino. Por otro lado, no es que no tenemos bajas ahora. El status quo ofrece interminables rondas de escaladas de violencia. Algunos de ellos ( N del T: supongo que se refiere a los compromisos o acuerdos ) serán más económicos para Israel en términos de vidas humanas, y otros un poco más caros. Un compromiso, por otro lado, no garantiza completamente la seguridad, pero sí presenta una oportunidad cierta para un futuro mucho mejor. Soldados y familiares lloran ante la tumba del sargento israelí Banaya Rubel Soldados y familiares lloran ante la tumba del sargento israelí Banaya Rubel durante su funeral el 20 de julio de 2014 en Holon, Israel. El sargento Rubel fue asesinado junto con otro soldado del ejército israelí en el duodécimo día de la operación \"Margen Protector\", cuando militantes de Hamas se infiltraron en Israel desde un túnel excavado desde Gaza y se enfrentaron con soldados israelíes. (Oren Ziv / Activestills.org ) Israel puede terminar la lucha ahora. Para ello, puede acordar el levantamiento del bloqueo a Gaza. En teoría, Egipto podría hacerlo abriendo el cruce de Rafah, pero al final no va a reemplazar a Israel. El bloqueo es una política israelí, y Gaza es una cuestión palestina vinculada a la Palestina histórica. El levantamiento del asedio puede llevarse a cabo por etapas. Israel puede abrir de inmediato los pasos fronterizos terrestres de personas y mercancías, ya que los supervisa todos modos y podría impedir la importación de armas. No debería haber ningún problema en permitir las exportaciones desde la Franja y el movimiento de personas hacia afuera y hacia adentro, dos cosas que Israel prohibió, salvo en casos particulares. Naturalmente, Israel también debe permitir que los funcionarios de Gaza sean pagados. Prevenir la transferencia de fondos para el pago de sus salarios es algo que ha contribuido a la escalada actual. Israel también debe reconocer el gobierno de unidad palestino y alentar el fortalecimiento de su autoridad en todos los territorios palestinos ocupados. Esto es en interés de Israel también, nunca entendí por qué el gobierno se opone a ello. Una vez que se alcance el alto el fuego, la Autoridad Palestina e Israel rápidamente deberían ponerse de acuerdo en un mecanismo para permitir los viajes aereos y marítimos hacia y desde Gaza. Aquí es donde Israel puede exigir garantías internacionales, o la presencia de monitoreo por parte de terceros. También se puede pedir que fuerzas internacionales estén presentes a lo largo y alrededor de la frontera con Gaza. Esto podría ayudar a lidiar con el problema de los túneles sobre los cuales está preocupado Israel. Esto es en el corto plazo. Hamas ya indicó que esas medidas llevarían a un alto el fuego de largo plazo. Más que nada, estos términos pueden aliviar el sufrimiento de la población de Gaza, lo cual debería estar en la mente de todos. Naturalmente, estas medidas no proporcionarían garantías de seguridad completas para Israel; no existen tales garantías. Aquí es donde volvemos a mi punto anterior: si uno no está preparado para los riesgos involucrados en el colapso o la violación de los acuerdos, ningún acuerdo será posible en absoluto. El significado \"de facto\" de esa posición es el apoyo al status quo actual. Al mismo tiempo, vale la pena recordar que los acuerdos no siempre están obligados a derrumbarse, y la historia está llena de ejemplos de medidas diplomáticas que triunfaron. Algunas violaciónes son inevitables, pero el conflicto puede tomar gradualmente una forma no violenta. Para que tal acuerdo de alto el fuego no lleve a otra ronda de guerra, debe ir acompañado de un esfuerzo inmediato para alcanzar un compromiso a gran escala; uno que finalizaría la ocupación, capaz de tocar todos los asuntos fundamentales, incluyendo Jerusalem y los refugiados. Como aprendimos en Oslo, los acuerdos provisionales que se convierten en acuerdos permanentes son un problema en sí y por sí mismos, y pueden, de hecho, conducir a más violencia. No voy a entrar aquí en el debate acerca de \"un Estado / dos Estados / una Confederación\". Sin embargo, debe recordarse que todas estas opciones incluyen ciertos riesgos de seguridad y, más importante aún, el público judío tendría que renunciar a bienes considerables. En la solución de \"dos Estados\" estos son los bienes territoriales. En el caso de la solución de \"un Estado\" esto significa compartir las instituciones y símbolos del Estado, y la redistribución de la tierra. La alternativa a estos acuerdos no es solamente el status quo, sino tal vez el retorno a un control total israelí de Cisjordania y Gaza. Incluso si Hamas es derrotado y el orden anterior de las cosas se restablece, los palestinos volverán a luchar por su independencia una vez que se recuperen. La Autoridad Palestina no será capaz de hacer el trabajo de policía de Israel por mucho más tiempo -los palestinos la derrocarán o la forzarán a apoyar la sublevación, y luego Israel la destruirá. Esta es la elección que enfrentamos como israelíes. El precio de un compromiso es innegable, sin duda hay riesgos, pero no es un reto imposible. Israel es rico y poderoso, y tiene el apoyo de Occidente; aquellos que lo desafían están divididos y aislados. No está claro cuántas de estas circunstancias existirán en el futuro. Escrito por Noam Sheizaf . ( Artículos de Noam Sheizaf ) Link al artículo original (en inglés) . Publicado: 25 de Julio de 2014 Traducción: El Diego Efe y GoogleTranslator.","url":"https://eldiegoefe.github.io/israel-tiene-alternativas-a-esta-guerra-por-noam-sheizaf.html","title":"Israel tiene alternativas a esta guerra (por Noam Sheizaf)"},{"tags":"politica","text":"Parte III (y última). Esperando al Mesías con un faso. Fin de la tríada para deshacerme de amigos y familiares. Por suerte es más corta que las partes anteriores porque ya me canse de decir boludeces y porque la solución posible al conflicto arabe-israelí o sionista-palestino es bastante clara. Idealmente sería la construcción de un gran Estado sin denominaciones religiosas, en el que puedan convivir todos los hombres y mujeres de buena voluntad que crean en la superstición que se les cante, libres de vender su fuerza de trabajo al capitalista de la religión que prefieran. Es una opción altamente preferible pero lejana, como la revolución socialista o que Costa Rica salga campeón en el próximo mundial de futbol. Sí me parece un objetivo posible y necesario, para el cual la opinión pública internacional debe presionar junto con los gobiernos de las potencias imperialistas (?), que Palestina se erija como Estado en los territorios completos de Cisjordania y Gaza, lo cual implica que las numerosas colonias judías que quedaron dentro de esos territorios pasarán a formar parte del nuevo país y sus pobladores serán reconocidos como ciudadanos palestinos con los mismos derechos que gozan los palestinos que son actualmente ciudadanos israelíes. El ejército israelí se retirará a su propio territorio demarcado por sus fronteras previas a la Guerra de los Seis Días (1967). Los refugiados deberán recibir una reparación económica que pagará Israel con el dinero que actualmente forma parte de su presupuesto militar, y los judíos que quieran regresar a cualquiera de sus países de origen (desde Marruecos a Pakistán) serán bienvenidos o también indemnizados. Israel no debería rechazar que Egipto pretenda ceder la Península del Sinaí al Nuevo Estado Palestino, y Siria, a su vez, a los Altos del Golán también a Palestina, como muestra de buena voluntad y apoyo al proceso de paz. Israel deberá dejar en libertad a todos los presos palestinos y a todos los objetores de conciencia del ejercito israelí (alias \"refuseniks\"). Ambos paises llevarán a cabo campañas de alfabetización en derechos humanos, reconocimiento de la humanidad del otro y festivales con orquestas sinfónicas conjuntas. La venta de armas a Israel y Palestina estará vedada en el mundo entero, y los ejércitos y milicias serán desmantelados en el corto plazo. Los matrimonios mixtos, los matrimonios homosexuales y los harenes multiétnicos serán apadrinados por la Fundación Evita. El himno nacional de ambos países será la canción \"Imagine\". La ronda de negociaciones en la que se acordarán todos estos puntos deberá llamarse \"Acuerdos Nestor Kirchner\". Todos fumarán faso mientras esperan al Mesías. Bueno, tras este epílogo, me despido hasta la próxima invasión sionista, hasta la siguiente intifada, hasta el próximo ataque suicida, hasta el bloqueo inhumano que ocurra a continuación, etc. La estupidez humana no tiene límites. Shalom!","url":"https://eldiegoefe.github.io/acerca-de-la-guerra-en-gaza-33.html","title":"Acerca de la guerra en Gaza (3/3)"},{"tags":"politica","text":"Parte II . La verdad de los knishes de papa. En la segunda parte de mi escrito destinado a quedarme completamente sin amigos y sin familia voy a centrarme en la más importante de las condiciones imprescindibles para que haya paz entre israelíes y palestinos. El punto es sencillo de enunciar: no puede haber diálogo sin Verdad. Los judíos condenamos a quienes niegan un hecho que para nosotros constituye una verdad histórica, el asesinato de seis millones perpetrado por los nazis y sus colaboradores. ¿Por qué entonces contar una historia notoriamente improbable acerca de la creación del Estado de Israel, conociendo las tragedias y asesinatos asociados indisolublemente a la historia de las naciones en las que vivimos? El relato que prevalece entre los judíos que apoyan a Israel es el de la Palestina vacía, árida y yerma en manos británicas, e incluye a los árabes abandonando sus casas y aldeas únicamente ante el pedido de sus autoridades religiosas para permitir una mayor efectividad de los ejércitos de Jordania, Egipto, Siria, Líbano e Irak que declararon la guerra al nuevo Estado en el momento en que éste declaró su fundación (en 1948). Los palestinos llaman Al-Nakba (La Catástrofe) a los sucesos de esa misma época, durante los cuales fuerzas militares y paramilitares judías no sólo respondieron a la agresión externa sino que asesinaron poblaciones palestinas indefensas (la más conocida es Deir Yassin) y de este modo provocaron el terror y la huida de miles de palestinos que se refugiaron en campamentos en Gaza y en Cisjordania (hay historiadores israelíes que coinciden con la veracidad de estas afirmaciones, ¿por qué hay quienes lo niegan?). El problema de los refugiados palestinos (no sólo éstos, sino los que posteriormente se generaron en la Guerra de 1967) es de una dificultad muy profunda, y ha sido una de las claves que empantaron siempre las negociaciones de paz. Así que vuelvo a insistir: me resulta aberrante la negación de hechos históricos. Uno puede realizar distintas apreciaciones y lecturas sobre su significado, incluso puede intentar justificar lo ocurrido, pero no puede negarlo. Lo mismo puede decirse de múltiples acciones militares israelíes, que se enuncian oficialmente como acciones defensivas cuando no son más que ataques desmedidos frente a una agresión de mucha menor magnitud, o incluso acciones lisa y llanamente delictivas como la complicidad en las masacres de Sabra y Shatila en 1982. El problema es grave porque el reclamo palestino, amparado por leyes internacionales, es que los refugiados puedan volver. Esto resulta inaceptable para el Estado Judío porque en la práctica la tierra y las viviendas de los refugiados fueron destruidas y/o expropiadas y los gobiernos deben tener razones económicas para la negativa. Pienso que esto no sería tan dificil de solucionar porque el gasto militar para la guerra debe superar con creces el costo de las reparaciones económicas. El problema más grave para los israelíes es que si los refugiados vuelven y se les restituyen los derechos civiles como ciudadanos de Israel, la proporción de judíos cae a números que ponen en cuestión el carácter judío del Estado, y por ende la razón misma de la existencia de Israel. Además el miedo debe estar detrás de la negativa a que los refugiados vuelvan: ¿quiénes garantizarían que los hasta hace momentos combatientes suicidas se conviertan en amables vecinos fronteras adentro? La verdad también sufre recortes cuando se piensa a los combatientes palestinos como una fuerza gobernada por el deseo de justicia, paz y prosperidad. Una cosa es justificar el derecho a la resistencia frente a la invasión de los territorios y otra justificar toda forma de acción violenta en el marco de esta resistencia. La decisión de utilizar el terror por parte de las organizaciones islámicas, llamando a una guerra santa para matar a los judíos o expulsarlos al mar, no puede ser aceptable ni siquiera para quienes creen en la violencia revolucionaria. Yo creo en el derecho a la resistencia, y creo que la violencia que puede generar quien resiste es en definitiva una respuesta a la violencia del invasor-opresor. Pero la violencia revolucionaria debe tener una racionalidad detrás, debe medir el efecto de sus acciones. Lo pienso así también para el accionar de las organizaciones armadas en el pasado argentino. La resistencia no puede ser una sucesión de actos desmedidos, porque los propios integrantes del pueblo oprimido sufren la consecuencia de tales actos. ¿Cuáles son estos actos desmedidos? Los atentados suicidas de objetivos civiles, el lanzamiento permanente de artillería hacia ciudades israelíes (que no causan mucho más que daño físico por la mala puntería o los desarrollos de la tecnología de defensa israelí). Evidentemente la eficacia de esta opción es dudosa, porque 60 años de acciones armadas de diverso calibre (incluyendo secuestro de aviones civiles, asesinato de deportistas, utilización de niños combatientes, etc) no han logrado la expulsión del invasor. La otra mentira es la masificación de los contendientes en dos bandos homogeneos. Los palestinos no son todos partidarios de Hamás ni los israelíes son todos fanáticos expansionistas. Hay una gran variedad de posturas hacia dentro de cada bando (desconozco cuánta libertad para expresarlas hay en la franja de Gaza, pero en Israel hay continuas demostraciones antimilitaristas por parte de grupos de árabes y judíos israelíes) aunque parece que las posturas más radicales y violentas son las que actualmente predominan. Estaría bueno en vez de reducir las intervenciones a la condena de unos u otros, indagar acerca de las alternativas en juego y apoyar con mayor nivel de discernimiento cuáles son las posibilidades menos injustas. Apoyar la resistencia palestina sin mencionar el carácter retrógrado de organizaciones como Hamas me parece el error más repulsivo de las organizaciones de izquierda. Quejarse de los misiles de Gaza sin reconocer los condiciones de vida lamentables que impone el bloqueo israelí es también una invitación a la irracionalidad. Durante las guerras siempre es imprescindible amplificar las voces críticas, porque las tendencias nacionalistas, religiosas y los miedos son los peores enemigos de la conciencia humana. Se me enfrían los knishes, así que de nuevo me despido.","url":"https://eldiegoefe.github.io/acerca-de-la-guerra-en-gaza-23.html","title":"Acerca de la guerra en Gaza (2/3)"},{"tags":"politica","text":"El ovillo en Medio Oriente está tan enredado, que me resulta dificil encontrar una punta a partir de la cual hilar un relato, pero ante el requerimiento de interlocución de mis queridas amigas, decidí sentarme a escribir sobre este tema. De todos modos lo primero es lo más fácil, reclamar inmediatamente una tregua, un cese total del uso de armamentos de todos los calibres y un llamamiento a una mesa de diálogo. Parte 1. El Sionismo. El Estado de Israel declaró su independencia en 1948. Materializó el proyecto del sionismo, un movimiento cuyo objetivo fue el establecimiento de un Estado donde los judíos pudiesen vivir sin leyes restrictivas ni persecuciones ni incertidumbre por su condición de judíos (un lugar donde el progresismo pudiese instrumentar el Plan \"Circuncisiones Para Todos\"). Pero desde antes de esa fecha, y hasta la actualidad, el proyecto y luego la existencia del Estado de Israel provocó un enfrentamiento sanguinario y crónico con los nativos de la tierra donde se erigió (Palestina) y con sus paises vecinos. Me inquieta preguntarme sobre el sionismo. ¿Era y sigue siendo necesaria la creación y existencia de un \"Estado Judío\"? Al día de hoy, desde mi punto de vista, una alternativa mejor parece ser la integración y la construcción de una sociedad global más igualitaria (nada de construir el \"Judaismo en un Solo País\"), pero en el particular momento en que se gestó, fines del siglo XIX con sus románticos pogroms rusos y mediados del siglo XX con su solución final entiendo que ese proyecto haya sido imprescindible para muchos. El problema de un Estado Judío es que implica una organización con leyes que diferencian a los ciudadanos por su condición religiosa o su identidad cultural (pues habemos judíos que no tenemos un ápice de religiosos). Ya la idea de un Estado me resulta repulsiva en sí, por lo que de Justicia e Igualdad poseen los Estados Modernos, como para que me resulte atractiva la idea de un Estado con población diferencial. En el caso de Israel una ley que expresa esta diferencia es la de \"Retorno\", según la cual los hijos de madres judías de todo el mundo tienen derecho a emigrar hacia Israel (reciben ayuda estatal para ello) y a obtener la ciudadanía. Esta ley oficia como una protección ante las persecuciones en el exterior (o la mala fortuna de los planes económicos de Argentina) y en la práctica también funciona como un intento de mantener en crecimiento la población judía del país (que debe lidiar con los mayores índices de crecimiento de la población musulmana). Desconozco cuáles son las otras leyes que producen diferencias. Debe haberlas, pero no al estilo \"Apartheid\" con lugares, o actividades, o servicios prohibidos para los no-judíos. En Israel hay libertad de expresión, de reunión, de organización política, igualdad de género, escuelas bilingues, etc. En los hechos, en cambio, siempre existen subterfugios que expresan la diferencia: la inversión estatal en zonas árabes debe ser escasa, la calidad de los servicios debe empeorar a medida que los barrios y aldeas se vuelven más árabes que judías, seguro hay una estratificación de trabajos y salarios, hay sectores de la población xenofóbica, etc. Peor aún, la persistencia de una guerra interminable fogoneada desde el lado israelí-norteamericano por intereses nacionalistas, integristas, armamentistas y reproducida en la falta de racionalidad ya que se escuda en la necesidad de asegurar la defensa y la paz mientras administra la opresión, y todo eso junto con la ocupación de territorios, la multiplicación de presos palestinos, y la manutención de una sociedad militarizada, promueve una cultura esquizofrénica que vuelve un absurdo el desarrollo de la confianza y la relajación de las tensiones hacia el interior y hacia sus vecinos (disculpen, no le encuentro la vuelta a la oración). Todo esto se realimenta regenerándose una carrera hacia la muerte, hacia el intercambio de venganzas eternas, y alimenta la reproducción de las ideas menos humanistas. Israel no es la Sudáfrica del Apartheid ni tampoco el Estado Igualitario de la Leche, el Trigo y la Miel. La respuesta del sionismo a las persecuciones e injusticias en la Diáspora se ha demostrado como una respuesta insatisfactoria al no deparar una vida de paz y prosperidad, además de significar la tragedia de Otros. Sin embargo, el Estado de Israel ya existe, hay varias generaciones de israelíes que se afincaron y desarrollaron un sentimiento de pertenencia a esa tierra. Sacarlos de allí sería como sacar a los palestinos en 1948 (voy a volver sobre esto más adelante). El sionismo, en tanto expresión de la libre voluntad de un conjunto de individuos que decidieron y deciden vivir de un modo particular en un lugar particular, me resulta aceptable. En cambio, la desposesión, la expulsión y la violencia ejercida sobre los palestinos, pobladores de la tierra elegida (y no \"Tierra Prometida\") es algo totalmente repudiable, es algo que atenta contra los fundamentos de la iniciativa. Yo no veo contradicción en esta aceptación y repudio simultaneo, la obligación de rechazar el sionismo por cómo se dieron y cómo se dan las cosas en Israel es como rechazar el socialismo por las experiencias fallidas de la URSS , China, Cuba y demás. Voy a seguir comentando mi impresión respecto de la situación actual (Israel ya existe), y voy a enunciar algunas condiciones necesarias para posibilitar la paz. Adelanto que no voy a proponer la solución ideal: la destrucción de todos los Estados y del Capitalismo, porque esa no es sólo necesaria para la vida en Medio Oriente y además viene un poco demorada. Este punto de partida sobre el sionismo y el derecho a la existencia del Estado de Israel (lo segundo en realidad no lo abordé) me parecía imprescindible, y supongo que será motivo de discusión. Pero ahora me esperan para un asado, así que chau.","url":"https://eldiegoefe.github.io/acerca-de-la-guerra-en-gaza-13.html","title":"Acerca de la guerra en Gaza (1/3)"},{"tags":"salud","text":"Nuevamente otro descubrimiento: tras años de ser un alfeñique pulsateclas he encontrado una (o varias) disciplinas para fortalecer mi cuerpo sin ir al gimnasio (actividad y ambiente que me resultan poco atractivos). Lástima que ya pasaron cerca de dos semanas de este contacto inicial y no logro reconstruir cómo fue que inicié mi jornada hacia la gimnasia callejera. Hacer barras (levantar el cuerpo sostenido desde un caño a cierta altura, hasta lograr sobrepasar con la barbilla ese punto de apoyo que simultaneamente resulta inalcanzable) fue una pesadilla de mi primer año en la escuela secundaria. El profesor Alfonsini, en las clases de Educación Física en el parque Berduc, torturaba nuestras siestas, dos veces a la semana, con un circuito de ejercicios que ponía a prueba nuestra fuerza, aguante y capacidad de retención del almuerzo que habíamos terminado de ingerir media hora antes de empezar la clase. La secuencia creo que incluía tres barras y una \"vuelta pajarito\". Para ejecutar la vuelta había que llevar el mentón a la barra y desde esa posición tirar la cabeza atrás y las piernas hacia delante, y con ese impulso realizar una rotación completa con el cuerpo alrededor de la barra. Era tal la falta de fuerza que tuvimos que empezar el gimnasio con el Aguja Rubín para lograr tales hazañas. Por supuesto que nunca más volví a hacer este tipo de ejercicios cuando, culminado primer año, cambiamos de profesor. La cuestión es que hace un par de semanas me encontré con este video (cómo llegué a él ya no lo recuerdo). Y fue un flash. Me fui inmediatamente al parque en busca de una barra y cuando encontré unos caños de donde colgarme hice la prueba. A pesar de estar en relativamente buena forma por la práctica de TaiChi y Pakua, no tuve fuerza suficiente para elevarme sin impulso. Pasé por un gimnasio a preguntar el precio de la cuota mensual ($200, con el dolar 8 a 1 aprox son U$S 25), pero más que por la plata, tras ver un montón de videos en YouTube, me decidí a intentar la vía del fortalecimiento a través de ejercicios tradicionales, incluyendo las temidas barras en sus múltiples agarres. Este tipo de ejercicios ancestrales toma el nombre de calistenia; en vez de levantar pesas consiste en usar el peso del cuerpo como resistencia. Llamativamente, existe un auge mundial de esta disciplina, con grupos que la practican en muchos lugares del mundo, y que suben videos con tutoriales y demostraciones de habilidades que impresionan. Al haber tanta diversidad de materiales (encontré montones de videos orientados a principiantes), se hace dificil armar una rutina personal, porque si bien hay algunos consejos que se repiten, también hay distintos modos de trabajar los mismos músculos, o distintas directivas en cuanto a número de repeticiones, tiempos de descanso, secuencias… de modo tal que no resulta tan fácil construir un plan de trabajo. Por este motivo quizás opte por empezar con un programa de entrenamiento llamado Freeletics , también con ejercicios que podríamos llamar calisténicos (sólo un ejercicio requiere una barra, el resto son flexiones de brazos, abdominales, sentadillas y cosas por el estilo). Este sistema requiere un entrenamiento de 4 días a la semana que son muy intensos; yo creo que una persona sin entrenamiento previo puede colapsar si no se inicia gradualmente. Para conocer de qué se trata (y de paso pre-acondicionarse viendo los límites de cada uno) el sistema ofrece 5 semanas de un programa gratuito (no personalizado). Luego, está la opción de pagar 40 euros por un programa personalizado de 15 semanas que, según videos que lo testimonian en YouTube y comentarios en sitios de aficionados al fitness, permite cambiar el cuerpo ganando fuerza y condición cardiovascular en apenas 4 meses. Entre otras dudas, me pregunto cómo coordinarlo con mis otras actividades físicas (los entrenamientos de Pakua dos veces a la semana también pueden ser muy intensos a veces), y eso puede ocurrir cuando aún no esté recuperado de una sesión de Freeletics. Según la empresa y los testimonios de quienes lo practican los entrenamientos son muy demandantes, de una intensidad tal que requieren determinación para no abandonar. Está claro que tengo un nuevo objetivo: ganar fuerza para mejorar en la práctica de artes marciales, desarrollar un control corporal que me permita intentar algunas de las acrobacias de los videos, y a través de todo esto explotar las potencialidades de mi cuerpo sin explotarlo literalmente.","url":"https://eldiegoefe.github.io/fitness-freeletics-calistenia-y-afines.html","title":"Fitness, freeletics, calistenia y afines"},{"tags":"blog","text":"Los grupos de afinidad son las organizaciones básicas que crean los anarquistas para difundir la idea anarquista. El término \" grupo de afinidad \" (\"affinity group\") viene de la F.A.I. española ( Federación Anarquista Ibérica ) y se refiere a su forma de organización ideada durante sus luchas por la libertad. En su forma más básica, es un grupo (usualmente pequeño) de anarquistas que trabajan conjuntamente para difundir sus ideas al público general, utilizando la propaganda, iniciando o trabajando en campañas y difundiendo sus ideas dentro de organizaciones populares (tales como los sindicatos) y comunidades. Su objetivo no es convertirse en \"lider\" sino tomar la iniciativa, actuar como un catalizador dentro de los movimientos populares. No es de sorprender que refleje ideas anarquistas básicas: \"Autónoma, comunal y directamente democrática, el grupo combina la teoría revolucionaria con el estilo de vida revolucionario en su conducta cotidiana. Crea un espacio libre en el que los revolucionarios pueden rehacerse a sí mismos individualmente, y también como seres sociales\" [Murray Bookchin, Post-Scarcity Anarchism , p. 144]. La razón de esto es simple, dado que un \" movimiento que trató de promover una revolución liberadora debió desarrollar formas liberadoras y revolucionarias. Esto significaba… que debía reflejar a la sociedad libre que estaba tratando de lograr, y no a la sociedad represiva que intentaba derrocar. Si un movimiento procura lograr un mundo unido por la solidaridad y la ayuda mutua debe estar guiada por estos mandatos; si trataba de lograr una sociedad descentralizada, sin estado y no-autoritaria, debía estar estructurada de acuerdo con esos objetivos \" [Bookchin, The Spanish Anarchists , p. 180] El objetivo de una organización anarquista es promover un sentido de comunidad, de confianza en las propias capacidades, y permitir a todos involucrarse en la identificación, puesta en marcha y la gestión de las necesidades, decisiones y actividades del grupo. Deben asegurar que las personas estén en condiciones (tanto física, como parte de un grupo, como mentalmente, en tanto individuos) para hacerse cargo de sus propias vidas y para ejecutar acciones que respondan a las necesidades y deseos individuales y colectivos. La organización anarquista trata de empoderar a todos, trata de desarrollar individuos completos o \"integrales\" y una comunidad que fomente la individualidad (no el individualismo abstracto) y la solidaridad. Se trata de tomar decisiones colectivas de abajo hacia arriba, que empodera a los que se encuentran en la \"base\" de la estructura y sólo es delegada la labor de coordinar y ejecutar las decisiones de los miembros (no transfiere el poder de tomar decisiones). De esta forma, la iniciativa y el poder de unos pocos (el gobierno) se sustituye por la iniciativa y la potenciación de todos (anarquía). Los grupos de afinidad existen para lograr estos objetivos y se estructuran para incentivarlos. El grupo de afinidad local es el medio por el cual los anarquistas coordinan sus actividades en una comunidad, lugar de trabajo, movimiento social, etc. Dentro de estos grupos, los anarquistas discuten sus ideas, políticas y esperanzas, organizan el trabajo de propaganda, discuten cómo van a trabajar dentro de organizaciones mayores como los sindicatos, cómo sus estrategias encajan dentro de sus planes y objetivos de largo plazo y así sucesivamente. Es la forma básica en que los anarquistas trabajan sus ideas, organizan sus recursos y hacen llegar su mensaje hacia los demás. Puede haber grupos de afinidad para para intereses y actividades diferentes (por ejemplo, un grupo de afinidad para el lugares de trabajo, un grupo de afinidad para una comunidad, un grupo de afinidad anarco-feminista, etc. Todos pueden coexistir dentro de la misma zona, con miembros repetidos). Además, así como estas actividades más \"políticas\", el \"grupo de afinidad\" también subraya la \" importancia de la educación y la necesidad de vivir con preceptos anarquistas — la necesidad… de crear una contra-sociedad capaz de proporcionar el espacio para que las personas puedan comenzar a rehacerse a sí mismas. \" [Bookchin, Op. Cit. , p. 180]. En otras palabras, los \"grupos de afinidad\" apuntan a ser la \"gérmenes vivientes\" de la nueva sociedad en todos los aspectos, y no meramente en una estructura. Por lo tanto los grupos de afinidad son agrupaciones autónomas, auto-gestionadas, de anarquistas que se unen y trabajan por intereses y actividades específicos. Esto significa que \" en una organización anarquista los miembros individuales pueden expresar cualquier opinión y usar cualquier táctica que no esté en contradicción con los principios aceptados ni pongan en peligro las actividades de los demás \" [Errico Malatesta, The Anarchist Revolution , p. 182]. Tales grupos son un elemento clave para que los anarquistas coordinen sus sus actividades y difundan su mensaje de libertad individual y cooperación voluntaria. Sin embargo, la descripción de lo que es un \"grupo de afinidad\" no explica por qué los anarquistas se organizan de esa forma. Esencialmente, estos \"grupos de afinidad\" son los medios mediante los cuales los anarquistas intervenienen realmente en las luchas y movimientos sociales, a fin de ganar a las personas para la idea anarquista y de esa manera contribuir a transformar las luchas contra la injusticia en luchas por una sociedad libre. Discutiremos el rol que juegan estos grupos en la teoría anarquista en la sección J.3.6. Estos grupos de afinidad básicos no son vistos como suficientes por sí mismos. La mayoría de los anarquistas ven la necesidad de que los grupos locales trabajen conjuntamente con otros en una confederación. Esta cooperación tiene como objetivo reunir recursos y expandir las opciones para los individuos y los grupos que son parte de la federación. Como con el grupo de afinidad básico, la federación anarquista es una organización autoorganizada: \"Completa autonomía, plena independencia y por tanto la total responsabilidad de los individuos y los grupos; libre acuerdo entre aquellos que creen que es útil unirse en la colaboración por un objetivo común; el deber moral de llevar a cabo los compromisos adquiridos, y no hacer nada que pueda contradecir el programa aceptado. Es sobre esas bases que deben ser diseñadas y construidas las estructuras prácticas y las herramientas adecuadas para dar vida a la organización. De ahí los grupos, las federaciones de grupos, las federaciones de federaciones, los encuentros, los congresos, los comités de enlace, etc. Pero todo esto debe ser hecho libremente, de manera tal que los pensamienton y las iniciativas de los individuos no se obstruyan, y únicamente con el propósito de dar mayor impulso a los esfuerzos que, aisladamente, serían inefectivos o imposibles\" [Malatesta, Op. Cit. , p. 101] Para ayudar en este proceso de propaganda, agitación, discusión política y desarrollo, los anarquistas organizan federaciones de grupos de afinidad. Éstos toman tres formas principales, las federaciones \" síntesis \" (ver sección J.3.2 ), federaciones \" Plataformistas \" (ver sección J.3.3 mientras que la sección J.3.4 presenta críticas a esta tendencia) y los grupos de \" lucha de clases \" (ver la sección J.3.5 ). Todos los distintos tipos de federación están basados en grupos de anarquistas organizándose a sí mismos en forma libertaria. Esto es porque los anarquistas tratan de vivir actualmente mediante los valores del futuro, tanto como esto sea posible bajo el capital, y tratan de desarrollar organizaciones basadas en la ayuda mutua, en las cuales el control se ejerce desde abajo hacia arriba y no desde arriba hacia abajo. Debemos notar que estas formas de organización no son mutuamente excluyentes. Las federaciones de tipo \"síntesis\" suelen tener dentro de sí grupos de \"lucha de clases\" y grupos \"Platformistas\" (aunque, como quedará claro, las federaciones Platformistas no poseen grupos de síntesis dentro de ellas) y la mayoría de los países tienen diferentes federaciones que representan a las distintas perspectivas dentro del movimiento. Por otra parte, cabe señalar también que ninguna federación será una expresión totalmente \"pura\" de cada tendencia. Hay grupos de \"síntesis\" que se fusionan en grupos de \"lucha de clases\", hay grupos Platformistas que no suscriben totalmente la Plataforma y así sucesivamente. Aislamos cada tendencia para mostrar sus características esenciales. En la vida real muy pocas federaciones, si es que hay alguna, se ajustan exactamente a los tipos destacamos. Sería más preciso hablar de organizaciones que son descendientes de una determinada tendencia, por ejemplo la Federación Anarquista Francesa está principalmente influenciada por la tradición de la síntesis pero no es, estrictamente hablando, 100% síntesis. Por último, también debemos señalar que el término grupo anarquista de \"lucha de clases\" no supone en modo alguno que los grupos de \"síntesis\" y \"platformismo\" no apoyen o no tomen parte en la lucha de clases, ellas de definitivamente sí lo hacen — es solamente un término técnico para diferenciar entre los tipos de organización. Debe ser remarcado que los anarquistas no reducen el complejo problema de las ideas y de la organización política en una organización sino que reconocen que diferentes tendencias dentro del anarquismo se expresan a sí mismas en diferentes organizaciones políticas (e incluso dentro de la misma organización). Es un buen signo la diversidad de grupos anarquistas y federaciones que expresan la diversidad de ideas políticas e individuales que se esperan en un movimiento que se orienta hacia una sociedad basada en la libertad. Todo lo que tratamos de hacer es pintar un cuadro amplio de las similitudes y diferencias entre las varias perspectivas en la organización del movimiento e indicar el rol que estas federaciones juegan en la teoría libertaria, es decir, una ayuda en la lucha y no un nuevo liderazgo en la búsqueda de poder.","url":"https://eldiegoefe.github.io/grupos-de-afinidad.html","title":"Grupos de afinidad"},{"tags":"tecnicismos","text":"Actualización Pueden ver una actualización de estas instrucciones en en este nuevo post Instrucciones El sitio con las intrucciones sobre Pelican es este . Casi todo el contenido siguiente está basado en las instrucciones de Nicholas Tan Jerome . Para instalar Pelican se puede usar \"pip\", más adelante hay más detalles, pero como referencia veloz basta decir que se puede hacer sencillamente (en la rama \"source\" y desde el ENV que se creará más adelante): (ENV) $ pip install pelican La idea para trabajar Pelican con Git es tener un directorio para el repositorio con el nombre de la página, y dentro de él un directorio para el virtualenv donde va a correr el Pelican. Por ejemplo, algo así (más adelante se explica en qué ramas del repositorio se almacenará el código fuente del sitio, y las páginas del blog propiamente dichas): $ ~/documentos/nombreUsuario.github.io # para el sitio $ ~/documentos/nombreUsuario.github.io/ENV # para el env Primero armo un repositorio (vacío) en GitHub para alojar mi blog personal. GitHub ofrece la dirección nombreUsuario.github.io con este propósito. Luego clono el sitio en un directorio local donde se desea mantener el blog: $ cd ~/documentos $ git clone https://github.com/nombreUsuario/nombreUsuario.github.io Como el repositorio lo creé vacío, sin más que el README .md, entonces éste es el único archivo que existe en el directorio ~/documentos/nombreUsuario.github.io Para instalar el virtualenv (medio ambiente virtual) en el directorio deseado: $ virtualenv ~/documentos/nombreUsuario.github.io/ENV $ cd ~/documentos/nombreUsuario.github.io/ENV $ . bin/activate La última instrucción puede reemplazarse por \"source ENV /bin/activate\" Esas instrucciones dejan el entorno listo con un Python funcional (y sus librerías). Los directorios instalados dentro de ENV son: bin include lib lib64 La última orden (. bin/activate) activa este entorno y cambia el prompt (que aparecerá precedido de ENV ). El directorio ENV no necesita ser mantenido en el repositorio de GitHub (eso sí, si se trabaja el blog desde distintas computadoras, hay que tenerlo instalado en cada una), así que conviene agregarlo al .gitignore con la siguiente linea en ese archivo ( igual finalmente lo saqué, así al clonar el repositorio del blog en una computadora nueva no lo tengo que instalar ): ENV / Tampoco interesa mantener los archivos de backup así que también se puede agregar este renglón: *~ Con git status veremos que estamos en la rama \"master\" y que falta el commit para agregar el archivo .gitignore. Entonces hacemos: (ENV) $ git add . (ENV) $ git commit -m \"Commit inicial\" Nuestra rama local de master queda adelantada respecto de la rama master en el repo externo. Esto lo avisa el sistema ante la última orden ingresada. Dado que al repositorio externo no vamos a necesitar subir los archivos de Pelican y los que surjan de la configuración del sitio, entonces instalamos este programa en una nueva rama que llamaré \"source\": (ENV) $ git branch source (ENV) $ git checkout source (alternativamente estas dos instrucciones se pueden condensar en una sola: git checkout -b source) Para instalar Pelican hay 3 opciones (y no hay que olvidarse que se instala en el ENV ). Hay que estar atento a que no haya errores, porque sino se instala mal y, por ejemplo, más tarde puede no funcionar \"make serve\". (ENV) $ pip install pelican # opción 1 (ENV) $ easy_install pelican # opción 2 (ENV) $ pip install -e git://github.com/getpelican/pelican#egg = pelican La primera vez tras la instalación se debe ejecutar la orden pelican-quickstart para configurarlo (va el guión entre las dos palabras). Tras ese comando, y tras contestar todas las preguntas que aparecen, no solamente se guarda la configuración deseada (en los archivos pelicanconfig.py y publishconf.py), sino que se generan todos los archivos que Pelican necesita (incluso dos directorios nuevos: content y output). El site url que elijo es http://nombreUsuario.github.io El contenido de pelicanconf.py tras responder a las preguntas de pelican-quickstart y además editar manualmente el archivo para completar los datos, queda así: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/env python # -*- coding: utf-8 -*- # from __future__ import unicode_literals AUTHOR = u'El Diego Efe' SITENAME = u'Certezas Dudosas' SITEURL = 'http://nombreUsuario.github.io' TIMEZONE = 'America/Argentina/Buenos_Aires' DEFAULT_LANG = u'es' # Feed generation is usually not desired when developing FEED_ALL_ATOM = None CATEGORY_FEED_ATOM = None TRANSLATION_FEED_ATOM = None # Blogroll LINKS = (( 'Pelican' , 'http://getpelican.com/' ), ( 'Python.org' , 'http://python.org/' ), ( 'Jinja2' , 'http://jinja.pocoo.org/' ), ( 'You can modify those links in your config file' , '#' ),) # Social widget SOCIAL = (( 'Twitter' , 'http://twitter.com/nombreUsuario' ), ( 'Github' , 'https://github.com/nombreUsuario' ), ( 'Facebook' , 'http://www.facebook.com/nombreUsuario' ), ( 'Google+' , 'https://plus.google.com/+DiegoEfe' ), ) DEFAULT_PAGINATION = 10 # Uncomment following line if you want document-relative URLs when developing #RELATIVE_URLS = True Y el contenido de publishconf.py queda así: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env python # -*- coding: utf-8 -*- # from __future__ import unicode_literals # This file is only used if you use `make publish` or # explicitly specify it as your config file. import os import sys sys . path . append ( os . curdir ) from pelicanconf import * SITEURL = 'http://nombreUsuario.github.io' RELATIVE_URLS = False FEED_ALL_ATOM = 'feeds/all.atom.xml' CATEGORY_FEED_ATOM = 'feeds/ %s .atom.xml' DELETE_OUTPUT_DIRECTORY = True # Following items are often useful when publishing #DISQUS_SITENAME = \"\" #GOOGLE_ANALYTICS = \"\" Guardo un post armado en Markdown o restructuredText dentro del directorio content, así cuando vaya a generar el sitio voy a tener un contenido (para que ver algo cuando cargue el blog). Genero el sitio con make html (procesa todos los archivos del directorio content y aloja el sitio resultante en el directorio output) y ejecuto el servidor local con make serve: (ENV) $ make html (ENV) $ make serve El sitio lo puedo visitar en http://localhost:8000 . Veo que tiene un problema para encontrar el CSS , no sale bien formateado. Sin embargo, luego cuando subo el sitio al repositorio externo, corroboro que la página carga bien. Una alternativa, que permite que la edición se refleje inmediatamente en el sitio, es usar la siguientes dos instrucciones, la primera combina make html junto con make serve (el sitio se regenera ante cualquier edición de su contenido, y permanece accesible en el localhost) y la segunda es para detener el servicio. (ENV) $ make devserver (ENV) $ ./develop_server.sh stop Voy a agregar todo al branch source: (ENV) $ git add . (ENV) $ git commit -m \"Commit inicial de la rama source\" Lo que sigue es casi textual de la página de la página de Nicholas , se explica como hacer push del sitio al repositorio externo: Supongamos estar en la rama \"source\". Lo que se verá al acceder al blog, es lo que esté en la rama \"master\", así que hay que copiar allí las páginas html de la carpeta output. Nicholas propone usar un script llamado ghp-import para facilitar esa tarea. Este script exporta el contenido de la carpeta que se menciona en la linea de comandos (al ejecutarlo) hacia la rama \"gh-pages\". Por eso es necesario durante la puesta a punto inicial, crear una rama con ese nombre antes de correr el script, y luego hacer un merge desde la rama \"master\" con la rama \"gh-pages\" Si no está instalado ghp-import, se puede instalar con: (ENV) $ pip install ghp-import Finalmente, eston son los pasos restantes: (ENV)$ git branch gh-pages # crea la rama gh-branches (ENV)$ ghp-import output # exporta la carpeta output desde la rama actual (source) hacia la rama gh-pages (ENV)$ git checkout master # cambia el head a la rama master (ENV)$ git merge gh-pages # (ENV)$ git push --all # Cuando hice el merge creo que no estaba más .gitignore en la rama master. Así que lo creé de vuelta, tuve que agregarlo y comitearlo. Hay que esperar un rato hasta que el sitio esté accesible (sólo la primera vez, las siguientes actualizaciones que se hagan permiten acceder al nuevo contenido inmediatamente). Se podría hacer un push que incluya sólo el contenido de la rama \"master\", pero hacer un push de todas las ramas no molesta a nadie. GitHub pregunta el nombre de usuario y la contraseña al hacer el push al repositorio online. La página para acceder al blog es nombreUsuario.github.io Agregado de posts Al agregar nuevos posts (hechos con restructuredText o Markup, que deben ser guardados en el directorio \"content\") es necesario efectuar los siguientes pasos (suponiendo que uno está actualmente en la rama \"source\": $ cd /path/to/blog/ENV $ . bin/activate # activa el entorno para que funcionen los progs de python (make serve, ghp-import, etc) (ENV)$ make html # genera los archivos html que van a la carpeta \"output\" (ENV)$ ghp-import output # exporta la carpeta output desde la rama actual (source) hacia la rama gh-pages (ENV)$ git add . # sin add y commit no podremos cambiar a otra rama (ENV)$ git commit -m \"mensaje del commit\" (ENV)$ git checkout master # cambia el head a la rama master (ENV)$ git merge gh-pages # (ENV)$ git push --all # Ultimos detalles Para usar el tema Elegant hay que instalar Beautiful Soup y para usar el plugin que permite embeber videos de youtube hay que instalarlo: (ENV) $ pip install beautifulsoup4 (ENV) $ pip install pelican-youtube Problemas con GitHub Puede suceder que tras esperar media hora, luego de subir el sitio, siga dando un mensaje de error (404) al intentar visitarlo en su dirección final. Aparentemente esto puede evitarse si la subida se realiza mediante SSH en vez de hacerlo mediante HTTP . Esto lo advertí en las instrucciones de Leonard Axelsson . Las instrucciones para generar las llaves SSH ( SSH keys) están en esta ayuda de GitHub , mientras que el cambio propiamente dicho se explica en Changing a remote's URL , también en GitHub.","url":"https://eldiegoefe.github.io/blog-con-pelican-y-github.html","title":"Blog con Pelican y GitHub"},{"tags":"politica","text":"Hola, les agradezco las respuestas, realmente, y no me niego al encuentro para discutir estas preocupaciones compartidas. Mientras esperamos el acontecimiento (roguemos a Odín que incluya cerveza negra) quiero continuar —quizás me repita un poco—, resaltando que lo importante no es mi estado de ánimo sino el intercambio de perspectivas y propuestas de acción (por ejemplo: que los funcionarios cobren de acuerdo con su cargo docente, que se condensen las dedicaciones parciales y simples en dedicaciones exclusivas, que el salario permita comprar una vivienda en un tiempo razonable, etc). Lo mío es escribir consignas y panfletos, pero quizás no sea del todo inútil (tanto yo como esta acción). Al menos este ejercicio sirve para tener letra al alcance de la mano en caso de que se nos interponga alguna Asamblea en un futuro cercano (es una ironía para conmigo mismo), aunque como es de público conocimiento las Asambleas ya no son tan respetadas. Como me han señalado, soy conciente de la interdependencia de la escuela y del sistema de producción capitalista (también en su versión \"con inclusión social y revolución sustitutiva de cosechadoras importadas\"), así que saberlo aporta a la falta de expectativas respecto a la posibilidad de cambios educativos significativos. Durante esta guerra de posiciones con que la izquierda monsantista encarnada en Filmus y Barañao enfrenta a las corporaciones, es incluso posible que nos informen que vamos ganando, que el presupuesto educativo no para de crecer y que las netbooks son garrochas contra la Brecha Digital. (Yo estaría dispuesto a encauzar mis ánimos revolucionarios en un debate respetuoso con posiciones reformistas si el interlocutor fuese honesto, algo que el kirchnerismo con su manipulación del lenguaje vuelve inviable.) En estos días Conadu, además de producir verguenza ajena por su condición de agrupación kirchnerista, negocia el convenio colectivo de trabajo (y quizás la personería de la CTA que en estos 10 años Tomada no tuvo tiempo de otorgar dado que estuvo ocupado conversando con Pedraza por celular) . Allí se establecen las jerarquías docentes, las dedicaciones y el nomenclador (4 : 3 : 2 : 1 para exclusiva : completa : parcial : simple, y una escala de 180% | 160% | 140% | 120% | 100% | 80% para el titular | asociado | adjunto | profesor de tp | profesor auxiliar | auxiliar alumno). No conozco los fundamentos históricos de este reclamo (que es muy parecido a las condiciones de cargos y dedicaciones actuales) así que puedo estar diciendo una burrada, pero para mi esas jerarquías no promueven un mejor sistema educativo sino que arman una pirámide con gerentes, capataces y trabajadores rasos. Esto es medio inconexo, pero es un mail, no un paper. Entre las cosas que están como aceptadas en el imaginario docente está la cuestión de que realizar tareas de investigación/extensión nos aparta de \"la escuelita y el enseñadero\". Mi impresión es que la condición de \"investigadores\" no necesariamente redunda en una mejor experiencia educativa. De hecho, pienso que para muchos docentes esta condición empeora sus tareas, dado que generalmente desconocen y no están interesados en aspectos filosóficos o técnicos específicos de la educación, justamente porque están ocupados en otra cosa (¿construirse el currículum?) y se dedican a replicar modelos educativos que no están dispuestos a repensar. Se me podrá objetar que al menos en la Facultad de Ingeniería hay análisis colectivo de planificaciones, reuniones departamentales, gabinetes psicopedagógicos. Replicaré: no se nota, y eso que me consta la preocupación y esmero de algunos integrantes de esos espacios. Ser investigador (o extensionista, ¿existe la palabra?) no es el único modo de ser un desastre: hay profesores inmunes a los cursos de formación docente, por ejemplo aquellos fanáticos que con el multiple-choice se aseguran de que la mercancía \"estudiante\" alcanzó el estándar de calidad requerido al final de su linea de montaje-enseñanza, y que en su CV pueden llegar a acreditar horas en contacto íntimo con partes de Piaget y Vygotsky. ¿Qué se puede hacer cuando hay malos profesores? ¿Podríamos tener una posición gremial al respecto? ¿Qué opciones ofrecemos a los estudiantes para saltearse esas experiencias con el menor dolor posible mientras logramos que ese sujeto deponga su ineptitud, frustración, deseo de venganza, mediocridad? Yo estoy dando por supuesto que es posible identificar a los malos profesores pero claro que es difícil realizar una valoración imparcial. ¿Cómo se afrontan estos inconvenientes en sistemas educativos más exitosos que el nuestro? ¿Hay modelos educativos exitosos? Estoy leyendo sobre Finlandia, me parece que sí. A mi se me ocurre que parte de ese problema puede ser resuelto si se modifica el currículum fijo y se vuelve optativa la mayoría de las asignaturas de una carrera (exigiendo un número mínimo de créditos) y por otra parte, tomándose seriamente la posibilidad de organizar cátedras paralelas, una entelequia (en el sentido de cosa irreal) de la que sólo encontré mención en textos herrumbrándose. Estas dos propuestas sirven para mucho más que para solventar el flagelo de la impericia. Todos estos puntos requieren discusiones, fundamentaciones, problematizaciones, aperturas. ¿En qué espacios podrían alojarse estos debates? Justo sonó el timbre y me toca salir al recreo. Saludos! Diego (Efe para lxs amigxs)","url":"https://eldiegoefe.github.io/modos-de-arruinar-la-educacion-superior-parte-ii.html","title":"Modos de arruinar la educación superior (Parte II )"},{"tags":"politica","text":"Hola. Me resulta raro escribir después de tanto tiempo. En vez de convocar a construcciones gremiales postergadas o entretenerme con las ruinas del kirchnerismo y sus espejismos para feligreses, tenía ganas de compartir algunas ideas que me rondan acerca del trabajo docente, que estoy próximo a suspender. En primer lugar quiero manifestar la falta de satisfacción que siento por el ejercicio de la profesión docente (doy pie para hacer chistes, háganlos por favor). En síntesis es como si mis esfuerzos, en vez de colaborar en la formación integral de las personas que estudian bioingeniería, a quienes me gustaría acompañar en un proceso de comprensión del mundo y de sí mismos, en realidad sirven para fortalecer lo peor del sistema: la familiarización boba y acrítica con contenidos de tecnologías y ciencias (que servirá para sostener el mercado de trabajo, es decir el sistema de desigualdad), el acrecentamiento de su real ignorancia, el empobrecimiento cultural y la falta de utopías, todo con la excusa de distintas carencias para ejercer mis tareas. En vez de ahondar en la desesperación, quiero enumerar una serie de cataplasmas (nada científicamente comprobado, por supuesto): Cualquier tarea util requiere dedicación para obtener logros significativos. Las dedicaciones parciales y simples son llanamente una porquería. ¿Cómo se puede concentrar alguien en una tarea si su atención está fragmentada en el espacio y en el tiempo? Es un detalle, pero decimos valorar el trabajo colaborativo y, en cambio, por esta situación, es una epopeya encontrar un momento y un espacio común por nuestros trabajos alternativos (que pueden ser dedicaciones parciales y simples en otras asignaturas o instituciones). La abundancia de jerarquías provoca diferencias irreales. Las resoluciones que cuantifican las obligaciones de unos y otros son patéticas y absurdas, probablemente hayan sido confeccionadas gracias a la inspiración feudal de algunos señores profesores. La pirámide sirve para que haya esclavos a quienes castigar y abismales diferencias salariales, que encima premian de modo exhorbitante el envejecimiento. Yo creo que un docente que recién se inicia debería ganar un buen salario (que le permita un buen vivir), mientras que el profesor más antiguo y pulenta debería recibir \"sólo\" un 50% a 75% más (actualmente el aux de 1ra sin antiguedad gana de bolsillo $5500 y el titular con máxima antigüedad $17300, esto es aprox un 200% más). Los funcionarios deberían ser menos (menos ineptos) y ganar lo mismo que si se desempeñaran como profesores. En vez de evaluar la formación en términos administrativistas (número de egresados, cantidad de cursos dictados, índices de permanencia en la facultad, cantidad de reportajes otorgados, etc) deberían renunciar (una hemosa utopía) o por lo menos empezar por admitir que no tienen ni idea acerca de qué implica una buena enseñanza, una buena investigación, un buen funcionamiento institucional, etc. Dejar de manipular datos al estilo Indek-Coneau sería un hermoso acto. Los procesos de selección del profesorado tienen que cambiar. La profesión docente es poco atractiva para las mejores mentes de nuestra sociedad. Ahora mismo, el atractivo de nuestra profesión puede ser la de un salario mediocre pero estable y seguro (por favor ahorrar la palabra \"vocación\" para conversaciones cuando se acaba el tema del clima), o la inalcanzabilidad de puestos más deseados, sin embargo las condiciones generales no son atractivas. Los concursos son una elección a dedo disfrazada, dada la insuficiencia intrínseca del procedimiento como tal y la arbitrariedad con que los jurados ejercen su tarea (no neceriamente por \"maldad\"). Se necesita rediscutir los procesos de acceso y permanencia en la función docente apelando a nuestra inteligencia y a modelos que quizas existen en otros paises. Seguramente sea mejor evaluar grupalmente a un equipo de cátedra, jerarquizar la opinión de los estudiantes y graduados e involucrar a especialistas en educación en estas tareas. Yo me encuentro repitiendo más o menos las mismas cosas todos los cuatrimestres, y no sólo por una tendencia indeclinable hacia la haraganería. Quizás esto de replicar exposiciones era necesario cuando no existía YouTube. La facilidad de acceso a formatos de almacenamiento y reproducción de imagenes y sonidos permite una mayor libertad para plantear modos de aprendizaje distintos a los tradicionales. Que cada estudiante vea la clase cuando quiera, al ritmo y con las pausas que desee. Tenemos imaginación para plantear espacios de encuentro más significativos: grupos de discusión, tareas de investigación dirigidas, proyectos que requieren revision experta, etc. Obviamente cada disciplina tendrá su modo singular de plantear la enseñanza, pero dejemos de justificar el sueldo repitiendo discursos. Debemos exigir condiciones de trabajo confortables, cómodas, casi lujosas. Basta de exhibir orgullo por ser capaces de trabajar en condiciones adversas. Queremos la mejor herramienta para cada situación que nos toca atravesar, los mejores laboratorios, los mejores instrumentos. Empobrecemos los resultados si estamos incómodos, con ganas de irnos a usar una internet veloz en casa. Queremos banda ancha, espacios agradables y silenciosos, bibliotecas con amplios horarios, salas de estudio abiertas, medios de transportes no-deshumanizantes (hace unos días viajé a Oro Verde en colectivo en horario pico, cada vez que lo hago me duele menos gastar en combustibles fósiles para ir en auto), etc. Podría seguir pero ya es cansador. Me llevó mucho tiempo escribir estas tristes líneas y no hay ninguna planilla donde pueda asentar que estoy pensando en mis tareas docentes en un tiempo y lugar no identificables por el reloj en el cual marcamos el inicio y el final de la jornada laboral. Saludos cordiales. Diego PD : muy bueno el artículo de Guillermina Seri que envió el prof. Lambruschini hace un tiempo. Debería haber escrito en ese momento, porque ya me olvidé lo que me había propuesto comentar sobre él.","url":"https://eldiegoefe.github.io/modos-de-arruinar-la-educacion-superior-parte-i.html","title":"Modos de arruinar la educación superior (Parte I)."},{"tags":"tecnicismos","text":"Estoy leyendo sobre IPython , que instalé en Windows a través de Anaconda . Durante ese viajo me enteré de que Windows tiene dos shells, el más viejo y limitado es ‘cmd.exe' mientras que el recomendado es ‘Windows PowerShell', ya que tiene los mismos comandos que Unix. En cualquiera de los dos, IPython se corre con la orden ipython Hay ayudas de IPython en: Documentación Oficial StackOverflow Lista de correos ¡Debe haber muchas más! Sos un nabo. Crónica de una batalla menor. Mientras leía sobre Python un pájaro carpintero taladraba mi cabeza repitiéndome: sos un nabo, todavía no pudiste reinstalar Linux . Por lo cual debí poner manos a la obra para brindarle un hogar al Pingüino. Tras infructuosos intentos de instalación de Linux Mint en sus versiones Mate y Cinnamon usando YUMI – Multiboot USB Creator como instalador de LiveUSB, cosa que muchas veces me había funcionado perfecto en el pasado, terminé absorto en la lectura de sitios sobre el nuevo estándar de booteo UEFI , instrucciones sobre habilitaciones y deshabilitaciones de CSM (Compatibility Support Module) y otras términos de Magia Oscura. Finalmente terminé optando por instalar Fedora en su versión 20 y leyendo sobre las recomendaciones de particionado que son distintas a las de Linux Mint. No fue sencillo, finalmente decidí dejar el disco de estado sólido de 128 GB exclusivamente destinado a Windows, y permitir que el instalador de Fedora organice las particiones que se le ocurra armar por defecto en el disco de 500 GB , por lo cual todo ese disco recibió un backup ya que todos los archivos se iban a perder con el formateo. Lo bueno es que tras raspar y raspar las superficies de las paredes con las que nos golpeamos la cabeza siempre algo se termina aprendiendo . Ahí descubrí que no todas las distribuciones requieren la misma organización en el disco rígido. Linux Mint arma dos particiones para funcionar: la partición root (punto de montaje básico de todo el sistema de archivos \"/\") y la partición swap . A esto Fedora le agrega una partición boot (/boot) de 500 MB , y una partición efi (/boot/efi) de 200 MB —ambas obviamente para el arranque del sistema— y esto es lo interesante, también una ‘partición del usuario' (/home) donde se guardaran todos los datos (música, documentos, etc), de modo tal que cuando se necesite reinstalar el sistema no se pierdan. Esto es lo mismo que conviene hacer con Windows, instalar una partición \"del sistema\" (Disco C) y armar otra para los datos (Disco D).","url":"https://eldiegoefe.github.io/cuando-uno-quiere-a-y-termina-haciendo-b.html","title":"Cuando uno quiere A y termina haciendo B"},{"tags":"tecnicismos","text":"Empecé a tomarle el gustito a Fedora y Gnome. Al principio (24 horas atrás) el mouse parecía haber alcanzado un inoportuno grado de independencia porque se tendía a ir a la esquina superior izquierda (la \"hot corner\") y se habilitaba el menú de Actividades. Para solucionarlo encontré un sitio desde el cual se instalan las extensiones de GNOME , que es un gran descubrimiento en sí mismo. Primero lo primero: instale ‘No Topleft Hot Corner'. Me resulto llamativo que la instalación se realiza moviendo un switch que aparece junto al nombre de la extensión desde la propia página web (y que tiene también el texto ON u OFF de acuerdo a si ya esta instalado o no). Un detalle es que me anduvo bien desde Firefox, pero no desde Chrome (me doy bronca, porque todavía no instalé Opera, y es mi navegador de cabecera). La segunda extensión que instale fue ‘ShellTile' que permite apilar o hacer tile (¿cuadricular? ¿como se dice esto en castellano?) de las ventanas abiertas en un escritorio. Funciona apretando CTRL y moviendo una ventana encima de otra. Es buenísimo para tener el libro-tutorial de IPython abierto en el costado izquierdo y el browser con IPython corriendo en el costado derecho. ¡Da gusto trabajar con el espacio visual bien organizado! De paso quiero agradecer a la gente de argentina@lists.fedoraproject.org por darme unas indicaciones buenísimas para usar linux y por recomendarme Ask Fedora para consultar dudas con la comunidad que también tiene una sección en español. Actualización Tras un corto período de uso, y por recomendación de mi amigo Jimi Medus tras una consulta mía con el tema del \"tiling\", migré desde Gnome a KDE . KDE es mucho más configurable, tiene un modo que me encanta de adaptar el tamaño de las ventanas de programas a un cuarto o un medio del monitor, y además tiene un sistema de \"actividades\" que permite setear varios escritorios distintos cada uno con sus aplicaciones y fondo de pantalla, útil para adaptarlos a distintas tareas (un escritorio para multimedia, otro para programación, otro para navegación y torrents, etc). Estas actividades permanecen luego de reiniciar el sistema, así que alcanza con configurarlos una sola vez. Incluso al arrancarse, el sistema carga los programas que estaban en memoria al momento de apagar.","url":"https://eldiegoefe.github.io/descubriendo-gnome.html","title":"Descubriendo Gnome"},{"tags":"tecnicismos","text":"Los directorios típicos son: /bin ejecutables (Essential commands that everyone needs to use at any time) /usr A complex hierarchy of additional programs and files. /usr/bin normal user executables. The commands that aren't essential for users but are useful /sbin (superuser core executables) The commands the system Administrator needs access to. /usr/sbin (superuser executables). The commands that aren't essential for Administrators but are useful. Library files: (semi-equivalent to windows dll's) /lib , /usr/lib , etc. Configuration files: /etc/ /run/media es en donde se montan las unidades portátiles, como el rígido externo y el pendrive También se le puede preguntar al sistema dónde está instalado un paquete: $ whereis jekyll jekyll: /home/diego/.rvm/gems/ruby-2.0.0-p353/bin/jekyll","url":"https://eldiegoefe.github.io/donde-estan-los-programas-en-linux.html","title":"Dónde están los programas en Linux"},{"tags":"tecnicismos","text":"En mi caso, alcanzar un estado zen requiere atravesar travesías barrocas. Mientras miraba cosas de IPython llegué a Pythonic Perambulations . Me gustó el contenido (muestra cómo armar ventanas de browsers con matplotlib interactivo), me gustó el diseño y me llamó la atención el dominio github.io . Blogs como el de Jake Vanderplas se arman con un motor llamado Jekyll. ( editado: Jake migró su sitio a Pelican, que está escrito en Python. Armé un post para explicar cómo instalarlo y usarlo en conjunción con las páginas personales de GitHub, ver `Blog con Pelican y GitHub <http://eldiegoefe.github.io/blog-con-pelican-y-github.html>`_. Por ende este post queda desactualizado, además de haber quedado incompleto o quizás con errores ). Jekyll está escrito en Ruby, que permite desentendernos de los sistemas de publicación de contenidos (como Wordpress, con el que armé sitios como Policiclos y a los cuales terminé perdiendo acceso por culpa de un hacker indonesio que me cambió la página de acceso al panel de control del blog por un texto burlón en un ingles todo despatarrado, por lo cual el sitio está sin actualizar desde hace un par de años (igual ahora en el año 2014 el servicio de nombres en Argentina empieza a ser pago, con lo cual hubiese sido bastante posible que este -y otros blogs- fuesen dados de baja). Con Jekyll la idea es que uno escribe texto plano (no hace falta escribir en html), se desentiende de la tarea de actualizar con cierta frecuencia el manejador de contenidos (actualizar wordpress), crea sitios estáticos que se cargan muy rápido (y pueden lucir muy lindos) y obtiene más flexibilidad que las propuestas de blogging populares: Blogger , Wordpress , Tumblr , etc. Pero nunca nada es tan fácil como dicen por ahí. Quizás con las instrucciones siguientes puedan replicar una versión corta de lo que ha sido mi experiencia. Se ahorrarían así varias horas de intentos fallidos: Toda la información está en la web de Jekyll (sin embargo, continúo con la síntesis de lo que yo hice). Hay un gran tutorial escrito por Andrew Munsell: Jekyll by example . Instalación de Software Requerido Para instalar Jekyll se necesita Ruby y RubyGems. Bajé los últimos paquetes de ambos, los descomprimí y compilé pero, seguramente por mi falta de experiencia en Linux, la cosa no marchaba. Terminé instalando RVM (Ruby Version Manager . Para usarlo abren un terminal de Linux y piden una lista de todos los interpretes de Ruby que RVM es capaz de instalar en su sistema. $ rvm list known A mi me dio un listado que incluía (pero no se limitaba) a: # MRI Rubies [ruby-]1.8.6[-p420] [ruby-]1.8.7[-p374] [ruby-]1.9.1[-p431] [ruby-]1.9.2[-p320] [ruby-]1.9.3[-p484] [ruby-]2.0.0-p195 [ruby-]2.0.0[-p353] [ruby-]2.1.0 [ruby-]2.1-head ruby-head Elegí instalar la versión 2.1.0 con la siguiente instrucción: $ rvm install 2.1.0 Para ver que versión de Ruby tienen efectivamente instalada teclean: $ ruby -v Instalación de Jekyll Ahora sí van a poder instalar Jekyll: $ gem install jekyll Generación del nuevo blog El sitio se inicializa generándose los primeros archivos imprescindibles: $ jekyll new el-nombre-de-mi-blog Después hay que hacer un build: $ jekyll build Blog local Se puede acceder a la versión local del sitio web (para corroborar que todo se vea tal como se desea, antes de subirlo al hosting): $ jekyll serve --watch La dirección para ver el sitio generado será http://localhost:4000 o sino también http://0.0.0.0:4000 . El agregado de —watch permite que si se realizan cambios en los archivos, éstos se puedan ver inmediatamente recargando la página del navegador. Subiendo el sitio a un hosting Para actualizar el sitio en el hosting sólo hará falta subir al mismo el contenido de la carpeta _site . The End La ventaja de Jekyll es que finalmente se termina escribiendo en texto plano (con la ayuda de Markdown se generan páginas estáticas (que funcionan muy rápido) y se logra inmunidad frente a los ataques de hackers de Indonesia.","url":"https://eldiegoefe.github.io/instrucciones-para-armar-un-blog-geek.html","title":"Instrucciones para armar un blog geek"},{"tags":"tecnicismos","text":"Aprender programación mediante un libro, sobre todo si uno le cree a la contra-tapa, requiere seguir capítulo a capítulo, sección a sección, todas las instrucciones. Es como que nos programamos para programar. Pero al copiar los ejemplos, incluso chequeando que no haya errores de tipeo, suelen aparecer problemas. Los resultados no son los esperados, aparecen errores, excepciones, relámpagos y huracanes. Mientras sigo con las lecturas sobre IPython nos dicen que importemos el paquete NetworkX. Sin embargo, es desconocido para mi sistema. Busco ayuda y llego a la pagina de NetworkX donde están las instrucciones de instalación . Dice que se instala fácilmente con pip install networkx pero resulta que pip tampoco es un comando conocido. A buscar pip. Recién ahí se completa el rompecabezas. Se instala en Fedora con un sudo yum install python-pip y luego a recorrer el caminito de mendrugos de pan, rogando reencontrarnos con la posibilidad de seguir linealmente la secuencia de instrucciones del libro, que no me engaña, ha sido escrito por la bruja de Hansel y Gretel.","url":"https://eldiegoefe.github.io/aprender-a-lo-hansel-y-gretel.html","title":"Aprender a lo Hansel y Gretel"},{"tags":"tecnicismos","text":"(editado: empecé a traducir un buen tutorial de Git y lo pueden ver en este post ) El año pasado conocí algo que ya se había cruzado en mi camino y no me había dado cuenta. Una necesidad lo requería: miles de versiones del mismo archivo con el nombre evolucionando con rastros de racionalidad pero en definitiva impidiendo saber si, tras dos o tres días de ausencia, me encontraba trabajando sobre la última versión o si la que decía \"ultima final para imprimir final b\" era realmente la que debía utilizar. Tanto sea un documento de texto como un programa es imprescindible tener algún método, y el método manual que utilizo desde que tengo uso de memoria ya ven lo deficiente que es. Por el lado ya no de la necesidad sino del efectivo uso del control de versiones, encontré interesante la funcionalidad de las wikis, que van almacenando todas las versiones previas y no tan solamente la última, que es la que muestran; pudiéndose recuperar una versión más antigua e incluso comparar la versión del texto actual con cualquier versión previa. Así fue como el año pasado me entusiasmé leyendo sobre mercurial, git, commits, branches, bitbuckets, githubs y palabrerío relacionado. Advertí que incluso está presente todo eso en software ampliamente diverso que yo había usado en el pasado (como labview o lyx), pero no le había dado la menor bola. Github es un sitio web que ofrece el sistema de control de versiones, un servicio de alojar archivos con la funcionalidad asociada de recuperar versiones anteriores y todo lo relacionado con ello. Es ampliamente mencionado y usado por los desarrolladores y comunidades de software libre (creo que es el sitio elegido para alojar las distintas versiones del kernel de linux). Es sumamente interesante que estén a disposición de los navegantes todos los códigos fuentes allí alojados, de manera tal que uno puede \"clonar\" todos esos archivos (escritos en el idioma que sea) y trabajar con ellos en la computadora personal. La idea es que cualquiera puede realizarle mejoras al programa y pedir, mediante el propio sistema que ofrece el motor del sitio, la inclusión de sus aportes al código fuente del programa. Copio acá algunos apuntes mios del uso de GIT , no es un tutorial (ya hay muchos en la web, como el de Lars Vogel , sino más bien un ayuda-memoria para mi mismo, que estoy permanentemente buscando los comandos. Espero poder recordarlos a medida que los use: Un repositorio es un conjunto de archivos correspondientes a un mismo proyecto, y con la misma palabra se designa al espacio donde estos se alojan. En general un desarrollador conserva un repositorio local (un directorio con todos los archivos en su propia computadora) y un repositorio remoto (en un sitio como github, bitbucket, etc). Un mismo repositorio tiene una o varias ramas (branches). Solamente puede estar habilitada una rama en cada momento, la cual muestra un conjunto de archivos y directorios relativos a esa rama (o los mismos archivos pero quizás con otro contenido). En el archivo .gitignore (que puede estar en cualquier subdirectorio del repositorio) se listan los archivos que deben ignorarse. Por ejemplo *.pyc (los archivos de python compilados) o los *.exe (lo que se controla con este sistema son las versiones del código fuente, no los binarios). .git (es un directorio) contiene la historia completa del repositorio. El contenido sólo lo manipula el motor del sistema y no el usuario. .git/config contiene la configuración local del repositorio Los comandos más usados pueden estar entre los siguientes: git init # Inicializamos el repositorio local Git git add . # Agregamos todo (archivos y directorios) al repositorio git commit -m \"Initial commit\" # Hacemos un commit al repositorio git log # Muestra el log (un historial) git add # Para agregar cosas al index stage (indice). git a # Idéntico al anterior git remote -v # Para ver a donde apunta el origin git remote add origin git@github.com:usuario/repo.git # Para cambiar el origin git remote rm origin # Para elimiar el origin git push # Para enviar los cambios al repositorio git pull # Para traer los cambios desde el repositorio git branch # Para ver las distintas ramas existentes git branch nombre-de-la-nueva-rama # Para crear una rama git checkout nombre-de-la-otra-rama # Para cambiar a otra rama git commit -a -m \"Mensaje de commit\" # Para comitear git branch -d nombre-del-branch-a-borrar # Para borrar un branch","url":"https://eldiegoefe.github.io/usando-control-de-versiones.html","title":"Usando control de versiones"},{"tags":"blog","text":"Un problema con el desarrollo de tecnologías es la dificultad para elegir e iniciar el camino. Hay tantas opciones de software y hardware que se vuelve difícil, así como es una tarea extremadamente compleja elegir un par de zapatillas, porque no hay 5 o 6 modelos como cuando uno era chico, sino que hay 500, y encima van cambiando (ni siquiera es posible conseguir las mismas zapatillas compradas hace un par de años). Por otra parte los tecnófilos tenemos afinidad por lo desconocido. Nos gusta experimentar y puede ocurrir —como hoy— que una herramienta lleva a la otra y si bien empezamos a buscar el modo de resolver mediante microcontroladores (en particular con una placa Tiva C un problema de transmisión de datos terminamos instalando un software para ensayar programación científica online con IPhyton . El trekking por estos sinuosos caminos del conocimiento puede terminar en ignorancia. No son pocas las veces que iniciamos la instalación y el estudio de una herramienta nueva, luego la dejamos en stand-by tras haber logrado dar los pasos iniciales, y cuando regresamos, quizás un par de meses después, ni siquiera recordamos cuales son los comandos básicos para poner al Golem en funcionamiento. Este blog es una bitácora donde registro las piedras con las cuales quiero volver a tropezar, y quizás también sirva para compartir algún descubrimiento aunque mas no sea de nuevas maquinas e invenciones ficticias.","url":"https://eldiegoefe.github.io/exceso-de-opciones.html","title":"Exceso de opciones"},{"tags":"blog","text":"Frecuentes Gmail Mercado Libre Wikipedia Mi lista de canales de YouTube Book Depository Links sobre música Redes Diaspora Facebook Google+ Instagram Twitter Emacs Emacs StackExchange Contenidos Feedly LifeHack LifeHacker Make use of Makezine Medium Pocket Reddit - BodyWeightFitness - Flexibility SmarterWare Steve Pavlina Uses This Noticias BBC News La Nación Utiles Evernote Ergodox Configurator Google Translate Descargas Avax Home b-ok Ebook 777 epublibre ProxyBay TParser Unblocked Eve-Online Búsquedas en Chruker Brave Collective Eve Central Eve University FCON Forum GW2 GW2 Efficiency MetaBattle Snow Crows Canal de YouTube: Kyosika Repositorios Bitbucket GitHub Películas y Subtítulos Argenteam Subscene Enlaces Diigo Videos YouTube Vimeo Calistenia / Deportes DareBee Homestead Mother Earth News The Fewell Homestead Homesteaders of America The Frugal Chicken Rise and Shine Rabbitry The Elliott Homestead Carpintería Más enlaces de carpintería en: Mi lista de canales de YouTube . Foros, utilidades y bibliografia Foro de la madera Sketchup Woodworkers Heaven Woodwork Forum (Australia) Comercios Workshop Heaven Infinity Tools Amazon (España) Dictum Hock Tools Lee Valley Lie Nielsen Axminster Rutlands Gubia Pe Old Tools Highland Woodworking Fine Tools Woodcraft Comercial Pazos Tools from Japan Blogs Artisan Flamingo Carpintería para aficionados Brico-Carpintería Experimento casa Sandal Woods The wood whisperer She works wood La cabra en la escalera La casa rota Técnicas básicas de ebanistería Foros El foro de la madera Hecho x nostros mismos Hecho x nostros mismos (viejo) Otros foros El Cuartito DIYer","url":"https://eldiegoefe.github.io/inicio.html","title":"Inicio"}]}